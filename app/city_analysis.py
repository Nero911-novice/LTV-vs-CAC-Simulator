import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
from datetime import datetime, timedelta
import random
from typing import Dict, List, Tuple, Optional
def city_analysis_mode():
    """–ê–Ω–∞–ª–∏–∑ –ø–æ –≥–æ—Ä–æ–¥–∞–º"""
    st.header("üèôÔ∏è –ê–Ω–∞–ª–∏–∑ –ø–æ –≥–æ—Ä–æ–¥–∞–º")
    
    st.markdown("""
    **–ì–æ—Ä–æ–¥—Å–∫–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞**: —Ä–∞–∑–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –∏–º–µ—é—Ç –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ —Ä–∞–∑–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏–∑-–∑–∞ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏, 
    –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏, –ø–æ–∫—É–ø–∞—Ç–µ–ª—å–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã.
    """)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä–æ–¥–æ–≤
    cities_data = setup_cities_data()
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤
    create_cities_comparison_chart(cities_data)
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ —Å—Ç–∞–¥–∏—è–º —Ä–∞–∑–≤–∏—Ç–∏—è
    analyze_city_maturity(cities_data)
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≥–æ—Ä–æ–¥–∞–º
    show_city_recommendations(cities_data)

def setup_cities_data() -> Dict:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –≥–æ—Ä–æ–¥–∞–º"""
    st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ—Ç—Ä–∏–∫ –ø–æ –≥–æ—Ä–æ–¥–∞–º")
    
    # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤
    default_cities = {
        "–ú–æ—Å–∫–≤–∞": {
            "population": 12_500_000, "aov": 420, "frequency": 6.2, "take_rate": 28,
            "cac": 1800, "competition": 9, "maturity": "–ó—Ä–µ–ª—ã–π"
        },
        "–°–ü–±": {
            "population": 5_400_000, "aov": 380, "frequency": 4.8, "take_rate": 26,
            "cac": 1400, "competition": 8, "maturity": "–ó—Ä–µ–ª—ã–π"
        },
        "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": {
            "population": 1_600_000, "aov": 280, "frequency": 3.2, "take_rate": 24,
            "cac": 900, "competition": 5, "maturity": "–†–∞—Å—Ç—É—â–∏–π"
        },
        "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥": {
            "population": 1_500_000, "aov": 310, "frequency": 3.8, "take_rate": 25,
            "cac": 1100, "competition": 6, "maturity": "–†–∞—Å—Ç—É—â–∏–π"
        },
        "–ö–∞–∑–∞–Ω—å": {
            "population": 1_300_000, "aov": 260, "frequency": 2.9, "take_rate": 23,
            "cac": 800, "competition": 4, "maturity": "–†–∞–∑–≤–∏–≤–∞—é—â–∏–π—Å—è"
        },
        "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä": {
            "population": 900_000, "aov": 240, "frequency": 2.1, "take_rate": 22,
            "cac": 650, "competition": 3, "maturity": "–†–∞–∑–≤–∏–≤–∞—é—â–∏–π—Å—è"
        }
    }
    
    selected_cities = st.multiselect(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
        list(default_cities.keys()),
        default=["–ú–æ—Å–∫–≤–∞", "–°–ü–±", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ö–∞–∑–∞–Ω—å"]
    )
    
    if not selected_cities:
        selected_cities = ["–ú–æ—Å–∫–≤–∞", "–°–ü–±"]
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    cities_analysis = {}
    for city in selected_cities:
        data = default_cities[city].copy()
        
        # –†–∞—Å—á–µ—Ç LTV –∏ –¥—Ä—É–≥–∏—Ö –º–µ—Ç—Ä–∏–∫
        monthly_revenue = data['aov'] * data['take_rate'] / 100 * data['frequency']
        ops_cost = 25  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
        monthly_profit = monthly_revenue - ops_cost
        
        # Churn –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∑—Ä–µ–ª–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞
        churn_rates = {"–ó—Ä–µ–ª—ã–π": 10, "–†–∞—Å—Ç—É—â–∏–π": 12, "–†–∞–∑–≤–∏–≤–∞—é—â–∏–π—Å—è": 15}
        churn = churn_rates[data['maturity']]
        
        ltv = monthly_profit / (churn / 100)
        ltv_cac_ratio = ltv / data['cac']
        
        cities_analysis[city] = {
            **data,
            'monthly_revenue': monthly_revenue,
            'monthly_profit': monthly_profit,
            'churn': churn,
            'ltv': ltv,
            'ltv_cac_ratio': ltv_cac_ratio,
            'market_potential': data['population'] * 0.15 * data['frequency']  # 15% penetration
        }
    
    return cities_analysis

def create_cities_comparison_chart(cities_data: Dict):
    """–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≥–æ—Ä–æ–¥–æ–≤"""
    st.subheader("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤")
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    cities = list(cities_data.keys())
    ltv_values = [cities_data[city]['ltv'] for city in cities]
    cac_values = [cities_data[city]['cac'] for city in cities]
    populations = [cities_data[city]['population'] for city in cities]
    frequencies = [cities_data[city]['frequency'] for city in cities]
    
    # Bubble chart
    fig = go.Figure()
    
    # –¶–≤–µ—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –ø–æ —Å—Ç–∞–¥–∏–∏ –∑—Ä–µ–ª–æ—Å—Ç–∏
    maturity_colors = {"–ó—Ä–µ–ª—ã–π": "green", "–†–∞—Å—Ç—É—â–∏–π": "orange", "–†–∞–∑–≤–∏–≤–∞—é—â–∏–π—Å—è": "red"}
    colors = [maturity_colors[cities_data[city]['maturity']] for city in cities]
    
    fig.add_trace(go.Scatter(
        x=cac_values,
        y=ltv_values,
        mode='markers+text',
        text=cities,
        textposition="middle center",
        marker=dict(
            size=[p/100000 for p in populations],  # –†–∞–∑–º–µ—Ä = –Ω–∞—Å–µ–ª–µ–Ω–∏–µ
            color=colors,
            line=dict(width=2, color='black'),
            sizemode='diameter',
            sizeref=2.*max([p/100000 for p in populations])/(40.**2),
            sizemin=10
        ),
        hovertemplate='<b>%{text}</b><br>' +
                      'CAC: %{x:,.0f} —Ä—É–±<br>' +
                      'LTV: %{y:,.0f} —Ä—É–±<br>' +
                      '<extra></extra>'
    ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏–∏-–æ—Ä–∏–µ–Ω—Ç–∏—Ä—ã
    max_val = max(max(ltv_values), max(cac_values))
    
    # –õ–∏–Ω–∏—è LTV = CAC (1:1)
    fig.add_shape(type="line", x0=0, x1=max_val, y0=0, y1=max_val,
                  line=dict(color="red", width=2, dash="dash"))
    
    # –õ–∏–Ω–∏—è LTV = 3*CAC (3:1)
    fig.add_shape(type="line", x0=0, x1=max_val/3, y0=0, y1=max_val,
                  line=dict(color="green", width=2, dash="dash"))
    
    fig.update_layout(
        title="–†–∞–∑–º–µ—Ä –ø—É–∑—ã—Ä—è = –Ω–∞—Å–µ–ª–µ–Ω–∏–µ, —Ü–≤–µ—Ç = —Å—Ç–∞–¥–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è —Ä—ã–Ω–∫–∞",
        xaxis_title="CAC (—Ä—É–±)",
        yaxis_title="LTV (—Ä—É–±)",
        height=500
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
    fig.add_annotation(x=max_val*0.8, y=max_val*0.85, text="LTV = CAC (1:1)",
                      showarrow=False, font=dict(color="red"))
    fig.add_annotation(x=max_val*0.25, y=max_val*0.85, text="LTV = 3√óCAC (3:1)",
                      showarrow=False, font=dict(color="green"))
    
    st.plotly_chart(fig, use_container_width=True)
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤")
    
    comparison_df = pd.DataFrame([
        {
            '–ì–æ—Ä–æ–¥': city,
            '–ù–∞—Å–µ–ª–µ–Ω–∏–µ': f"{data['population']:,}",
            'AOV': f"{data['aov']} —Ä—É–±",
            '–ß–∞—Å—Ç–æ—Ç–∞': f"{data['frequency']:.1f}",
            'Take Rate': f"{data['take_rate']}%",
            'CAC': f"{data['cac']:,} —Ä—É–±",
            'LTV': f"{data['ltv']:,.0f} —Ä—É–±",
            'LTV/CAC': f"{data['ltv_cac_ratio']:.1f}:1",
            '–°—Ç–∞–¥–∏—è': data['maturity'],
            '–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä—ã–Ω–∫–∞': f"{data['market_potential']:,.0f}"
        }
        for city, data in cities_data.items()
    ])
    
    st.dataframe(comparison_df, use_container_width=True)

def analyze_city_maturity(cities_data: Dict):
    """–ê–Ω–∞–ª–∏–∑ –ø–æ —Å—Ç–∞–¥–∏—è–º –∑—Ä–µ–ª–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞"""
    st.subheader("üìà –ê–Ω–∞–ª–∏–∑ –ø–æ —Å—Ç–∞–¥–∏—è–º —Ä–∞–∑–≤–∏—Ç–∏—è —Ä—ã–Ω–∫–∞")
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç–∞–¥–∏—è–º
    maturity_groups = {}
    for city, data in cities_data.items():
        stage = data['maturity']
        if stage not in maturity_groups:
            maturity_groups[stage] = []
        maturity_groups[stage].append(data)
    
    # –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ —Å—Ç–∞–¥–∏—è–º
    fig = make_subplots(
        rows=2, cols=2,
        subplot_titles=('–°—Ä–µ–¥–Ω–∏–π LTV/CAC –ø–æ —Å—Ç–∞–¥–∏—è–º', '–°—Ä–µ–¥–Ω–∏–π CAC',
                       '–ß–∞—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è', 'Take Rate'),
        specs=[[{"type": "bar"}, {"type": "bar"}],
               [{"type": "bar"}, {"type": "bar"}]]
    )
    
    stages = list(maturity_groups.keys())
    colors = ['red', 'orange', 'green']
    
    for i, stage in enumerate(stages):
        stage_data = maturity_groups[stage]
        avg_ltv_cac = np.mean([d['ltv_cac_ratio'] for d in stage_data])
        avg_cac = np.mean([d['cac'] for d in stage_data])
        avg_frequency = np.mean([d['frequency'] for d in stage_data])
        avg_take_rate = np.mean([d['take_rate'] for d in stage_data])
        
        fig.add_trace(go.Bar(x=[stage], y=[avg_ltv_cac], 
                            marker_color=colors[i % len(colors)], showlegend=False), 
                     row=1, col=1)
        fig.add_trace(go.Bar(x=[stage], y=[avg_cac], 
                            marker_color=colors[i % len(colors)], showlegend=False), 
                     row=1, col=2)
        fig.add_trace(go.Bar(x=[stage], y=[avg_frequency], 
                            marker_color=colors[i % len(colors)], showlegend=False), 
                     row=2, col=1)
        fig.add_trace(go.Bar(x=[stage], y=[avg_take_rate], 
                            marker_color=colors[i % len(colors)], showlegend=False), 
                     row=2, col=2)
    
    fig.update_layout(height=600)
    fig.update_yaxes(title_text="LTV/CAC", row=1, col=1)
    fig.update_yaxes(title_text="CAC (—Ä—É–±)", row=1, col=2)
    fig.update_yaxes(title_text="–ü–æ–µ–∑–¥–æ–∫/–º–µ—Å—è—Ü", row=2, col=1)
    fig.update_yaxes(title_text="Take Rate (%)", row=2, col=2)
    
    st.plotly_chart(fig, use_container_width=True)

def show_city_recommendations(cities_data: Dict):
    """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≥–æ—Ä–æ–¥–∞–º"""
    st.subheader("üí° –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    
    # –ê–Ω–∞–ª–∏–∑ –ª—É—á—à–∏—Ö –∏ —Ö—É–¥—à–∏—Ö –≥–æ—Ä–æ–¥–æ–≤
    best_city = max(cities_data.keys(), key=lambda x: cities_data[x]['ltv_cac_ratio'])
    worst_city = min(cities_data.keys(), key=lambda x: cities_data[x]['ltv_cac_ratio'])
    
    highest_potential = max(cities_data.keys(), key=lambda x: cities_data[x]['market_potential'])
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### üü¢ –õ—É—á—à–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
        best_data = cities_data[best_city]
        st.success(f"""
        **{best_city}**: LTV/CAC = {best_data['ltv_cac_ratio']:.1f}:1
        
        ‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞: {best_data['frequency']:.1f} –ø–æ–µ–∑–¥–æ–∫/–º–µ—Å—è—Ü
        ‚Ä¢ AOV: {best_data['aov']} —Ä—É–±
        ‚Ä¢ –ó—Ä–µ–ª–æ—Å—Ç—å —Ä—ã–Ω–∫–∞: {best_data['maturity']}
        
        **–°—Ç—Ä–∞—Ç–µ–≥–∏—è**: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        """)
        
        st.markdown("#### üöÄ –ù–∞–∏–±–æ–ª—å—à–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª")
        potential_data = cities_data[highest_potential]
        st.info(f"""
        **{highest_potential}**: –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª {potential_data['market_potential']:,.0f}
        
        ‚Ä¢ –ù–∞—Å–µ–ª–µ–Ω–∏–µ: {potential_data['population']:,}
        ‚Ä¢ –¢–µ–∫—É—â–∏–π CAC: {potential_data['cac']:,} —Ä—É–±
        ‚Ä¢ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è: {potential_data['competition']}/10
        """)
    
    with col2:
        st.markdown("#### üî¥ –¢—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è")
        worst_data = cities_data[worst_city]
        st.warning(f"""
        **{worst_city}**: LTV/CAC = {worst_data['ltv_cac_ratio']:.1f}:1
        
        ‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞: {worst_data['frequency']:.1f} –ø–æ–µ–∑–¥–æ–∫/–º–µ—Å—è—Ü
        ‚Ä¢ CAC: {worst_data['cac']:,} —Ä—É–±
        ‚Ä¢ Churn: {worst_data['churn']}%
        
        **–°—Ç—Ä–∞—Ç–µ–≥–∏—è**: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è retention –∏ —á–∞—Å—Ç–æ—Ç—ã
        """)
        
        # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø–∞–º –≥–æ—Ä–æ–¥–æ–≤
        st.markdown("#### üìä –ü–æ —Ç–∏–ø–∞–º –≥–æ—Ä–æ–¥–æ–≤")
        
        for maturity in ["–ó—Ä–µ–ª—ã–π", "–†–∞—Å—Ç—É—â–∏–π", "–†–∞–∑–≤–∏–≤–∞—é—â–∏–π—Å—è"]:
            cities_in_stage = [city for city, data in cities_data.items() 
                             if data['maturity'] == maturity]
            if cities_in_stage:
                stage_recommendations = {
                    "–ó—Ä–µ–ª—ã–π": "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π, –ø—Ä–µ–º–∏—É–º –ø—Ä–æ–¥—É–∫—Ç—ã",
                    "–†–∞—Å—Ç—É—â–∏–π": "–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ, –∑–∞—Ö–≤–∞—Ç –¥–æ–ª–∏",
                    "–†–∞–∑–≤–∏–≤–∞—é—â–∏–π—Å—è": "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞, –Ω–∏–∑–∫–∏–µ —Ü–µ–Ω—ã"
                }
                st.write(f"**{maturity}** ({', '.join(cities_in_stage)}): {stage_recommendations[maturity]}")


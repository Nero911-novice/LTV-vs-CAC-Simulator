import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
from datetime import datetime, timedelta
import random
from typing import Dict, List, Tuple, Optional
def expansion_strategy():
    """–°—Ç—Ä–∞—Ç–µ–≥–∏—è —ç–∫—Å–ø–∞–Ω—Å–∏–∏"""
    st.header("üöÄ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π —ç–∫—Å–ø–∞–Ω—Å–∏–∏")
    
    st.markdown("""
    **Expansion –≤ ride-hailing**: –Ω–µ –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏, –∞ –∞–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –ª–æ–∫–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è.
    –£—Å–ø–µ—Ö –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞, timing'–∞ –≤—Ö–æ–¥–∞ –∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ value proposition.
    """)
    
    expansion_type = st.selectbox(
        "–¢–∏–ø —ç–∫—Å–ø–∞–Ω—Å–∏–∏:",
        [
            "üèôÔ∏è –ù–æ–≤—ã–π –≥–æ—Ä–æ–¥ –≤ —Ç–æ–º –∂–µ —Ä–µ–≥–∏–æ–Ω–µ",
            "üåç –ù–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω/—Å—Ç—Ä–∞–Ω–∞", 
            "üèòÔ∏è –ú–∞–ª—ã–µ –≥–æ—Ä–æ–¥–∞ (Tier 2/3)",
            "üöÅ Vertical expansion (–≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏, –¥–æ—Å—Ç–∞–≤–∫–∞)"
        ]
    )
    
    if expansion_type == "üèôÔ∏è –ù–æ–≤—ã–π –≥–æ—Ä–æ–¥ –≤ —Ç–æ–º –∂–µ —Ä–µ–≥–∏–æ–Ω–µ":
        regional_city_expansion()
    elif expansion_type == "üåç –ù–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω/—Å—Ç—Ä–∞–Ω–∞":
        international_expansion()
    elif expansion_type == "üèòÔ∏è –ú–∞–ª—ã–µ –≥–æ—Ä–æ–¥–∞ (Tier 2/3)":
        small_cities_expansion()
    elif expansion_type == "üöÅ Vertical expansion (–≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏, –¥–æ—Å—Ç–∞–≤–∫–∞)":
        vertical_expansion()

def regional_city_expansion():
    """–≠–∫—Å–ø–∞–Ω—Å–∏—è –≤ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ–¥"""
    st.subheader("üèôÔ∏è Expansion –≤ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ–¥")
    
    # –ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–µ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üéØ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≥–æ—Ä–æ–¥–∞**")
        
        target_city = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫")
        population = st.number_input("–ù–∞—Å–µ–ª–µ–Ω–∏–µ", 500000, 3000000, 1600000)
        avg_income = st.number_input("–°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ (—Ä—É–±)", 35000, 100000, 55000)
        existing_competitors = st.slider("–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –Ω–∞ —Ä—ã–Ω–∫–µ", 0, 5, 2)
        transport_quality = st.slider("–ö–∞—á–µ—Å—Ç–≤–æ –æ–±—â.—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (1-10)", 1, 10, 6)
        
    with col2:
        st.markdown("**üìä –¢–µ–∫—É—â–µ–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ**")
        
        current_cities = st.number_input("–ì–æ—Ä–æ–¥–æ–≤ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ", 1, 20, 3)
        operational_experience = st.slider("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã (–ª–µ—Ç)", 1, 10, 4)
        brand_recognition = st.slider("–£–∑–Ω–∞–≤–∞–µ–º–æ—Å—Ç—å –±—Ä–µ–Ω–¥–∞ –≤ —Ä–µ–≥–∏–æ–Ω–µ (%)", 10, 80, 35)
        
        # –†–µ—Å—É—Ä—Å—ã –¥–ª—è —ç–∫—Å–ø–∞–Ω—Å–∏–∏
        expansion_budget = st.number_input("–ë—é–¥–∂–µ—Ç –Ω–∞ –∑–∞–ø—É—Å–∫ (–º–ª–Ω —Ä—É–±)", 5, 200, 50)
        timeline = st.slider("–í—Ä–µ–º—è –¥–æ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏ (–º–µ—Å—è—Ü–µ–≤)", 6, 36, 18)
    
    # Market sizing
    addressable_market = population * 0.15  # 15% penetration potential –≤ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–º –≥–æ—Ä–æ–¥–µ
    income_adjustment = min(1.2, avg_income / 60000)  # Adjustment –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—å–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
    adjusted_market = addressable_market * income_adjustment
    
    # Competitive landscape
    market_share_potential = max(0.15, 0.5 / (existing_competitors + 1))  # –° —É—á–µ—Ç–æ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏
    target_users_year_1 = adjusted_market * market_share_potential
    
    # Financial projections
    estimated_aov = 200 + (avg_income - 35000) / 500  # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –¥–æ—Ö–æ–¥–æ–≤
    estimated_frequency = 2.5 + (avg_income - 35000) / 25000  # –ë–æ–ª—å—à–µ –¥–æ—Ö–æ–¥—ã = –±–æ–ª—å—à–µ –ø–æ–µ–∑–¥–æ–∫
    
    monthly_revenue_potential = target_users_year_1 * estimated_frequency * estimated_aov * 0.25 / 12
    
    # Costs
    launch_costs = {
        '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏ –ø—Ä–æ–º–æ': expansion_budget * 0.4,
        '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞': expansion_budget * 0.3,
        'Regulatory –∏ legal': expansion_budget * 0.1,
        'Local team': expansion_budget * 0.15,
        '–†–µ–∑–µ—Ä–≤': expansion_budget * 0.05
    }
    
    monthly_operational_costs = target_users_year_1 * 25 / 12  # 25 —Ä—É–± –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ—Å—è—Ü
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    st.subheader(f"üìä –ê–Ω–∞–ª–∏–∑ —ç–∫—Å–ø–∞–Ω—Å–∏–∏ –≤ {target_city}")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä—ã–Ω–∫–∞", f"{adjusted_market:,.0f}")
    
    with col2:
        st.metric("–¶–µ–ª–µ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–≥–æ–¥ 1)", f"{target_users_year_1:,.0f}")
    
    with col3:
        st.metric("–ú–µ—Å—è—á–Ω–∞—è –≤—ã—Ä—É—á–∫–∞ (–∑—Ä–µ–ª–æ—Å—Ç—å)", f"{monthly_revenue_potential:,.0f} —Ä—É–±")
    
    with col4:
        payback_months = expansion_budget * 1000000 / (monthly_revenue_potential - monthly_operational_costs)
        st.metric("–ü—Ä–æ–≥–Ω–æ–∑ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏", f"{payback_months:.1f} –º–µ—Å")
    
    # Breakdown costs
    st.subheader("üí∞ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π")
    
    costs_df = pd.DataFrame([
        {'–ö–∞—Ç–µ–≥–æ—Ä–∏—è': category, '–°—É–º–º–∞': f"{cost:,.0f} –º–ª–Ω —Ä—É–±", '–î–æ–ª—è': f"{cost/expansion_budget:.1%}"}
        for category, cost in launch_costs.items()
    ])
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.dataframe(costs_df, use_container_width=True)
    
    with col2:
        fig = go.Figure(data=[go.Pie(
            labels=list(launch_costs.keys()),
            values=list(launch_costs.values()),
            hole=0.3
        )])
        fig.update_layout(title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π", height=300)
        st.plotly_chart(fig, use_container_width=True)
    
    # Risk assessment
    st.subheader("‚ö†Ô∏è –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤")
    
    risk_factors = []
    risk_score = 0
    
    if existing_competitors >= 3:
        risk_factors.append("üî¥ –í—ã—Å–æ–∫–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è")
        risk_score += 3
    elif existing_competitors >= 1:
        risk_factors.append("üü° –£–º–µ—Ä–µ–Ω–Ω–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è")
        risk_score += 1
    
    if avg_income < 45000:
        risk_factors.append("üî¥ –ù–∏–∑–∫–∞—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—å–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å")
        risk_score += 3
    elif avg_income < 60000:
        risk_factors.append("üü° –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—å–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å")
        risk_score += 1
    
    if transport_quality > 7:
        risk_factors.append("üü° –°–∏–ª—å–Ω—ã–π –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
        risk_score += 2
    
    if brand_recognition < 25:
        risk_factors.append("üü° –ù–∏–∑–∫–∞—è —É–∑–Ω–∞–≤–∞–µ–º–æ—Å—Ç—å –±—Ä–µ–Ω–¥–∞")
        risk_score += 1
    
    if population < 800000:
        risk_factors.append("üü° –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ä—ã–Ω–∫–∞")
        risk_score += 1
    
    # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–∏—Å–∫–æ–≤
    if risk_score <= 3:
        st.success("üü¢ **–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫** - –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —ç–∫—Å–ø–∞–Ω—Å–∏–∏")
        recommendation = "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫ –∑–∞–ø—É—Å–∫—É"
    elif risk_score <= 6:
        st.warning("üü° **–£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–∏—Å–∫** - —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
        recommendation = "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é"
    else:
        st.error("üî¥ **–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫** - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å–º–æ—Ç—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
        recommendation = "–ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –±–µ–∑ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π"
    
    for risk in risk_factors:
        st.write(f"‚Ä¢ {risk}")
    
    st.info(f"**–û–±—â–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è**: {recommendation}")
    
    # Success factors
    st.subheader("üéØ –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã —É—Å–ø–µ—Ö–∞")
    
    success_factors = [
        "**Local partnerships**: –î–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ —Å –º–µ—Å—Ç–Ω—ã–º–∏ —Ç–∞–∫—Å–æ–ø–∞—Ä–∫–∞–º–∏",
        "**Regulatory compliance**: –†–∞–±–æ—Ç–∞ —Å –º–µ—Å—Ç–Ω—ã–º–∏ –≤–ª–∞—Å—Ç—è–º–∏ –∑–∞—Ä–∞–Ω–µ–µ",
        "**Localized marketing**: –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –º–µ—Å—Ç–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏",
        "**Supply-side focus**: –ë—ã—Å—Ç—Ä–æ–µ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π",
        "**Gradual rollout**: –ü–æ—ç—Ç–∞–ø–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø–æ —Ä–∞–π–æ–Ω–∞–º",
        "**Price positioning**: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –º–µ—Å—Ç–Ω—ã—Ö —Ü–µ–Ω"
    ]
    
    for factor in success_factors:
        st.write(f"‚Ä¢ {factor}")

def international_expansion():
    """–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è —ç–∫—Å–ø–∞–Ω—Å–∏—è"""
    st.subheader("üåç –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è —ç–∫—Å–ø–∞–Ω—Å–∏—è")

    st.warning("""
    **International expansion**: —Å–∞–º—ã–π —Å–ª–æ–∂–Ω—ã–π —Ç–∏–ø —ç–∫—Å–ø–∞–Ω—Å–∏–∏. –¢—Ä–µ–±—É–µ—Ç –ø–æ–Ω–∏–º–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ
    —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è, –∫—É–ª—å—Ç—É—Ä—ã, –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏ –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª–∏.
    """)
    
    # –í—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–π —Å—Ç—Ä–∞–Ω—ã/—Ä–µ–≥–∏–æ–Ω–∞
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üåç –¶–µ–ª–µ–≤–æ–π —Ä—ã–Ω–æ–∫**")
        
        target_country = st.selectbox("–¶–µ–ª–µ–≤–∞—è —Å—Ç—Ä–∞–Ω–∞:", 
                                    ["–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", "–ë–µ–ª–∞—Ä—É—Å—å", "–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω", 
                                     "–ì—Ä—É–∑–∏—è", "–ê—Ä–º–µ–Ω–∏—è", "–î—Ä—É–≥–∞—è"])
        
        market_maturity = st.selectbox("–ó—Ä–µ–ª–æ—Å—Ç—å —Ä—ã–Ω–∫–∞:", 
                                     ["Emerging (–Ω–µ—Ç ride-hailing)", 
                                      "Early stage (–µ—Å—Ç—å 1-2 –∏–≥—Ä–æ–∫–∞)",
                                      "Competitive (3+ –∏–≥—Ä–æ–∫–æ–≤)"])
        
        regulatory_risk = st.slider("–†–µ–≥—É–ª—è—Ç–æ—Ä–Ω—ã–π —Ä–∏—Å–∫ (1-10)", 1, 10, 5)
        cultural_distance = st.slider("–ö—É–ª—å—Ç—É—Ä–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è (1-10)", 1, 10, 3)
        
    with col2:
        st.markdown("**üí∞ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã**")
        
        market_size_usd = st.number_input("–†–∞–∑–º–µ—Ä —Ä—ã–Ω–∫–∞ (–º–ª–Ω USD)", 10, 1000, 150)
        investment_budget_usd = st.number_input("–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –±—é–¥–∂–µ—Ç (–º–ª–Ω USD)", 5, 200, 25)
        local_partnership = st.checkbox("–õ–æ–∫–∞–ª—å–Ω–æ–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ", True)
        
        # Mode –≤—Ö–æ–¥–∞
        entry_mode = st.selectbox("–†–µ–∂–∏–º –≤—Ö–æ–¥–∞:",
                                ["Organic expansion", "Acquisition", 
                                 "Joint venture", "Franchise"])
    
    # Risk scoring
    risk_factors = {}
    total_risk_score = 0
    
    # Regulatory risk
    if regulatory_risk >= 8:
        risk_factors["Regulatory"] = {"score": 3, "desc": "–í—ã—Å–æ–∫–∏–π —Ä–µ–≥—É–ª—è—Ç–æ—Ä–Ω—ã–π —Ä–∏—Å–∫"}
        total_risk_score += 3
    elif regulatory_risk >= 5:
        risk_factors["Regulatory"] = {"score": 2, "desc": "–£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–µ–≥—É–ª—è—Ç–æ—Ä–Ω—ã–π —Ä–∏—Å–∫"}
        total_risk_score += 2
    else:
        risk_factors["Regulatory"] = {"score": 1, "desc": "–ù–∏–∑–∫–∏–π —Ä–µ–≥—É–ª—è—Ç–æ—Ä–Ω—ã–π —Ä–∏—Å–∫"}
        total_risk_score += 1
    
    # Market competition
    competition_scores = {"Emerging": 1, "Early stage": 2, "Competitive": 4}
    comp_score = competition_scores[market_maturity.split(" ")[0]]
    risk_factors["Competition"] = {"score": comp_score, "desc": f"–ö–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è: {market_maturity}"}
    total_risk_score += comp_score
    
    # Cultural risk
    if cultural_distance >= 7:
        risk_factors["Cultural"] = {"score": 3, "desc": "–í—ã—Å–æ–∫–∏–µ –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –±–∞—Ä—å–µ—Ä—ã"}
        total_risk_score += 3
    elif cultural_distance >= 4:
        risk_factors["Cultural"] = {"score": 2, "desc": "–£–º–µ—Ä–µ–Ω–Ω—ã–µ –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –±–∞—Ä—å–µ—Ä—ã"}
        total_risk_score += 2
    else:
        risk_factors["Cultural"] = {"score": 1, "desc": "–ù–∏–∑–∫–∏–µ –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –±–∞—Ä—å–µ—Ä—ã"}
        total_risk_score += 1
    
    # Investment requirements –ø–æ entry mode
    investment_multipliers = {
        "Organic expansion": 1.0,
        "Acquisition": 2.5,
        "Joint venture": 1.3,
        "Franchise": 0.6
    }
    
    required_investment = investment_budget_usd * investment_multipliers[entry_mode]
    
    # Timeline to profitability
    base_timeline = 24  # –º–µ—Å—è—Ü–µ–≤
    timeline_adjustments = {
        "Emerging": -6,  # –ë—ã—Å—Ç—Ä–µ–µ –≤ –Ω–æ–≤—ã—Ö —Ä—ã–Ω–∫–∞—Ö
        "Early stage": 0,
        "Competitive": +12  # –î–æ–ª—å—à–µ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏
    }
    
    risk_timeline_penalty = (total_risk_score - 5) * 2  # –ö–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —Ä–∏—Å–∫–∞ = +2 –º–µ—Å—è—Ü–∞
    estimated_timeline = base_timeline + timeline_adjustments[market_maturity.split(" ")[0]] + risk_timeline_penalty
    
    if local_partnership:
        estimated_timeline -= 6  # –ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ —É—Å–∫–æ—Ä—è–µ—Ç
        required_investment *= 0.8  # –ò —Å–Ω–∏–∂–∞–µ—Ç —Ä–∞—Å—Ö–æ–¥—ã
    
    # Results
    st.subheader("üìä –ê–Ω–∞–ª–∏–∑ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–π —ç–∫—Å–ø–∞–Ω—Å–∏–∏")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        risk_color = "error" if total_risk_score >= 9 else "warning" if total_risk_score >= 6 else "success"
        st.markdown(f"""
        <div class="{risk_color}-card">
            <h4>–û–±—â–∏–π —Ä–∏—Å–∫</h4>
            <h2>{total_risk_score}/12</h2>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.metric("–¢—Ä–µ–±—É–µ—Ç—Å—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π", f"${required_investment:.1f}M")
    
    with col3:
        st.metric("Timeline –¥–æ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏", f"{estimated_timeline} –º–µ—Å")
    
    with col4:
        market_attractiveness = market_size_usd / required_investment
        st.metric("Market attractiveness", f"{market_attractiveness:.1f}x")
    
    # Risk breakdown
    st.subheader("‚ö†Ô∏è –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∏—Å–∫–æ–≤")
    
    risk_df = pd.DataFrame([
        {"–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∏—Å–∫–∞": category, "–ë–∞–ª–ª": data["score"], "–û–ø–∏—Å–∞–Ω–∏–µ": data["desc"]}
        for category, data in risk_factors.items()
    ])
    st.dataframe(risk_df, use_container_width=True)
    
    # Entry mode analysis
    st.subheader(f"üéØ –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ '{entry_mode}'")
    
    entry_analysis = {
        "Organic expansion": {
            "pros": ["–ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å", "–ù–∏–∑–∫–∏–µ –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ brand identity"],
            "cons": ["–ú–µ–¥–ª–µ–Ω–Ω–æ–µ –ø—Ä–æ–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–µ", "–í—ã—Å–æ–∫–∏–µ regulatory —Ä–∏—Å–∫–∏", "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ local expertise"],
            "best_for": "–ó—Ä–µ–ª—ã–µ —Ä—ã–Ω–∫–∏ —Å –Ω–∏–∑–∫–∏–º–∏ –±–∞—Ä—å–µ—Ä–∞–º–∏"
        },
        "Acquisition": {
            "pros": ["–ë—ã—Å—Ç—Ä—ã–π market entry", "–ì–æ—Ç–æ–≤–∞—è –∫–ª–∏–µ–Ω—Ç—Å–∫–∞—è –±–∞–∑–∞", "Local expertise"],
            "cons": ["–í—ã—Å–æ–∫–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "Integration challenges", "Cultural misalignment"],
            "best_for": "–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ —Ä—ã–Ω–∫–∏ —Å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ targets"
        },
        "Joint venture": {
            "pros": ["–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–≤", "Local partnerships", "Regulatory support"],
            "cons": ["–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å", "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã", "Sharing profits"],
            "best_for": "–í—ã—Å–æ–∫–æ—Ä–∏—Å–∫–æ–≤—ã–µ —Ä—ã–Ω–∫–∏ —Å strong local players"
        },
        "Franchise": {
            "pros": ["–ù–∏–∑–∫–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–ë—ã—Å—Ç—Ä–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ", "Local ownership"],
            "cons": ["–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞", "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç franchisees", "Brand risks"],
            "best_for": "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∞–ª—ã–µ —Ä—ã–Ω–∫–∏"
        }
    }
    
    analysis = entry_analysis[entry_mode]
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**‚úÖ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**")
        for pro in analysis["pros"]:
            st.write(f"‚Ä¢ {pro}")
        
        st.markdown("**‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:**")
        for con in analysis["cons"]:
            st.write(f"‚Ä¢ {con}")
    
    with col2:
        st.info(f"**–õ—É—á—à–µ –≤—Å–µ–≥–æ –¥–ª—è**: {analysis['best_for']}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
        if total_risk_score <= 4:
            st.success("üü¢ **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è**: –ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —ç–∫—Å–ø–∞–Ω—Å–∏–∏")
        elif total_risk_score <= 7:
            st.warning("üü° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è**: –≠–∫—Å–ø–∞–Ω—Å–∏—è –≤–æ–∑–º–æ–∂–Ω–∞ –ø—Ä–∏ —Ç—â–∞—Ç–µ–ª—å–Ω–æ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏")
        else:
            st.error("üî¥ **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è**: –í—ã—Å–æ–∫–æ—Ä–∏—Å–∫–æ–≤–∞—è —ç–∫—Å–ø–∞–Ω—Å–∏—è, —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã")

def small_cities_expansion():
    """–≠–∫—Å–ø–∞–Ω—Å–∏—è –≤ –º–∞–ª—ã–µ –≥–æ—Ä–æ–¥–∞"""
    st.subheader("üèòÔ∏è –≠–∫—Å–ø–∞–Ω—Å–∏—è –≤ –º–∞–ª—ã–µ –≥–æ—Ä–æ–¥–∞ (Tier 2/3)")
    
    st.info("""
    **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –º–∞–ª—ã—Ö –≥–æ—Ä–æ–¥–æ–≤**: –ú–µ–Ω—å—à–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏, –Ω–æ –∏ –º–µ–Ω—å—à–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å.
    –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è —Ü–µ–Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –∏ operational approach.
    """)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞–ª–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üèòÔ∏è –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≥–æ—Ä–æ–¥–∞**")
        
        small_city_population = st.slider("–ù–∞—Å–µ–ª–µ–Ω–∏–µ", 100000, 800000, 300000)
        economic_activity = st.selectbox("–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:",
                                       ["–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π —Ü–µ–Ω—Ç—Ä", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π —Ü–µ–Ω—Ç—Ä",
                                        "–¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π", "–°–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã–π"])
        
        distance_from_major = st.slider("–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –∫—Ä—É–ø–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ (–∫–º)", 50, 500, 150)
        avg_income_small = st.slider("–°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ (% –æ—Ç –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ)", 40, 80, 55)
        
    with col2:
        st.markdown("**üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è**")
        
        taxi_penetration = st.slider("–ü—Ä–æ–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–µ —Ç–∞–∫—Å–∏ (%)", 5, 40, 15)
        car_ownership = st.slider("–ê–≤—Ç–æ–º–æ–±–∏–ª–∏–∑–∞—Ü–∏—è (–∞–≤—Ç–æ/1000 –∂–∏—Ç–µ–ª–µ–π)", 200, 450, 320)
        public_transport = st.slider("–ö–∞—á–µ—Å—Ç–≤–æ –æ–±—â.—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (1-10)", 2, 8, 4)
        
        # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
        pricing_strategy = st.selectbox("–¶–µ–Ω–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è:",
                                      ["–ú–æ—Å–∫–æ–≤—Å–∫–∏–µ —Ü–µ–Ω—ã", "–°–∫–∏–¥–∫–∞ 20%", "–°–∫–∏–¥–∫–∞ 40%", "–õ–æ–∫–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã"])
    
    # Market analysis
    moscow_aov = 350
    moscow_income = 100000
    
    # Adjustment –¥–ª—è –º–∞–ª–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    income_ratio = avg_income_small / 100
    adjusted_aov = moscow_aov * income_ratio
    
    # Pricing strategy impact
    pricing_adjustments = {
        "–ú–æ—Å–∫–æ–≤—Å–∫–∏–µ —Ü–µ–Ω—ã": 1.0,
        "–°–∫–∏–¥–∫–∞ 20%": 0.8,
        "–°–∫–∏–¥–∫–∞ 40%": 0.6,
        "–õ–æ–∫–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã": income_ratio
    }
    
    final_aov = adjusted_aov * pricing_adjustments[pricing_strategy]
    
    # Market potential
    # –í –º–∞–ª—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö –º–µ–Ω—å—à–µ –ø—Ä–æ–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–µ ride-hailing
    max_penetration = 0.10  # –ú–∞–∫—Å–∏–º—É–º 10% vs 20% –≤ –±–æ–ª—å—à–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö
    addressable_market = small_city_population * max_penetration
    
    # Competition factor (–æ–±—ã—á–Ω–æ –º–µ–Ω—å—à–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏)
    competition_factor = 0.8 if small_city_population > 400000 else 0.5
    realistic_market = addressable_market * competition_factor
    
    # Operational considerations
    driver_density = car_ownership / 1000 * 0.05  # 5% –≥–æ—Ç–æ–≤—ã —Ä–∞–±–æ—Ç–∞—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è–º–∏
    required_drivers = realistic_market / 20  # 1 –≤–æ–¥–∏—Ç–µ–ª—å –Ω–∞ 20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    driver_gap = max(0, required_drivers - small_city_population * driver_density)
    
    # Financial model
    frequency_small_city = 2.0  # –ú–µ–Ω—å—à–µ —á–∞—Å—Ç–æ—Ç–∞ —á–µ–º –≤ –º–µ–≥–∞–ø–æ–ª–∏—Å–∞—Ö
    monthly_revenue_per_user = final_aov * frequency_small_city * 0.25
    
    # Costs –≤ –º–∞–ª—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö
    operational_cost_per_user = 15  # –ù–∏–∂–µ —á–µ–º –≤ –±–æ–ª—å—à–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö
    cac_small_city = 800  # –ú–µ–Ω—å—à–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è = –º–µ–Ω—å—à–µ CAC
    
    # Break-even analysis
    monthly_profit_per_user = monthly_revenue_per_user - operational_cost_per_user
    ltv_small_city = monthly_profit_per_user / 0.08  # 8% churn –≤ –º–∞–ª—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö
    ltv_cac_ratio = ltv_small_city / cac_small_city
    
    # Results
    st.subheader("üìä –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ –º–∞–ª–æ–≥–æ –≥–æ—Ä–æ–¥–∞")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä—ã–Ω–∫–∞", f"{realistic_market:,.0f}")
    
    with col2:
        st.metric("AOV –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π", f"{final_aov:.0f} —Ä—É–±")
    
    with col3:
        st.metric("LTV –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", f"{ltv_small_city:,.0f} —Ä—É–±")
    
    with col4:
        color = "success" if ltv_cac_ratio >= 3 else "warning" if ltv_cac_ratio >= 2 else "error"
        st.markdown(f"""
        <div class="{color}-card">
            <h4>LTV/CAC</h4>
            <h2>{ltv_cac_ratio:.1f}:1</h2>
        </div>
        """, unsafe_allow_html=True)
    
    # Supply-side challenges
    st.subheader("üöó –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–≤–æ–¥–∏—Ç–µ–ª–∏)")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.metric("–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π", f"{small_city_population * driver_density:,.0f}")
        st.metric("–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–æ–¥–∏—Ç–µ–ª–µ–π", f"{required_drivers:,.0f}")
        
        if driver_gap > 0:
            st.error(f"–î–µ—Ñ–∏—Ü–∏—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–π: {driver_gap:,.0f}")
        else:
            st.success("–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π")
    
    with col2:
        # –ì—Ä–∞—Ñ–∏–∫ supply/demand balance
        fig = go.Figure()
        
        categories = ['–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª–∏', '–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–æ–¥–∏—Ç–µ–ª–µ–π']
        values = [small_city_population * driver_density, required_drivers]
        colors = ['blue', 'red' if driver_gap > 0 else 'green']
        
        fig.add_trace(go.Bar(x=categories, y=values, marker_color=colors))
        fig.update_layout(title="–ë–∞–ª–∞–Ω—Å —Å–ø—Ä–æ—Å–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª–µ–π", height=300)
        st.plotly_chart(fig, use_container_width=True)
    
    # Strategies for small cities
    st.subheader("üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –º–∞–ª—ã—Ö –≥–æ—Ä–æ–¥–æ–≤")
    
    strategies = {
        "–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π —Ü–µ–Ω—Ç—Ä": [
            "–§–æ–∫—É—Å –Ω–∞ B2B —Å–µ–≥–º–µ–Ω—Ç (–∑–∞–≤–æ–¥—ã, –æ—Ñ–∏—Å—ã)",
            "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –Ω–∞ —Ä–∞–∑–≤–æ–∑ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
            "Timing –Ω–∞ —Å–º–µ–Ω—ã (3 —Å–º–µ–Ω—ã = 3 –ø–∏–∫–∞ —Å–ø—Ä–æ—Å–∞)"
        ],
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π —Ü–µ–Ω—Ç—Ä": [
            "Partnerships —Å –≥–æ—Å—É—á—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏",
            "–§–æ–∫—É—Å –Ω–∞ –¥–µ–ª–æ–≤—ã–µ –ø–æ–µ–∑–¥–∫–∏",
            "Premium –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —á–∏–Ω–æ–≤–Ω–∏–∫–æ–≤"
        ],
        "–¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π": [
            "–°–µ–∑–æ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç—ã",
            "Partnerships —Å –æ—Ç–µ–ª—è–º–∏ –∏ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º–∏",
            "Tour packages –∏ —ç–∫—Å–∫—É—Ä—Å–∏–æ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã"
        ],
        "–°–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã–π": [
            "–ê–≥—Ä–æ-–ª–æ–≥–∏—Å—Ç–∏–∫–∞ –∏ –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏",
            "–ú–µ–∂–≥–æ—Ä–æ–¥—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã –≤ —Ä–∞–π—Ü–µ–Ω—Ç—Ä—ã",
            "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ rural mobility"
        ]
    }
    
    for strategy in strategies[economic_activity]:
        st.write(f"‚Ä¢ {strategy}")
    
    # Risks and mitigation
    st.markdown("""
    ### ‚ö†Ô∏è –†–∏—Å–∫–∏ –º–∞–ª—ã—Ö –≥–æ—Ä–æ–¥–æ–≤:
    
    **üî¥ –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∏—Å–∫–∏:**
    ‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ä—ã–Ω–∫–∞
    ‚Ä¢ –ù–∏–∑–∫–∞—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—å–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
    ‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ–º –≤–æ–¥–∏—Ç–µ–ª–µ–π
    ‚Ä¢ Seasonal fluctuations
    ‚Ä¢ –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–µ–∫
    
    **‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –º–∏—Ç–∏–≥–∞—Ü–∏–∏:**
    ‚Ä¢ Multi-city approach (–∫–ª–∞—Å—Ç–µ—Ä –º–∞–ª—ã—Ö –≥–æ—Ä–æ–¥–æ–≤)
    ‚Ä¢ –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Ü–µ–Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏
    ‚Ä¢ –§–æ–∫—É—Å –Ω–∞ underserved segments
    ‚Ä¢ Partnerships —Å –º–µ—Å—Ç–Ω—ã–º–∏ –±–∏–∑–Ω–µ—Å–∞–º–∏
    ‚Ä¢ Flexible operational model
    """)

def vertical_expansion():
    """–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è —ç–∫—Å–ø–∞–Ω—Å–∏—è"""
    st.subheader("üöÅ Vertical Expansion: –ù–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã")
    
    st.success("""
    **Leverage existing assets**: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É, –≤–æ–¥–∏—Ç–µ–ª–µ–π –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∑–∞–ø—É—Å–∫–∞
    —Å–º–µ–∂–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤. –î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è revenue streams –∏ –ø–æ–≤—ã—à–µ–Ω–∏–µ lifetime value.
    """)
    
    # –í—ã–±–æ—Ä –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
    vertical_type = st.selectbox(
        "–¢–∏–ø –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π —ç–∫—Å–ø–∞–Ω—Å–∏–∏:",
        ["üçï –î–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã", "üì¶ –ö—É—Ä—å–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏", "üöö –ì—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏", 
         "üè™ Grocery delivery", "üíä –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —É—Å–ª—É–≥–∏", "üéì B2B –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è"]
    )
    
    if vertical_type == "üçï –î–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã":
        food_delivery_vertical()
    elif vertical_type == "üì¶ –ö—É—Ä—å–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏":
        courier_vertical()
    elif vertical_type == "üöö –ì—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏":
        cargo_vertical()
    elif vertical_type == "üè™ Grocery delivery":
        grocery_vertical()
    elif vertical_type == "üíä –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —É—Å–ª—É–≥–∏":
        medical_vertical()
    elif vertical_type == "üéì B2B –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è":
        b2b_vertical()

def food_delivery_vertical():
    """–î–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã"""
    st.markdown("### üçï –î–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üìä –¢–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤—ã ride-hailing**")
        
        current_drivers = st.number_input("–ê–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π", 5000, 100000, 25000)
        current_users = st.number_input("–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", 50000, 1000000, 200000)
        brand_recognition = st.slider("–£–∑–Ω–∞–≤–∞–µ–º–æ—Å—Ç—å –±—Ä–µ–Ω–¥–∞ (%)", 20, 90, 65)
        
    with col2:
        st.markdown("**üçï –ü–∞—Ä–∞–º–µ—Ç—Ä—ã food delivery**")
        
        restaurant_partnerships = st.number_input("–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤", 500, 10000, 2500)
        delivery_fee = st.slider("–ö–æ–º–∏—Å—Å–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ (—Ä—É–±)", 50, 200, 120)
        restaurant_commission = st.slider("–ö–æ–º–∏—Å—Å–∏—è —Å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ (%)", 15, 35, 25)
        avg_order_value = st.slider("–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –∑–∞–∫–∞–∑–∞ (—Ä—É–±)", 600, 2000, 1200)
    
    # Market analysis
    food_delivery_market_size = current_users * 0.4  # 40% ride-hailing –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–∫–∞–∑—ã–≤–∞—é—Ç –µ–¥—É
    monthly_orders_per_user = 3.5  # –ß–∞—Å—Ç–æ—Ç–∞ –∑–∞–∫–∞–∑–æ–≤
    
    # Revenue calculation
    delivery_revenue = food_delivery_market_size * monthly_orders_per_user * delivery_fee
    commission_revenue = food_delivery_market_size * monthly_orders_per_user * avg_order_value * (restaurant_commission / 100)
    total_monthly_revenue = delivery_revenue + commission_revenue
    
    # Costs
    driver_costs = food_delivery_market_size * monthly_orders_per_user * 80  # –û–ø–ª–∞—Ç–∞ –∫—É—Ä—å–µ—Ä–∞–º
    operational_costs = total_monthly_revenue * 0.15  # 15% –Ω–∞ operations
    
    monthly_profit = total_monthly_revenue - driver_costs - operational_costs
    
    # Investment requirements
    initial_investment = restaurant_partnerships * 15000  # 15k –Ω–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
    tech_development = 8000000  # –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ delivery –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    marketing_launch = 12000000  # Launch –∫–∞–º–ø–∞–Ω–∏—è
    
    total_investment = initial_investment + tech_development + marketing_launch
    payback_months = total_investment / monthly_profit if monthly_profit > 0 else float('inf')
    
    # Results
    st.subheader("üìà –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –º–æ–¥–µ–ª—å –¥–æ—Å—Ç–∞–≤–∫–∏ –µ–¥—ã")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", f"{food_delivery_market_size:,.0f}")
    
    with col2:
        st.metric("–ú–µ—Å—è—á–Ω–∞—è –≤—ã—Ä—É—á–∫–∞", f"{total_monthly_revenue:,.0f} —Ä—É–±")
    
    with col3:
        st.metric("–ú–µ—Å—è—á–Ω–∞—è –ø—Ä–∏–±—ã–ª—å", f"{monthly_profit:,.0f} —Ä—É–±")
    
    with col4:
        st.metric("–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å", f"{payback_months:.1f} –º–µ—Å" if payback_months != float('inf') else "–ù–µ –æ–∫—É–ø–∞–µ—Ç—Å—è")
    
    # Revenue breakdown
    fig = go.Figure(data=[go.Pie(
        labels=['–ö–æ–º–∏—Å—Å–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏', '–ö–æ–º–∏—Å—Å–∏—è —Å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤'],
        values=[delivery_revenue, commission_revenue],
        hole=0.3
    )])
    fig.update_layout(title="–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—ã—Ä—É—á–∫–∏ food delivery", height=300)
    st.plotly_chart(fig, use_container_width=True)

def courier_vertical():
    """–ö—É—Ä—å–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏"""
    st.markdown("### üì¶ –ö—É—Ä—å–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏")
    
    # Similar structure for other verticals...
    st.info("B2B –∏ C2C –∫—É—Ä—å–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏, –ª–æ–≥–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–∏–ª–∏")
    
    # Simplified implementation for brevity
    st.write("‚Ä¢ Leverage existing driver network")
    st.write("‚Ä¢ Focus on B2B segment (e-commerce, pharmacies)")
    st.write("‚Ä¢ Same-day delivery premium")
    st.write("‚Ä¢ Integration with marketplace platforms")

def cargo_vertical():
    """–ì—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏"""
    st.markdown("### üöö –ì—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏")
    st.info("–ú–∞–ª–æ—Ç–æ–Ω–Ω–∞–∂–Ω—ã–µ –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏ –¥–ª—è —á–∞—Å—Ç–Ω—ã—Ö –ª–∏—Ü –∏ –º–∞–ª–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞")

def grocery_vertical():
    """Grocery delivery"""
    st.markdown("### üè™ Grocery Delivery")
    st.info("–î–æ—Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–ø—Ä–æ—Å–∞")

def medical_vertical():
    """–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —É—Å–ª—É–≥–∏"""
    st.markdown("### üíä –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —É—Å–ª—É–≥–∏")
    st.info("–î–æ—Å—Ç–∞–≤–∫–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤, –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, —Ç–µ–ª–µ–º–µ–¥–∏—Ü–∏–Ω–∞")

def b2b_vertical():
    """B2B –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è"""
    st.markdown("### üéì B2B –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è")
    st.info("–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã, employee transportation, business travel")


import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
from datetime import datetime, timedelta
import random
from typing import Dict, List, Tuple, Optional
def promo_optimizer():
    """–û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤"""
    st.header("üí∞ –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤")
    
    st.markdown("""
    **–ü—Ä–æ–º–æ–∫–æ–¥—ã –≤ ride-hailing**: –º–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è, –Ω–æ —Å—ä–µ–¥–∞—é—â–∏–π –º–∞—Ä–∂—É. 
    –ö–ª—é—á - –Ω–∞–π—Ç–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –æ–±—ä–µ–º–æ–º –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –∏ unit economics.
    """)
    
    # –¢–∏–ø—ã –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    promo_type = st.selectbox(
        "–¢–∏–ø –ø—Ä–æ–º–æ–∫–∞–º–ø–∞–Ω–∏–∏:",
        [
            "üÜï –ü—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            "üîÑ –†–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö",
            "üíé Retention —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö",
            "üÜö –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è –∑–∞—â–∏—Ç–∞",
            "üéØ S–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ"
        ]
    )
    
    if promo_type == "üÜï –ü—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π":
        new_user_promo_optimization()
    elif promo_type == "üîÑ –†–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö":
        reactivation_promo_optimization()
    elif promo_type == "üíé Retention —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö":
        retention_promo_optimization()
    elif promo_type == "üÜö –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è –∑–∞—â–∏—Ç–∞":
        competitive_defense_promo()
    elif promo_type == "üéØ S–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ":
        segmented_promo_optimization()

def new_user_promo_optimization():
    """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    st.subheader("üÜï –ü—Ä–æ–º–æ–∫–æ–¥—ã –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–º–æ–∫–∞–º–ø–∞–Ω–∏–∏**")
        
        promo_discount = st.slider("–†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ (%)", 20, 80, 50)
        max_rides_promo = st.slider("–ú–∞–∫—Å–∏–º—É–º –ø–æ–µ–∑–¥–æ–∫ –ø–æ –ø—Ä–æ–º–æ", 1, 10, 3)
        promo_budget = st.number_input("–ë—é–¥–∂–µ—Ç –Ω–∞ –ø—Ä–æ–º–æ–∫–æ–¥—ã (—Ä—É–±)", 500000, 20000000, 3000000)
        
        # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        base_aov = 350
        base_conversion_rate = 5  # % –æ—Ç –ø–æ–∫–∞–∑–æ–≤ –ø—Ä–æ–º–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –≤ –ø–µ—Ä–≤—É—é –ø–æ–µ–∑–¥–∫—É
        
    with col2:
        st.markdown("**üìä –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã**")
        
        promo_elasticity = st.slider("–≠–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å –∫ —Ä–∞–∑–º–µ—Ä—É —Å–∫–∏–¥–∫–∏", 0.5, 2.0, 1.2)
        activation_rate = st.slider("–î–æ–ª—è –¥–µ–ª–∞—é—â–∏—Ö 2+ –ø–æ–µ–∑–¥–∫–∏ (%)", 30, 80, 55)
        organic_frequency = st.slider("–ß–∞—Å—Ç–æ—Ç–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–º–æ", 2.0, 6.0, 3.8)
        
    # –†–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–∞–º–ø–∞–Ω–∏–∏
    
    # –í–ª–∏—è–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Å–∫–∏–¥–∫–∏ –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏—é
    boosted_conversion = base_conversion_rate * (1 + (promo_discount / 100) * promo_elasticity)
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–µ–º –ø—Ä–∏–≤–ª–µ—á—å
    promo_aov = base_aov * (1 - promo_discount / 100)
    cost_per_promo_ride = base_aov - promo_aov
    
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –¥–∞–Ω–Ω–æ–º –±—é–¥–∂–µ—Ç–µ
    max_new_users = promo_budget / (cost_per_promo_ride * max_rides_promo)
    
    # –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
    actual_new_users = max_new_users * (boosted_conversion / 100) if boosted_conversion <= 100 else max_new_users
    
    # LTV –∞–Ω–∞–ª–∏–∑
    # –ü—Ä–æ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: –ø–µ—Ä–≤—ã–µ max_rides_promo –ø–æ —Å–∫–∏–¥–∫–µ, –ø–æ—Ç–æ–º organic
    promo_revenue = actual_new_users * max_rides_promo * promo_aov * 0.25  # 25% take rate
    
    # –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å
    activated_users = actual_new_users * (activation_rate / 100)
    organic_ltv_per_user = (base_aov * 0.25 * organic_frequency) / 0.12  # 12% –º–µ—Å—è—á–Ω—ã–π churn
    total_organic_revenue = activated_users * organic_ltv_per_user
    
    total_revenue = promo_revenue + total_organic_revenue
    effective_cac = promo_budget / actual_new_users if actual_new_users > 0 else float('inf')
    ltv_per_user = total_revenue / actual_new_users if actual_new_users > 0 else 0
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    st.subheader("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–º–æ–∫–∞–º–ø–∞–Ω–∏–∏")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–ü—Ä–∏–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", f"{actual_new_users:,.0f}")
    
    with col2:
        st.metric("–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π CAC", f"{effective_cac:,.0f} —Ä—É–±")
    
    with col3:
        st.metric("LTV –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", f"{ltv_per_user:,.0f} —Ä—É–±")
    
    with col4:
        ltv_cac_ratio = ltv_per_user / effective_cac if effective_cac != float('inf') else 0
        color = "success" if ltv_cac_ratio >= 3 else "warning" if ltv_cac_ratio >= 2 else "error"
        st.markdown(f"""
        <div class="{color}-card">
            <h4>LTV/CAC</h4>
            <h2>{ltv_cac_ratio:.1f}:1</h2>
        </div>
        """, unsafe_allow_html=True)
    
    # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–º–æ-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    create_promo_optimization_chart(promo_budget, base_aov, base_conversion_rate, 
                                   activation_rate, organic_frequency, promo_elasticity)
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    show_promo_recommendations(ltv_cac_ratio, promo_discount, activation_rate)

def create_promo_optimization_chart(budget: int, aov: float, base_conv: float,
                                   activation: float, frequency: float, elasticity: float):
    """–ì—Ä–∞—Ñ–∏–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    
    st.subheader("üéØ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–º–æ–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    
    # –°—Ü–µ–Ω–∞—Ä–∏–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏ —Å–∫–∏–¥–æ–∫
    discount_range = np.arange(20, 81, 10)
    scenarios = []
    
    for discount in discount_range:
        # –†–∞—Å—á–µ—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å–∫–∏–¥–∫–∏
        boosted_conv = base_conv * (1 + (discount / 100) * elasticity)
        promo_aov = aov * (1 - discount / 100)
        cost_per_ride = aov - promo_aov
        
        max_users = budget / (cost_per_ride * 3)  # 3 –ø—Ä–æ–º–æ-–ø–æ–µ–∑–¥–∫–∏
        actual_users = max_users * min(boosted_conv / 100, 1.0)
        
        # LTV —Ä–∞—Å—á–µ—Ç
        promo_revenue = actual_users * 3 * promo_aov * 0.25
        activated = actual_users * (activation / 100)
        organic_ltv = (aov * 0.25 * frequency) / 0.12
        total_revenue = promo_revenue + activated * organic_ltv
        
        cac = budget / actual_users if actual_users > 0 else 0
        ltv = total_revenue / actual_users if actual_users > 0 else 0
        roi = (total_revenue - budget) / budget * 100 if budget > 0 else 0
        
        scenarios.append({
            'discount': discount,
            'users': actual_users,
            'cac': cac,
            'ltv': ltv,
            'roi': roi,
            'ltv_cac_ratio': ltv / cac if cac > 0 else 0
        })
    
    df_scenarios = pd.DataFrame(scenarios)
    
    # –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    fig = make_subplots(
        rows=2, cols=2,
        subplot_titles=('–ü—Ä–∏–≤–ª–µ—á–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', 'LTV/CAC —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ',
                       'ROI –∫–∞–º–ø–∞–Ω–∏–∏', 'CAC vs LTV'),
        specs=[[{"type": "bar"}, {"type": "bar"}],
               [{"type": "bar"}, {"type": "scatter"}]]
    )
    
    # –ì—Ä–∞—Ñ–∏–∫ 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    fig.add_trace(
        go.Bar(x=df_scenarios['discount'], y=df_scenarios['users'],
               marker_color='blue', showlegend=False),
        row=1, col=1
    )
    
    # –ì—Ä–∞—Ñ–∏–∫ 2: LTV/CAC
    fig.add_trace(
        go.Bar(x=df_scenarios['discount'], y=df_scenarios['ltv_cac_ratio'],
               marker_color='green', showlegend=False),
        row=1, col=2
    )
    
    # –ì—Ä–∞—Ñ–∏–∫ 3: ROI
    colors = ['green' if roi > 0 else 'red' for roi in df_scenarios['roi']]
    fig.add_trace(
        go.Bar(x=df_scenarios['discount'], y=df_scenarios['roi'],
               marker_color=colors, showlegend=False),
        row=2, col=1
    )
    
    # –ì—Ä–∞—Ñ–∏–∫ 4: CAC vs LTV scatter
    fig.add_trace(
        go.Scatter(x=df_scenarios['cac'], y=df_scenarios['ltv'],
                  mode='markers+text', text=[f"{d}%" for d in df_scenarios['discount']],
                  textposition="top center", marker=dict(size=10, color='purple'),
                  showlegend=False),
        row=2, col=2
    )
    
    fig.update_layout(height=600)
    fig.update_xaxes(title_text="–†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ (%)", row=1, col=1)
    fig.update_xaxes(title_text="–†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ (%)", row=1, col=2)
    fig.update_xaxes(title_text="–†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ (%)", row=2, col=1)
    fig.update_xaxes(title_text="CAC (—Ä—É–±)", row=2, col=2)
    fig.update_yaxes(title_text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", row=1, col=1)
    fig.update_yaxes(title_text="LTV/CAC", row=1, col=2)
    fig.update_yaxes(title_text="ROI (%)", row=2, col=1)
    fig.update_yaxes(title_text="LTV (—Ä—É–±)", row=2, col=2)
    
    st.plotly_chart(fig, use_container_width=True)
    
    # –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞
    optimal_scenario = max(scenarios, key=lambda x: x['roi'])
    st.success(f"""
    üéØ **–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏**: {optimal_scenario['discount']}%
    
    ‚Ä¢ –ü—Ä–∏–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {optimal_scenario['users']:,.0f}
    ‚Ä¢ LTV/CAC: {optimal_scenario['ltv_cac_ratio']:.1f}:1
    ‚Ä¢ ROI –∫–∞–º–ø–∞–Ω–∏–∏: {optimal_scenario['roi']:.1f}%
    """)

def show_promo_recommendations(ltv_cac_ratio: float, discount: int, activation: int):
    """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º"""
    
    st.subheader("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–º–æ—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
    
    if ltv_cac_ratio >= 3:
        st.success("‚úÖ **–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–º–æ—Å—Ç—Ä–∞—Ç–µ–≥–∏—è** - –º–æ–∂–Ω–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å")
        recs = [
            "–£–≤–µ–ª–∏—á–∏—Ç—å –±—é–¥–∂–µ—Ç –Ω–∞ –ø—Ä–æ–º–æ–∫–æ–¥—ã –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤",
            "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–º–æ-–ø–æ–µ–∑–¥–æ–∫",
            "–†–∞—Å—à–∏—Ä–∏—Ç—å –∫–∞–Ω–∞–ª—ã –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è —Å —Ç–µ–∫—É—â–∏–º–∏ –ø—Ä–æ–º–æ"
        ]
    elif ltv_cac_ratio >= 2:
        st.warning("‚ö†Ô∏è **–ü—Ä–æ–º–æ—Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞ –≥—Ä–∞–Ω–∏** - –Ω—É–∂–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
        recs = [
            "–°–Ω–∏–∑–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ –∏ –∫–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å targeting'–æ–º",
            "–§–æ–∫—É—Å –Ω–∞ —É–ª—É—á—à–µ–Ω–∏–µ activation rate —á–µ—Ä–µ–∑ onboarding",
            "A/B —Ç–µ—Å—Ç —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–º–æ-–º–µ—Ö–∞–Ω–∏–∫ (cashback vs —Å–∫–∏–¥–∫–∞)"
        ]
    else:
        st.error("üö® **–ù–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã** - —Å—Ä–æ—á–Ω–æ –ø–µ—Ä–µ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å")
        recs = [
            "–ö–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ —Å–Ω–∏–∑–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏",
            "–ü–µ—Ä–µ–π—Ç–∏ —Å blanket –ø—Ä–æ–º–æ –Ω–∞ targeted",
            "–°—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ organic –∫–∞–Ω–∞–ª–∞—Ö"
        ]
    
    for rec in recs:
        st.write(f"‚Ä¢ {rec}")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã
    if discount > 60:
        st.warning("üí∏ **–°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–µ —Å–∫–∏–¥–∫–∏** –º–æ–≥—É—Ç –ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å –Ω–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é")
    
    if activation < 40:
        st.error("üìâ **–ù–∏–∑–∫–∏–π activation rate** - –ø—Ä–æ–±–ª–µ–º–∞ –≤ product experience, –Ω–µ –≤ –ø—Ä–æ–º–æ")
    
    st.markdown("""
    ### üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –≤ ride-hailing:
    
    1. **FOMO —ç—Ñ—Ñ–µ–∫—Ç**: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏—é
    2. **–Ø–∫–æ—Ä–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç**: –ü–æ–∫–∞–∑ –ø–æ–ª–Ω–æ–π —Ü–µ–Ω—ã —Å–æ —Å–∫–∏–¥–∫–æ–π vs –ø—Ä–æ—Å—Ç–æ –Ω–∏–∑–∫–æ–π —Ü–µ–Ω—ã
    3. **Frequency illusion**: –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –ø–æ–µ–∑–¥–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á–∞—â–µ –∑–∞–º–µ—á–∞–µ—Ç –±—Ä–µ–Ω–¥
    4. **Habit formation**: 3-4 –ø–æ–µ–∑–¥–∫–∏ –æ–±—ã—á–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏
    5. **Price anchoring**: –ü—Ä–æ–º–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Å—Ç–∞—Ç—å price-sensitive –≤ –¥–æ–ª–≥–æ—Å—Ä–æ–∫–µ
    """)

def reactivation_promo_optimization():
    """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏"""
    st.subheader("üîÑ –†–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    st.info("""
    **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏**: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ –∑–Ω–∞—é—Ç –ø—Ä–æ–¥—É–∫—Ç, –ø–æ—ç—Ç–æ–º—É –Ω—É–∂–Ω—ã –¥—Ä—É–≥–∏–µ —Å—Ç–∏–º—É–ª—ã.
    –ß–∞—Å—Ç–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ –Ω–µ–±–æ–ª—å—à–∏–µ —Å–∫–∏–¥–∫–∏ + –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è.
    """)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üë• –°–µ–≥–º–µ–Ω—Ç—ã –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö**")
        
        recent_inactive = st.number_input("–ù–µ–∞–∫—Ç–∏–≤–Ω—ã 1-3 –º–µ—Å—è—Ü–∞", 10000, 500000, 150000, 10000)
        long_inactive = st.number_input("–ù–µ–∞–∫—Ç–∏–≤–Ω—ã 3-6 –º–µ—Å—è—Ü–µ–≤", 5000, 300000, 80000, 5000)
        dormant = st.number_input("–ù–µ–∞–∫—Ç–∏–≤–Ω—ã >6 –º–µ—Å—è—Ü–µ–≤", 20000, 1000000, 200000, 10000)
        
    with col2:
        st.markdown("**üí∞ –ü—Ä–æ–º–æ–ø–∞—Ä–∞–º–µ—Ç—Ä—ã**")
        
        reactivation_budget = st.number_input("–ë—é–¥–∂–µ—Ç —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏", 500000, 10000000, 2000000)
        promo_size = st.slider("–†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ (%)", 15, 50, 25)
        personalization_lift = st.slider("–õ–∏—Ñ—Ç –æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ (%)", 10, 100, 40)
    
    # –ë–∞–∑–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
    base_reactivation_rates = {
        'recent': 12,  # % —Ä–µ–∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç—Å—è –±–µ–∑ –ø—Ä–æ–º–æ
        'long': 6,
        'dormant': 2
    }
    
    # –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
    promo_lift = promo_size / 20  # –ö–∞–∂–¥—ã–µ 20% —Å–∫–∏–¥–∫–∏ = 1x –ª–∏—Ñ—Ç
    total_lift = promo_lift * (1 + personalization_lift / 100)
    
    # –†–∞—Å—á–µ—Ç –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
    segments_analysis = {}
    total_reactivated = 0
    total_cost = 0
    
    for segment, count in [('recent', recent_inactive), ('long', long_inactive), ('dormant', dormant)]:
        base_rate = base_reactivation_rates[segment.split('_')[0] if '_' in segment else segment]
        boosted_rate = min(base_rate * (1 + total_lift), 50)  # –ú–∞–∫—Å–∏–º—É–º 50% —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è
        
        reactivated = count * (boosted_rate / 100)
        cost_per_reactivation = 350 * (promo_size / 100) * 2  # 2 –ø—Ä–æ–º–æ-–ø–æ–µ–∑–¥–∫–∏
        segment_cost = reactivated * cost_per_reactivation
        
        segments_analysis[segment] = {
            'count': count,
            'base_rate': base_rate,
            'boosted_rate': boosted_rate,
            'reactivated': reactivated,
            'cost': segment_cost,
            'cac': cost_per_reactivation
        }
        
        total_reactivated += reactivated
        total_cost += segment_cost
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        for segment, data in segments_analysis.items():
            segment_name = {"recent": "–ù–µ–¥–∞–≤–Ω–∏–µ", "long": "–î–∞–≤–Ω–∏–µ", "dormant": "–°–ø—è—â–∏–µ"}[segment]
            st.metric(f"{segment_name} ({data['boosted_rate']:.1f}%)", 
                     f"{data['reactivated']:,.0f}")
    
    with col2:
        st.metric("–û–±—â–∞—è —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è", f"{total_reactivated:,.0f}")
        st.metric("–û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã", f"{total_cost:,.0f} —Ä—É–±")
    
    with col3:
        avg_cac = total_cost / total_reactivated if total_reactivated > 0 else 0
        st.metric("–°—Ä–µ–¥–Ω–∏–π CAC —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏", f"{avg_cac:,.0f} —Ä—É–±")
        
        # LTV —Ä–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö (–æ–±—ã—á–Ω–æ –Ω–∏–∂–µ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
        reactivated_ltv = 4200  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        ltv_cac = reactivated_ltv / avg_cac if avg_cac > 0 else 0
        
        color = "success" if ltv_cac >= 3 else "warning" if ltv_cac >= 2 else "error"
        st.markdown(f"""
        <div class="{color}-card">
            <h4>LTV/CAC</h4>
            <h2>{ltv_cac:.1f}:1</h2>
        </div>
        """, unsafe_allow_html=True)
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
    fig = go.Figure()
    
    segments = list(segments_analysis.keys())
    segment_names = ["–ù–µ–¥–∞–≤–Ω–∏–µ", "–î–∞–≤–Ω–∏–µ", "–°–ø—è—â–∏–µ"]
    rates = [segments_analysis[s]['boosted_rate'] for s in segments]
    costs = [segments_analysis[s]['cac'] for s in segments]
    
    fig.add_trace(go.Bar(
        x=segment_names,
        y=rates,
        name='–†–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è (%)',
        marker_color='green',
        yaxis='y'
    ))
    
    fig.add_trace(go.Scatter(
        x=segment_names,
        y=costs,
        mode='lines+markers',
        name='CAC (—Ä—É–±)',
        line=dict(color='red', width=3),
        yaxis='y2'
    ))
    
    fig.update_layout(
        title="–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º",
        xaxis_title="–°–µ–≥–º–µ–Ω—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö",
        yaxis=dict(title="–†–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è (%)", side="left"),
        yaxis2=dict(title="CAC (—Ä—É–±)", side="right", overlaying="y"),
        height=400
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    st.markdown("""
    ### üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏:
    
    1. **–¢–∞—Ä–≥–µ—Ç–∏–Ω–≥ –Ω–µ–¥–∞–≤–Ω–∏—Ö**: –õ—É—á—à–µ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    2. **–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π**: "–ú—ã —Å–∫—É—á–∞–ª–∏ –ø–æ –≤–∞–º" + –ª—é–±–∏–º—ã–π –º–∞—Ä—à—Ä—É—Ç
    3. **Timing –≤–∞–∂–µ–Ω**: –ù–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —É—Ö–æ–¥–∞, –Ω–æ –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –ø–æ–∑–¥–Ω–æ
    4. **–ü—Ä–∏—á–∏–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑**: –ü–æ–Ω—è—Ç—å, –ø–æ—á–µ–º—É —É—à–ª–∏ (—Ü–µ–Ω–∞, –∫–∞—á–µ—Å—Ç–≤–æ, –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç)
    5. **–ì—Ä–∞–¥—É–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ**: –ù–∞—á–∞—Ç—å —Å –º–∞–ª–æ–≥–æ, —ç—Å–∫–∞–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    """)

def retention_promo_optimization():
    """–ü—Ä–æ–º–æ–∫–æ–¥—ã –¥–ª—è —É–¥–µ—Ä–∂–∞–Ω–∏—è"""
    st.subheader("üíé Retention –ø—Ä–æ–º–æ–∫–æ–¥—ã")
    
    st.success("""
    **–§–∏–ª–æ—Å–æ—Ñ–∏—è retention –ø—Ä–æ–º–æ**: –ª—É—á—à–µ –¥–∞—Ç—å –Ω–µ–±–æ–ª—å—à—É—é —Å–∫–∏–¥–∫—É –ª–æ—è–ª—å–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É, 
    —á–µ–º –ø–æ—Ç–µ—Ä—è—Ç—å –µ–≥–æ –∏ —Ç—Ä–∞—Ç–∏—Ç—å –≤ 5 —Ä–∞–∑ –±–æ–ª—å—à–µ –Ω–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ.
    """)
    
    # –†–∏—Å–∫-—Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**‚ö†Ô∏è –†–∏—Å–∫-—Å–µ–≥–º–µ–Ω—Ç—ã**")
        
        high_risk_users = st.number_input("–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –æ—Ç—Ç–æ–∫–∞", 5000, 100000, 25000)
        medium_risk_users = st.number_input("–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫", 10000, 200000, 50000)
        low_risk_users = st.number_input("–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫", 50000, 500000, 150000)
        
    with col2:
        st.markdown("**üéØ Retention —Å—Ç—Ä–∞—Ç–µ–≥–∏—è**")
        
        intervention_timing = st.selectbox("Timing –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞:", 
                                         ["Predictive (–¥–æ –æ—Ç—Ç–æ–∫–∞)", "Reactive (–ø–æ—Å–ª–µ —Å–Ω–∏–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)"])
        
        retention_budget = st.number_input("–ë—é–¥–∂–µ—Ç –Ω–∞ retention", 500000, 5000000, 1500000)
        
        # –¢–∏–ø—ã retention –ø—Ä–æ–º–æ
        promo_strategy = st.selectbox("–¢–∏–ø –ø—Ä–æ–º–æ:", 
                                    ["–°–∫–∏–¥–∫–∏ –Ω–∞ –ø–æ–µ–∑–¥–∫–∏", "Cashback –ø—Ä–æ–≥—Ä–∞–º–º–∞", "Loyalty points", "Premium features"])
    
    # –ú–æ–¥–µ–ª—å —Ä–∏—Å–∫–∞ –æ—Ç—Ç–æ–∫–∞ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ intervention
    risk_segments = {
        'high': {
            'count': high_risk_users,
            'churn_probability': 80,  # % –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Ö–æ–¥–∞ –±–µ–∑ intervention
            'intervention_effectiveness': 60,  # % —Å–Ω–∏–∂–µ–Ω–∏—è —Ä–∏—Å–∫–∞ –ø—Ä–∏ intervention
            'cost_per_intervention': 150
        },
        'medium': {
            'count': medium_risk_users,
            'churn_probability': 40,
            'intervention_effectiveness': 45,
            'cost_per_intervention': 80
        },
        'low': {
            'count': low_risk_users,
            'churn_probability': 15,
            'intervention_effectiveness': 30,
            'cost_per_intervention': 40
        }
    }
    
    # –†–∞—Å—á–µ—Ç ROI –æ—Ç retention –ø—Ä–æ–≥—Ä–∞–º–º—ã
    total_saved_users = 0
    total_program_cost = 0
    
    retention_results = {}
    
    for segment, data in risk_segments.items():
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ—Ç–µ—Ä—è–ª–∏ –±—ã –±–µ–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        would_churn = data['count'] * (data['churn_probability'] / 100)
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –±–ª–∞–≥–æ–¥–∞—Ä—è –ø—Ä–æ–≥—Ä–∞–º–º–µ
        saved_users = would_churn * (data['intervention_effectiveness'] / 100)
        
        # –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞
        segment_cost = data['count'] * data['cost_per_intervention']
        
        retention_results[segment] = {
            'would_churn': would_churn,
            'saved': saved_users,
            'cost': segment_cost,
            'roi_per_saved': segment_cost / saved_users if saved_users > 0 else 0
        }
        
        total_saved_users += saved_users
        total_program_cost += segment_cost
    
    # LTV –∞–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    avg_ltv_remaining = 3500  # LTV –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Å—Ç–∞–ª—Å—è –±–ª–∞–≥–æ–¥–∞—Ä—è retention –ø—Ä–æ–≥—Ä–∞–º–º–µ
    total_ltv_saved = total_saved_users * avg_ltv_remaining
    program_roi = (total_ltv_saved - total_program_cost) / total_program_cost * 100
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    st.subheader("üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å retention –ø—Ä–æ–≥—Ä–∞–º–º—ã")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", f"{total_saved_users:,.0f}")
    
    with col2:
        st.metric("–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º—É", f"{total_program_cost:,.0f} —Ä—É–±")
    
    with col3:
        st.metric("LTV —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö", f"{total_ltv_saved:,.0f} —Ä—É–±")
    
    with col4:
        color = "success" if program_roi > 200 else "warning" if program_roi > 100 else "error"
        st.markdown(f"""
        <div class="{color}-card">
            <h4>ROI –ø—Ä–æ–≥—Ä–∞–º–º—ã</h4>
            <h2>{program_roi:.0f}%</h2>
        </div>
        """, unsafe_allow_html=True)
    
    # Breakdown –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
    st.subheader("üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º")
    
    segments_df = pd.DataFrame([
        {
            '–°–µ–≥–º–µ–Ω—Ç': {'high': '–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫', 'medium': '–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫', 'low': '–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫'}[seg],
            '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π': data['count'],
            '–£—à–ª–∏ –±—ã': f"{retention_results[seg]['would_churn']:.0f}",
            '–°–æ—Ö—Ä–∞–Ω–∏–ª–∏': f"{retention_results[seg]['saved']:.0f}",
            '–ó–∞—Ç—Ä–∞—Ç—ã': f"{retention_results[seg]['cost']:,.0f} —Ä—É–±",
            'Cost per save': f"{retention_results[seg]['roi_per_saved']:.0f} —Ä—É–±"
        }
        for seg, data in risk_segments.items()
    ])
    
    st.dataframe(segments_df, use_container_width=True)
    
    # Recommendations
    st.markdown("""
    ### üí° Retention —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ —Ç–∏–ø–∞–º –ø—Ä–æ–º–æ:
    
    **üé´ –°–∫–∏–¥–∫–∏ –Ω–∞ –ø–æ–µ–∑–¥–∫–∏**:
    ‚Ä¢ –ü–ª—é—Å—ã: –ü—Ä–æ—Å—Ç–æ—Ç–∞, –ø—Ä—è–º–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ cost of service
    ‚Ä¢ –ú–∏–Ω—É—Å—ã: –í—Ä–µ–º–µ–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç, –º–æ–∂–µ—Ç —Å–Ω–∏–∑–∏—Ç—å perceived value
    ‚Ä¢ –õ—É—á—à–µ –¥–ª—è: High-risk —Å–µ–≥–º–µ–Ω—Ç–∞ –∫–∞–∫ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –º–µ—Ä–∞
    
    **üí∞ Cashback –ø—Ä–æ–≥—Ä–∞–º–º–∞**:
    ‚Ä¢ –ü–ª—é—Å—ã: –°–æ–∑–¥–∞–µ—Ç –ª–æ—è–ª—å–Ω–æ—Å—Ç—å, —Å—Ç–∏–º—É–ª–∏—Ä—É–µ—Ç —á–∞—Å—Ç–æ—Ç—É
    ‚Ä¢ –ú–∏–Ω—É—Å—ã: –°–ª–æ–∂–Ω–æ—Å—Ç—å –≤ —É—á–µ—Ç–µ, –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å gaming behavior
    ‚Ä¢ –õ—É—á—à–µ –¥–ª—è: Medium-risk –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    **‚≠ê Loyalty points**:
    ‚Ä¢ –ü–ª—é—Å—ã: –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å partner rewards
    ‚Ä¢ –ú–∏–Ω—É—Å—ã: –°–ª–æ–∂–Ω–æ—Å—Ç—å –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏, operational overhead
    ‚Ä¢ –õ—É—á—à–µ –¥–ª—è: Low-risk –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∏
    
    **üëë Premium features**:
    ‚Ä¢ –ü–ª—é—Å—ã: –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç perceived value, –º–æ–∂–µ—Ç —É–≤–µ–ª–∏—á–∏—Ç—å frequency
    ‚Ä¢ –ú–∏–Ω—É—Å—ã: –¢—Ä–µ–±—É–µ—Ç product development, –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å entitlement
    ‚Ä¢ –õ—É—á—à–µ –¥–ª—è: High-value –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Å–µ—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤
    """)

def competitive_defense_promo():
    """–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è –∑–∞—â–∏—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–º–æ–∫–æ–¥—ã"""
    st.subheader("üÜö –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è –∑–∞—â–∏—Ç–∞")
    
    st.warning("""
    **–°–∏—Ç—É–∞—Ü–∏—è**: –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é –∫–∞–º–ø–∞–Ω–∏—é –ø–æ –ø–µ—Ä–µ–º–∞–Ω–∏–≤–∞–Ω–∏—é –≤–∞—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    –ù—É–∂–Ω–∞ –±—ã—Å—Ç—Ä–∞—è defensive —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –∑–∞—â–∏—Ç—ã user base.
    """)
    
    # Threat assessment
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**‚ö†Ô∏è –û—Ü–µ–Ω–∫–∞ —É–≥—Ä–æ–∑—ã**")
        
        competitor_discount = st.slider("–°–∫–∏–¥–∫–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ (%)", 30, 80, 50)
        threat_duration = st.slider("–û–∂–∏–¥–∞–µ–º–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—Ç–∞–∫–∏ (–Ω–µ–¥–µ–ª–∏)", 2, 12, 6)
        at_risk_users = st.number_input("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–¥ —É–≥—Ä–æ–∑–æ–π", 10000, 200000, 75000)
        
        # Historical churn data
        organic_churn = st.slider("–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π –º–µ—Å—è—á–Ω—ã–π churn (%)", 8, 20, 12)
        
    with col2:
        st.markdown("**üõ°Ô∏è Defensive —Å—Ç—Ä–∞—Ç–µ–≥–∏—è**")
        
        defense_strategy = st.selectbox("–¢–∏–ø –∑–∞—â–∏—Ç—ã:", 
                                      ["Matching (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è —Å–∫–∏–¥–∫–∞)", "Premium positioning", 
                                       "Loyalty surge", "Targeted retention"])
        
        defense_budget = st.number_input("–ë—é–¥–∂–µ—Ç –Ω–∞ –∑–∞—â–∏—Ç—É", 1000000, 20000000, 5000000)
        
        # Response timing
        response_speed = st.selectbox("–°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–∏:", 
                                    ["Immediate (–≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è)", "Fast (–≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏)", "Measured (2-3 –Ω–µ–¥–µ–ª–∏)"])
    
    # Modeling competitive threat
    base_weekly_churn = organic_churn / 4  # –ë–∞–∑–æ–≤—ã–π –Ω–µ–¥–µ–ª—å–Ω—ã–π churn
    
    # Threat multiplier based on competitor offer
    threat_multiplier = 1 + (competitor_discount / 50)  # –ö–∞–∂–¥—ã–µ 50% —Å–∫–∏–¥–∫–∏ = 2x threat
    
    # Time decay of competitive effect
    weeks = list(range(1, threat_duration + 1))
    competitive_churn_rates = []
    
    for week in weeks:
        # –≠—Ñ—Ñ–µ–∫—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ –∑–∞—Ç—É—Ö–∞–µ—Ç —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
        decay_factor = np.exp(-week / 4)  # Exponential decay
        weekly_threat = base_weekly_churn * threat_multiplier * decay_factor
        competitive_churn_rates.append(weekly_threat)
    
    # Users lost without defense
    users_lost_without_defense = []
    remaining_users = at_risk_users
    
    for weekly_churn in competitive_churn_rates:
        lost_this_week = remaining_users * (weekly_churn / 100)
        users_lost_without_defense.append(lost_this_week)
        remaining_users -= lost_this_week
    
    total_lost_without_defense = sum(users_lost_without_defense)
    
    # Defense effectiveness
    defense_effectiveness = {
        "Matching (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è —Å–∫–∏–¥–∫–∞)": 70,  # % —Å–Ω–∏–∂–µ–Ω–∏—è –ø–æ—Ç–µ—Ä—å
        "Premium positioning": 40,
        "Loyalty surge": 55,
        "Targeted retention": 65
    }
    
    response_delay_penalty = {
        "Immediate (–≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è)": 1.0,
        "Fast (–≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏)": 0.8,
        "Measured (2-3 –Ω–µ–¥–µ–ª–∏)": 0.6
    }
    
    effectiveness = defense_effectiveness[defense_strategy] * response_delay_penalty[response_speed]
    users_saved = total_lost_without_defense * (effectiveness / 100)
    
    # Cost analysis
    if defense_strategy == "Matching (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è —Å–∫–∏–¥–∫–∞)":
        cost_per_user = competitor_discount / 100 * 350 * 3  # 3 –ø–æ–µ–∑–¥–∫–∏ —Å –∑–∞—â–∏—Ç–Ω–æ–π —Å–∫–∏–¥–∫–æ–π
    elif defense_strategy == "Premium positioning":
        cost_per_user = 200  # –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –ø—Ä–µ–º–∏—É–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    elif defense_strategy == "Loyalty surge":
        cost_per_user = 120  # Loyalty –±–æ–Ω—É—Å—ã
    else:  # Targeted retention
        cost_per_user = 150  # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ retention offers
    
    total_defense_cost = at_risk_users * cost_per_user
    
    # LTV impact
    avg_ltv_at_risk = 4500  # LTV –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–¥ —É–≥—Ä–æ–∑–æ–π
    ltv_saved = users_saved * avg_ltv_at_risk
    defense_roi = (ltv_saved - total_defense_cost) / total_defense_cost * 100
    
    # Results
    st.subheader("‚öîÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞—â–∏—Ç–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–ü–æ—Ç–µ—Ä–∏ –±–µ–∑ –∑–∞—â–∏—Ç—ã", f"{total_lost_without_defense:,.0f}")
    
    with col2:
        st.metric("–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", f"{users_saved:,.0f}")
    
    with col3:
        st.metric("–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –∑–∞—â–∏—Ç—É", f"{total_defense_cost:,.0f} —Ä—É–±")
    
    with col4:
        color = "success" if defense_roi > 100 else "warning" if defense_roi > 0 else "error"
        st.markdown(f"""
        <div class="{color}-card">
            <h4>ROI –∑–∞—â–∏—Ç—ã</h4>
            <h2>{defense_roi:.0f}%</h2>
        </div>
        """, unsafe_allow_html=True)
    
    # Timeline visualization
    fig = go.Figure()
    
    fig.add_trace(go.Scatter(
        x=weeks,
        y=users_lost_without_defense,
        mode='lines+markers',
        name='–ü–æ—Ç–µ—Ä–∏ –±–µ–∑ –∑–∞—â–∏—Ç—ã',
        line=dict(color='red', width=3)
    ))
    
    users_lost_with_defense = [loss * (1 - effectiveness/100) for loss in users_lost_without_defense]
    fig.add_trace(go.Scatter(
        x=weeks,
        y=users_lost_with_defense,
        mode='lines+markers',
        name='–ü–æ—Ç–µ—Ä–∏ —Å –∑–∞—â–∏—Ç–æ–π',
        line=dict(color='green', width=3)
    ))
    
    fig.update_layout(
        title="–í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–π —É–≥—Ä–æ–∑—ã",
        xaxis_title="–ù–µ–¥–µ–ª—è",
        yaxis_title="–ü–æ—Ç–µ—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        height=400
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # Strategic recommendations
    if defense_roi > 200:
        st.success("üõ°Ô∏è **Defensive –∫–∞–º–ø–∞–Ω–∏—è –≤—ã—Å–æ–∫–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞** - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏")
    elif defense_roi > 50:
        st.info("üìä **–£–º–µ—Ä–µ–Ω–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å** - —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
    else:
        st.warning("‚ö†Ô∏è **–ù–∏–∑–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å** - –≤–æ–∑–º–æ–∂–Ω–æ, –ª—É—á—à–µ –ø—Ä–∏–Ω—è—Ç—å –ø–æ—Ç–µ—Ä–∏ –∏ —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–∏")
    
    st.markdown(f"""
    ### üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è "{defense_strategy}":
    """)
    
    strategy_recommendations = {
        "Matching (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è —Å–∫–∏–¥–∫–∞)": [
            "–ë—ã—Å—Ç—Ä–∞—è —Ä–µ–∞–∫—Ü–∏—è –∫—Ä–∏—Ç–∏—á–Ω–∞ - –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–æ–º–µ–¥–ª–µ–Ω–∏—è = +10% –ø–æ—Ç–µ—Ä—å",
            "–ö–æ–º–º—É–Ω–∏—Ü–∏—Ä–æ–≤–∞—Ç—å '–º—ã –≤—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ª—É—á—à–∏–µ —Ü–µ–Ω—ã'",
            "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å exit strategy –∫–æ–≥–¥–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç –∫–∞–º–ø–∞–Ω–∏—é",
            "–ò–∑–±–µ–≥–∞—Ç—å race to the bottom - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã"
        ],
        "Premium positioning": [
            "–ê–∫—Ü–µ–Ω—Ç –Ω–∞ quality, safety, reliability vs —Ü–µ–Ω—É",
            "Testimonials –∏ case studies –¥–æ–≤–æ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤",
            "Premium features –∫–∞–∫ differentiator",
            "–ú–µ–Ω—å—à–µ direct mentions –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞"
        ],
        "Loyalty surge": [
            "Reward existing loyalty –≤–º–µ—Å—Ç–æ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö",
            "Exclusive perks –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            "Community building –∏ insider access",
            "Gradual rollout –¥–ª—è maximum impact"
        ],
        "Targeted retention": [
            "–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ offers –Ω–∞ –æ—Å–Ω–æ–≤–µ usage patterns",
            "Proactive outreach –∫ high-value –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
            "Address specific pain points –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞",
            "Measure effectiveness –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º"
        ]
    }
    
    for rec in strategy_recommendations[defense_strategy]:
        st.write(f"‚Ä¢ {rec}")

def segmented_promo_optimization():
    """–°–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã"""
    st.subheader("üéØ –°–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–∞–º–ø–∞–Ω–∏–∏")
    
    st.success("""
    **–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–º–æ**: –í–º–µ—Å—Ç–æ one-size-fits-all –ø–æ–¥—Ö–æ–¥–∞, —Å–æ–∑–¥–∞–µ–º targeted offers 
    –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö –ø–æ–≤–µ–¥–µ–Ω–∏—è –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫.
    """)
    
    # Segmentation criteria
    segmentation_approach = st.selectbox(
        "–ü—Ä–∏–Ω—Ü–∏–ø —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏:",
        ["Behavioral (—á–∞—Å—Ç–æ—Ç–∞ –ø–æ–µ–∑–¥–æ–∫)", "Geographic (—Ä–∞–π–æ–Ω—ã –≥–æ—Ä–æ–¥–∞)", 
         "Temporal (–≤—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)", "Value-based (–ø–æ—Ç—Ä–∞—á–µ–Ω–æ –¥–µ–Ω–µ–≥)"]
    )
    
    if segmentation_approach == "Behavioral (—á–∞—Å—Ç–æ—Ç–∞ –ø–æ–µ–∑–¥–æ–∫)":
        behavioral_segmentation()
    elif segmentation_approach == "Geographic (—Ä–∞–π–æ–Ω—ã –≥–æ—Ä–æ–¥–∞)":
        geographic_segmentation()
    elif segmentation_approach == "Temporal (–≤—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)":
        temporal_segmentation()
    elif segmentation_approach == "Value-based (–ø–æ—Ç—Ä–∞—á–µ–Ω–æ –¥–µ–Ω–µ–≥)":
        value_based_segmentation()

def behavioral_segmentation():
    """–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –ø–æ–≤–µ–¥–µ–Ω–∏—é"""
    st.markdown("### üìä –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è")
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üë• –°–µ–≥–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**")
        
        power_users = st.number_input("Power users (8+ –ø–æ–µ–∑–¥–æ–∫/–º–µ—Å)", 5000, 100000, 25000)
        regular_users = st.number_input("Regular users (3-7 –ø–æ–µ–∑–¥–æ–∫/–º–µ—Å)", 20000, 300000, 85000)
        occasional_users = st.number_input("Occasional users (1-2 –ø–æ–µ–∑–¥–∫–∏/–º–µ—Å)", 50000, 500000, 150000)
        
    with col2:
        st.markdown("**üéØ –ü—Ä–æ–º–æ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º**")
        
        power_promo = st.slider("Power users —Å–∫–∏–¥–∫–∞ (%)", 0, 30, 10)
        regular_promo = st.slider("Regular users —Å–∫–∏–¥–∫–∞ (%)", 15, 50, 25)
        occasional_promo = st.slider("Occasional users —Å–∫–∏–¥–∫–∞ (%)", 30, 70, 45)
    
    # Behavioral insights –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
    segments_data = {
        'Power Users': {
            'count': power_users,
            'avg_frequency': 12,
            'avg_aov': 380,
            'churn_risk': 'Low',
            'promo_sensitivity': 'Low',
            'promo_discount': power_promo,
            'strategy': 'Loyalty & Premium'
        },
        'Regular Users': {
            'count': regular_users,
            'avg_frequency': 5,
            'avg_aov': 350,
            'churn_risk': 'Medium',
            'promo_sensitivity': 'Medium',
            'promo_discount': regular_promo,
            'strategy': 'Frequency increase'
        },
        'Occasional Users': {
            'count': occasional_users,
            'avg_frequency': 1.5,
            'avg_aov': 320,
            'churn_risk': 'High',
            'promo_sensitivity': 'High',
            'promo_discount': occasional_promo,
            'strategy': 'Activation & Habit'
        }
    }
    
    # –†–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
    total_campaign_cost = 0
    total_incremental_revenue = 0
    
    results_data = []
    
    for segment, data in segments_data.items():
        # Baseline revenue –±–µ–∑ –ø—Ä–æ–º–æ
        baseline_revenue = data['count'] * data['avg_frequency'] * data['avg_aov'] * 0.25
        
        # –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–æ–º–æ –Ω–∞ frequency (–æ–±—Ä–∞—Ç–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç baseline frequency)
        frequency_lift = (data['promo_discount'] / 100) * (10 / data['avg_frequency'])  # Higher discount + lower baseline = higher lift
        new_frequency = data['avg_frequency'] * (1 + frequency_lift)
        
        # –ü—Ä–æ–º–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å
        promo_cost_per_ride = data['avg_aov'] * (data['promo_discount'] / 100)
        total_promo_rides = data['count'] * new_frequency
        segment_promo_cost = total_promo_rides * promo_cost_per_ride
        
        # –ù–æ–≤–∞—è –≤—ã—Ä—É—á–∫–∞
        new_revenue = data['count'] * new_frequency * data['avg_aov'] * 0.25
        incremental_revenue = new_revenue - baseline_revenue
        
        # ROI —Å–µ–≥–º–µ–Ω—Ç–∞
        segment_roi = (incremental_revenue - segment_promo_cost) / segment_promo_cost * 100 if segment_promo_cost > 0 else 0
        
        results_data.append({
            '–°–µ–≥–º–µ–Ω—Ç': segment,
            '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π': f"{data['count']:,}",
            'Baseline —á–∞—Å—Ç–æ—Ç–∞': f"{data['avg_frequency']:.1f}",
            '–ù–æ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞': f"{new_frequency:.1f}",
            '–°–∫–∏–¥–∫–∞': f"{data['promo_discount']}%",
            '–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ø—Ä–æ–º–æ': f"{segment_promo_cost:,.0f}",
            '–î–æ–ø. –≤—ã—Ä—É—á–∫–∞': f"{incremental_revenue:,.0f}",
            'ROI': f"{segment_roi:.0f}%"
        })
        
        total_campaign_cost += segment_promo_cost
        total_incremental_revenue += incremental_revenue
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    st.subheader("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏")
    
    results_df = pd.DataFrame(results_data)
    st.dataframe(results_df, use_container_width=True)
    
    # –û–±—â–∏–π ROI
    overall_roi = (total_incremental_revenue - total_campaign_cost) / total_campaign_cost * 100
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("–û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã", f"{total_campaign_cost:,.0f} —Ä—É–±")
    
    with col2:
        st.metric("–î–æ–ø. –≤—ã—Ä—É—á–∫–∞", f"{total_incremental_revenue:,.0f} —Ä—É–±")
    
    with col3:
        color = "success" if overall_roi > 100 else "warning" if overall_roi > 0 else "error"
        st.markdown(f"""
        <div class="{color}-card">
            <h4>–û–±—â–∏–π ROI</h4>
            <h2>{overall_roi:.0f}%</h2>
        </div>
        """, unsafe_allow_html=True)
    
    # Insights –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
    st.markdown("""
    ### üí° –ò–Ω—Å–∞–π—Ç—ã –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏:
    
    **üöÄ Power Users**:
    ‚Ä¢ –ù–∏–∑–∫–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ —Å–∫–∏–¥–∫–∞–º - —Ñ–æ–∫—É—Å –Ω–∞ exclusive perks
    ‚Ä¢ –í—ã—Å–æ–∫–∞—è frequency —É–∂–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ - —Å–ª–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å
    ‚Ä¢ –õ—É—á—à–∏–π —Å–µ–≥–º–µ–Ω—Ç –¥–ª—è premium services –∏ loyalty –ø—Ä–æ–≥—Ä–∞–º–º
    
    **‚öñÔ∏è Regular Users**:
    ‚Ä¢ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å volume vs sensitivity
    ‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è growth –≤ power users –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º nudging
    ‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ —Å–∫–∏–¥–∫–∏ –º–æ–≥—É—Ç —Å—Ç–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å frequency
    
    **üìà Occasional Users**:
    ‚Ä¢ –í—ã—Å–æ–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞, –Ω–æ –Ω—É–∂–Ω—ã –±–æ–ª—å—à–∏–µ —Å—Ç–∏–º—É–ª—ã
    ‚Ä¢ –†–∏—Å–∫ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ discount-hunting behavior
    ‚Ä¢ –§–æ–∫—É—Å –Ω–∞ habit formation, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –Ω–∞ deals
    """)

def geographic_segmentation():
    """–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è"""
    st.markdown("### üó∫Ô∏è –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è")
    
    st.info("""
    **–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞**: –†–∞–∑–Ω—ã–µ —Ä–∞–π–æ–Ω—ã –≥–æ—Ä–æ–¥–∞ –∏–º–µ—é—Ç —Ä–∞–∑–Ω—É—é –ø–ª–æ—Ç–Ω–æ—Å—Ç—å —Å–ø—Ä–æ—Å–∞,
    –ø–æ–∫—É–ø–∞—Ç–µ–ª—å–Ω—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—é —Å –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º.
    """)
    
    # –ó–æ–Ω—ã –≥–æ—Ä–æ–¥–∞
    zones_data = {
        '–¶–µ–Ω—Ç—Ä': {
            'population': 500000,
            'avg_income': 80000,
            'competition': 9,
            'public_transport': 8,
            'current_penetration': 15
        },
        '–ë–∏–∑–Ω–µ—Å-—Ä–∞–π–æ–Ω—ã': {
            'population': 300000,
            'avg_income': 120000,
            'competition': 7,
            'public_transport': 7,
            'current_penetration': 25
        },
        '–°–ø–∞–ª—å–Ω—ã–µ —Ä–∞–π–æ–Ω—ã': {
            'population': 800000,
            'avg_income': 50000,
            'competition': 4,
            'public_transport': 5,
            'current_penetration': 8
        },
        '–ü—Ä–∏–≥–æ—Ä–æ–¥—ã': {
            'population': 400000,
            'avg_income': 45000,
            'competition': 2,
            'public_transport': 3,
            'current_penetration': 12
        }
    }
    
    # –†–∞—Å—á–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ –∑–æ–Ω–∞–º
    for zone, data in zones_data.items():
        # –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞
        market_potential = data['population'] * 0.2  # 20% –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è penetration
        growth_potential = market_potential - (data['population'] * data['current_penetration'] / 100)
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø—Ä–æ–º–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∑–æ–Ω—ã
        if data['avg_income'] > 80000 and data['competition'] > 6:
            promo_strategy = "Premium positioning, –Ω–µ–±–æ–ª—å—à–∏–µ —Å–∫–∏–¥–∫–∏"
            recommended_discount = 15
        elif data['public_transport'] < 5:
            promo_strategy = "Convenience focus, —Å—Ä–µ–¥–Ω–∏–µ —Å–∫–∏–¥–∫–∏"
            recommended_discount = 25
        elif data['current_penetration'] < 10:
            promo_strategy = "Market education, –≤—ã—Å–æ–∫–∏–µ —Å–∫–∏–¥–∫–∏"
            recommended_discount = 40
        else:
            promo_strategy = "Balanced approach"
            recommended_discount = 30
        
        zones_data[zone].update({
            'growth_potential': growth_potential,
            'promo_strategy': promo_strategy,
            'recommended_discount': recommended_discount
        })
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    col1, col2 = st.columns(2)
    
    with col1:
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ –∑–æ–Ω–∞–º
        zones_df = pd.DataFrame([
            {
                '–ó–æ–Ω–∞': zone,
                '–ù–∞—Å–µ–ª–µ–Ω–∏–µ': f"{data['population']:,}",
                '–°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥': f"{data['avg_income']:,}",
                '–¢–µ–∫—É—â–∞—è penetration': f"{data['current_penetration']}%",
                '–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞': f"{data['growth_potential']:,.0f}",
                '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å–∫–∏–¥–∫–∞': f"{data['recommended_discount']}%"
            }
            for zone, data in zones_data.items()
        ])
        st.dataframe(zones_df, use_container_width=True)
    
    with col2:
        # –ì—Ä–∞—Ñ–∏–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ vs —Ç–µ–∫—É—â–µ–π penetration
        fig = go.Figure()
        
        zones = list(zones_data.keys())
        current_users = [zones_data[z]['population'] * zones_data[z]['current_penetration'] / 100 for z in zones]
        potential_users = [zones_data[z]['growth_potential'] for z in zones]
        
        fig.add_trace(go.Bar(
            x=zones,
            y=current_users,
            name='–¢–µ–∫—É—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
            marker_color='blue'
        ))
        
        fig.add_trace(go.Bar(
            x=zones,
            y=potential_users,
            name='–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞',
            marker_color='lightblue'
        ))
        
        fig.update_layout(
            title="–¢–µ–∫—É—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ vs –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞",
            barmode='stack',
            height=400
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    # –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    st.markdown("""
    ### üéØ –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:
    
    **üè¢ –¶–µ–Ω—Ç—Ä –≥–æ—Ä–æ–¥–∞**:
    ‚Ä¢ –í—ã—Å–æ–∫–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è ‚Üí —Ñ–æ–∫—É—Å –Ω–∞ differentiation
    ‚Ä¢ –•–æ—Ä–æ—à–∏–π –æ–±—â.—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç ‚Üí –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∫ time-saver
    ‚Ä¢ –í—ã—Å–æ–∫–∏–µ –¥–æ—Ö–æ–¥—ã ‚Üí –º–µ–Ω—å—à–∞—è price sensitivity
    
    **üíº –ë–∏–∑–Ω–µ—Å-—Ä–∞–π–æ–Ω—ã**:
    ‚Ä¢ B2B partnerships —Å –∫–æ–º–ø–∞–Ω–∏—è–º–∏
    ‚Ä¢ Rush hour surge pricing acceptance
    ‚Ä¢ Corporate accounts –∏ bulk payments
    
    **üè† –°–ø–∞–ª—å–Ω—ã–µ —Ä–∞–π–æ–Ω—ã**:
    ‚Ä¢ Price-sensitive segment ‚Üí –≤—ã—Å–æ–∫–∏–µ –ø—Ä–æ–º–æ
    ‚Ä¢ –°–ª–∞–±—ã–π –æ–±—â.—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç ‚Üí —É–¥–æ–±—Å—Ç–≤–æ –∫–∞–∫ value prop
    ‚Ä¢ Family accounts –∏ shared rides
    
    **üå≥ –ü—Ä–∏–≥–æ—Ä–æ–¥—ã**:
    ‚Ä¢ Last mile connectivity —Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–º–∏ —É–∑–ª–∞–º–∏
    ‚Ä¢ Scheduled rides –¥–ª—è commuting
    ‚Ä¢ Lower competition ‚Üí focus –Ω–∞ market education
    """)

def temporal_segmentation():
    """–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è"""
    st.markdown("### ‚è∞ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è")
    
    st.success("""
    **Time-based –ø—Ä–æ–º–æ**: –†–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è = —Ä–∞–∑–Ω—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–∏—Ç—å.
    Surge pricing vs off-peak discounts.
    """)
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
    time_segments = {
        'Rush hour (7-9, 17-19)': {
            'demand_level': 'High',
            'price_sensitivity': 'Low',
            'current_surge': 1.8,
            'recommended_strategy': 'Premium pricing, minimal discounts'
        },
        'Business hours (9-17)': {
            'demand_level': 'Medium',
            'price_sensitivity': 'Medium', 
            'current_surge': 1.2,
            'recommended_strategy': 'Moderate promotions for B2B'
        },
        'Evening leisure (19-23)': {
            'demand_level': 'Medium-High',
            'price_sensitivity': 'Medium',
            'current_surge': 1.4,
            'recommended_strategy': 'Entertainment partnerships'
        },
        'Night hours (23-6)': {
            'demand_level': 'Low',
            'price_sensitivity': 'Low',
            'current_surge': 1.6,
            'recommended_strategy': 'Safety premium, night differential'
        },
        'Weekend days': {
            'demand_level': 'Medium',
            'price_sensitivity': 'High',
            'current_surge': 1.1,
            'recommended_strategy': 'Leisure promotions, family discounts'
        },
        'Off-peak (10-16)': {
            'demand_level': 'Low',
            'price_sensitivity': 'High',
            'current_surge': 0.9,
            'recommended_strategy': 'Aggressive promotions for demand stimulation'
        }
    }
    
    # –í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    selected_segment = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–µ–≥–º–µ–Ω—Ç:", list(time_segments.keys()))
    
    segment_data = time_segments[selected_segment]
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown(f"**üìä –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {selected_segment}**")
        st.write(f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —Å–ø—Ä–æ—Å–∞: {segment_data['demand_level']}")
        st.write(f"‚Ä¢ Price sensitivity: {segment_data['price_sensitivity']}")
        st.write(f"‚Ä¢ –¢–µ–∫—É—â–∏–π surge: {segment_data['current_surge']}x")
        st.write(f"‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {segment_data['recommended_strategy']}")
        
    with col2:
        st.markdown("**‚öôÔ∏è –ü—Ä–æ–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã**")
        
        promo_type = st.selectbox("–¢–∏–ø –ø—Ä–æ–º–æ:", 
                                ["–°–∫–∏–¥–∫–∞ –æ—Ç –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω—ã", "–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞", 
                                 "Cashback", "Bundle offers"])
        
        if segment_data['price_sensitivity'] == 'High':
            default_discount = 35
        elif segment_data['price_sensitivity'] == 'Medium':
            default_discount = 20
        else:
            default_discount = 10
            
        promo_size = st.slider("–†–∞–∑–º–µ—Ä –ø—Ä–æ–º–æ (%)", 5, 50, default_discount)
    
    # Simulation –ø—Ä–æ–º–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
    base_demand = 10000  # –ë–∞–∑–æ–≤—ã–π —Å–ø—Ä–æ—Å –≤ —Å–µ–≥–º–µ–Ω—Ç–µ
    base_aov = 350
    
    # Demand elasticity –∫ –ø—Ä–æ–º–æ
    elasticity_map = {'High': 2.5, 'Medium': 1.5, 'Low': 0.8}
    elasticity = elasticity_map[segment_data['price_sensitivity']]
    
    # –ù–æ–≤—ã–π —Å–ø—Ä–æ—Å –ø–æ—Å–ª–µ –ø—Ä–æ–º–æ
    demand_lift = (promo_size / 100) * elasticity
    new_demand = base_demand * (1 + demand_lift)
    
    # Revenue impact
    new_aov = base_aov * (1 - promo_size / 100) if promo_type == "–°–∫–∏–¥–∫–∞ –æ—Ç –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω—ã" else base_aov
    
    base_revenue = base_demand * base_aov * 0.25
    new_revenue = new_demand * new_aov * 0.25
    promo_cost = new_demand * base_aov * (promo_size / 100)
    net_revenue = new_revenue - promo_cost
    
    # Results
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("–†–æ—Å—Ç —Å–ø—Ä–æ—Å–∞", f"{new_demand:,.0f}", f"+{demand_lift:.1%}")
    
    with col2:
        st.metric("–í—ã—Ä—É—á–∫–∞ —Å –ø—Ä–æ–º–æ", f"{new_revenue:,.0f} —Ä—É–±", 
                 f"{((new_revenue - base_revenue) / base_revenue * 100):+.1f}%")
    
    with col3:
        st.metric("–ß–∏—Å—Ç–∞—è –≤—ã—Ä—É—á–∫–∞", f"{net_revenue:,.0f} —Ä—É–±",
                 f"{((net_revenue - base_revenue) / base_revenue * 100):+.1f}%")
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –≤—Å–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å–µ–≥–º–µ–Ω—Ç–∞–º
    st.subheader("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
    
    all_segments_data = []
    for segment, data in time_segments.items():
        elasticity = elasticity_map[data['price_sensitivity']]
        optimal_discount = 30 if data['price_sensitivity'] == 'High' else 20 if data['price_sensitivity'] == 'Medium' else 10
        
        demand_lift = (optimal_discount / 100) * elasticity
        revenue_lift = demand_lift * (1 - optimal_discount / 100)  # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç
        
        all_segments_data.append({
            '–°–µ–≥–º–µ–Ω—Ç': segment,
            '–°–ø—Ä–æ—Å': data['demand_level'],
            'Price Sensitivity': data['price_sensitivity'],
            'Surge': f"{data['current_surge']}x",
            '–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞': f"{optimal_discount}%",
            '–û–∂–∏–¥–∞–µ–º—ã–π –ª–∏—Ñ—Ç': f"{revenue_lift:.1%}"
        })
    
    segments_df = pd.DataFrame(all_segments_data)
    st.dataframe(segments_df, use_container_width=True)

def value_based_segmentation():
    """–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–π —Å—É–º–º–µ"""
    st.markdown("### üíé Value-based —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è")
    
    st.info("""
    **RFM –ø–æ–¥—Ö–æ–¥ –¥–ª—è ride-hailing**: Recency (–ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–µ–∑–¥–∫–∞), Frequency (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–µ–∑–¥–æ–∫), 
    Monetary (–ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞). –†–∞–∑–Ω—ã–µ value segments —Ç—Ä–µ–±—É—é—Ç —Ä–∞–∑–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –∫ –ø—Ä–æ–º–æ.
    """)
    
    # RFM —Å–µ–≥–º–µ–Ω—Ç—ã
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üí∞ Value —Å–µ–≥–º–µ–Ω—Ç—ã**")
        
        vip_users = st.number_input("VIP (>10k —Ä—É–±/–º–µ—Å)", 1000, 50000, 8000)
        high_value = st.number_input("High value (5-10k —Ä—É–±/–º–µ—Å)", 5000, 100000, 25000)
        medium_value = st.number_input("Medium value (2-5k —Ä—É–±/–º–µ—Å)", 20000, 200000, 75000)
        low_value = st.number_input("Low value (<2k —Ä—É–±/–º–µ—Å)", 50000, 500000, 150000)
        
    with col2:
        st.markdown("**üéØ –ü—Ä–æ–º–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏**")
        
        vip_strategy = st.selectbox("VIP —Å—Ç—Ä–∞—Ç–µ–≥–∏—è:", 
                                  ["Exclusive perks", "Concierge service", "Priority support", "No promotions needed"])
        
        high_value_strategy = st.selectbox("High value —Å—Ç—Ä–∞—Ç–µ–≥–∏—è:",
                                         ["Loyalty rewards", "Upgrade incentives", "Volume discounts"])
        
        medium_value_strategy = st.selectbox("Medium value —Å—Ç—Ä–∞—Ç–µ–≥–∏—è:",
                                           ["Frequency bonuses", "Referral rewards", "Modest discounts"])
        
        low_value_strategy = st.selectbox("Low value —Å—Ç—Ä–∞—Ç–µ–≥–∏—è:",
                                        ["Activation campaigns", "High discounts", "Habit formation"])
    
    # –†–∞—Å—á–µ—Ç ROI –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
    value_segments = {
        'VIP': {
            'count': vip_users,
            'avg_monthly_spend': 12000,
            'frequency': 15,
            'churn_risk': 5,
            'promo_budget_per_user': 200 if vip_strategy != "No promotions needed" else 0
        },
        'High Value': {
            'count': high_value,
            'avg_monthly_spend': 7500,
            'frequency': 9,
            'churn_risk': 8,
            'promo_budget_per_user': 150
        },
        'Medium Value': {
            'count': medium_value,
            'avg_monthly_spend': 3500,
            'frequency': 5,
            'churn_risk': 12,
            'promo_budget_per_user': 80
        },
        'Low Value': {
            'count': low_value,
            'avg_monthly_spend': 1200,
            'frequency': 2,
            'churn_risk': 20,
            'promo_budget_per_user': 120
        }
    }
    
    # –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–º–æ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
    total_promo_budget = 0
    total_incremental_revenue = 0
    
    segment_results = []
    
    for segment, data in value_segments.items():
        # –ë–∞–∑–æ–≤–∞—è –≤—ã—Ä—É—á–∫–∞ (take rate 25%)
        base_monthly_revenue = data['count'] * data['avg_monthly_spend'] * 0.25
        
        # –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–æ–º–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–µ–≥–º–µ–Ω—Ç–∞
        if segment == 'VIP':
            revenue_lift = 0.05  # VIP –º–∞–ª–æ —Ä–µ–∞–≥–∏—Ä—É—é—Ç –Ω–∞ –ø—Ä–æ–º–æ, –Ω–æ —Ü–µ–Ω—è—Ç attention
        elif segment == 'High Value':
            revenue_lift = 0.15  # –£–º–µ—Ä–µ–Ω–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è
        elif segment == 'Medium Value':
            revenue_lift = 0.25  # –•–æ—Ä–æ—à–∞—è —Ä–µ–∞–∫—Ü–∏—è
        else:  # Low Value
            revenue_lift = 0.40  # –í—ã—Å–æ–∫–∞—è —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –ø—Ä–æ–º–æ
        
        incremental_revenue = base_monthly_revenue * revenue_lift
        promo_cost = data['count'] * data['promo_budget_per_user']
        
        segment_roi = (incremental_revenue - promo_cost) / promo_cost * 100 if promo_cost > 0 else 0
        
        segment_results.append({
            '–°–µ–≥–º–µ–Ω—Ç': segment,
            '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π': f"{data['count']:,}",
            '–°—Ä–µ–¥–Ω–∏–π spend': f"{data['avg_monthly_spend']:,} —Ä—É–±",
            '–ß–∞—Å—Ç–æ—Ç–∞': f"{data['frequency']} –ø–æ–µ–∑–¥–æ–∫",
            'Churn risk': f"{data['churn_risk']}%",
            '–ü—Ä–æ–º–æ –±—é–¥–∂–µ—Ç': f"{promo_cost:,.0f} —Ä—É–±",
            '–î–æ–ø. –≤—ã—Ä—É—á–∫–∞': f"{incremental_revenue:,.0f} —Ä—É–±",
            'ROI': f"{segment_roi:.0f}%"
        })
        
        total_promo_budget += promo_cost
        total_incremental_revenue += incremental_revenue
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    st.subheader("üìà ROI –ø–æ value —Å–µ–≥–º–µ–Ω—Ç–∞–º")
    
    results_df = pd.DataFrame(segment_results)
    st.dataframe(results_df, use_container_width=True)
    
    # –û–±—â–∏–π ROI –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    overall_roi = (total_incremental_revenue - total_promo_budget) / total_promo_budget * 100
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("–û–±—â–∏–π –ø—Ä–æ–º–æ –±—é–¥–∂–µ—Ç", f"{total_promo_budget:,.0f} —Ä—É–±")
    
    with col2:
        st.metric("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞", f"{total_incremental_revenue:,.0f} —Ä—É–±")
    
    with col3:
        color = "success" if overall_roi > 150 else "warning" if overall_roi > 75 else "error"
        st.markdown(f"""
        <div class="{color}-card">
            <h4>–û–±—â–∏–π ROI</h4>
            <h2>{overall_roi:.0f}%</h2>
        </div>
        """, unsafe_allow_html=True)
    
    # Value-based –∏–Ω—Å–∞–π—Ç—ã
    st.markdown("""
    ### üí° Value-based –ø—Ä–æ–º–æ –∏–Ω—Å–∞–π—Ç—ã:
    
    **üíé VIP —Å–µ–≥–º–µ–Ω—Ç**:
    ‚Ä¢ –ü—Ä–æ–º–æ –º–æ–≥—É—Ç –æ–±–µ—Å—Ü–µ–Ω–∏—Ç—å brand perception
    ‚Ä¢ –§–æ–∫—É—Å –Ω–∞ exclusive access –∏ premium service
    ‚Ä¢ Personal relationship management –≤–∞–∂–Ω–µ–µ —Å–∫–∏–¥–æ–∫
    
    **üí∞ High Value**:
    ‚Ä¢ Loyalty –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å accumulated benefits
    ‚Ä¢ Early access –∫ –Ω–æ–≤—ã–º features
    ‚Ä¢ Volume-based rewards
    
    **‚öñÔ∏è Medium Value**:
    ‚Ä¢ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç –¥–ª—è most –ø—Ä–æ–º–æ –∫–∞–º–ø–∞–Ω–∏–π
    ‚Ä¢ Potential –¥–ª—è upgrade –≤ high value –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º nurturing
    ‚Ä¢ Referral –ø—Ä–æ–≥—Ä–∞–º–º—ã work well
    
    **üìà Low Value**:
    ‚Ä¢ –í—ã—Å–æ–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞ –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ–¥—Ö–æ–¥–µ
    ‚Ä¢ Risk –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ deal-seekers
    ‚Ä¢ Focus –Ω–∞ habit formation over pure discounting
    """)


import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
from datetime import datetime, timedelta
import random
from typing import Dict, List, Tuple, Optional
def ride_hailing_scenarios():
    """–°—Ü–µ–Ω–∞—Ä–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è ride-hailing"""
    st.header("üé™ –°—Ü–µ–Ω–∞—Ä–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Ride-Hailing")
    
    st.markdown("""
    **–°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è ride-hailing**: –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –≤–æ–π–Ω—ã, —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ, 
    –ø–∞–Ω–¥–µ–º–∏–∏, –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≥–æ—Ä–æ–¥—Å–∫–æ–π –º–æ–±–∏–ª—å–Ω–æ—Å—Ç–∏.
    """)
    
    scenario_type = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π:",
        [
            "üÜö –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è –≤–æ–π–Ω–∞ (–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã)",
            "üìâ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∫—Ä–∏–∑–∏—Å (—Å–Ω–∏–∂–µ–Ω–∏–µ —Å–ø—Ä–æ—Å–∞)",
            "üö´ –£—Å–∏–ª–µ–Ω–∏–µ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è",
            "ü¶† –ü–∞–Ω–¥–µ–º–∏—è/—Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä",
            "üöá –†–∞–∑–≤–∏—Ç–∏–µ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞",
            "üöó –ó–∞–ø—É—Å–∫ –≤ –Ω–æ–≤–æ–º –≥–æ—Ä–æ–¥–µ"
        ]
    )
    
    if scenario_type == "üÜö –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è –≤–æ–π–Ω–∞ (–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã)":
        competitive_war_scenario()
    elif scenario_type == "üìâ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∫—Ä–∏–∑–∏—Å (—Å–Ω–∏–∂–µ–Ω–∏–µ —Å–ø—Ä–æ—Å–∞)":
        economic_crisis_scenario()
    elif scenario_type == "üö´ –£—Å–∏–ª–µ–Ω–∏–µ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è":
        regulation_scenario()
    elif scenario_type == "ü¶† –ü–∞–Ω–¥–µ–º–∏—è/—Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä":
        pandemic_scenario()
    elif scenario_type == "üöá –†–∞–∑–≤–∏—Ç–∏–µ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞":
        public_transport_scenario()
    elif scenario_type == "üöó –ó–∞–ø—É—Å–∫ –≤ –Ω–æ–≤–æ–º –≥–æ—Ä–æ–¥–µ":
        new_city_launch_scenario()

def competitive_war_scenario():
    """–°—Ü–µ–Ω–∞—Ä–∏–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–π –≤–æ–π–Ω—ã"""
    st.subheader("üÜö –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è –≤–æ–π–Ω–∞ —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏")
    
    st.warning("""
    **–°–∏—Ç—É–∞—Ü–∏—è**: –ö—Ä—É–ø–Ω—ã–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç –∑–∞–ø—É—Å—Ç–∏–ª –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é –ø—Ä–æ–º–æ–∫–∞–º–ø–∞–Ω–∏—é —Å —Å–∫–∏–¥–∫–∞–º–∏ 50% –∏ 
    cashback'–æ–º. –í–∞—à–∞ –¥–æ–ª—è —Ä—ã–Ω–∫–∞ –ø–∞–¥–∞–µ—Ç, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É—Ö–æ–¥—è—Ç –∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º.
    """)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç–≤–µ—Ç–Ω–æ–π —Ä–µ–∞–∫—Ü–∏–∏**")
        
        promo_intensity = st.slider("–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ (% –æ—Ç –≤—ã—Ä—É—á–∫–∏)", 10, 60, 30)
        market_share_loss = st.slider("–ü–æ—Ç–µ—Ä—è –¥–æ–ª–∏ —Ä—ã–Ω–∫–∞ –±–µ–∑ —Ä–µ–∞–∫—Ü–∏–∏ (%)", 10, 50, 25)
        cac_inflation = st.slider("–†–æ—Å—Ç CAC –∏–∑-–∑–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏ (%)", 20, 100, 50)
        
        # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        base_aov = 350
        base_frequency = 4.5
        base_take_rate = 25
        base_cac = 1500
        base_users = 100000
        
    with col2:
        st.markdown("**üìä –ë–∞–∑–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏**")
        st.metric("–ë–∞–∑–æ–≤—ã–π AOV", f"{base_aov} —Ä—É–±")
        st.metric("–ß–∞—Å—Ç–æ—Ç–∞", f"{base_frequency} –ø–æ–µ–∑–¥–æ–∫/–º–µ—Å—è—Ü")
        st.metric("Take Rate", f"{base_take_rate}%")
        st.metric("–ë–∞–∑–æ–≤—ã–π CAC", f"{base_cac:,} —Ä—É–±")
    
    # –†–∞—Å—á–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ù–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—é
    scenario_1_users = base_users * (1 - market_share_loss / 100)
    scenario_1_revenue = scenario_1_users * base_aov * (base_take_rate / 100) * base_frequency
    scenario_1_cac = base_cac  # CAC –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–µ–Ω—å—à–µ
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –ø—Ä–æ–º–æ—Ä–µ–∞–∫—Ü–∏—è
    scenario_2_users = base_users * 0.95  # –ù–µ–±–æ–ª—å—à–∞—è –ø–æ—Ç–µ—Ä—è –≤—Å–µ —Ä–∞–≤–Ω–æ –µ—Å—Ç—å
    effective_take_rate = base_take_rate - promo_intensity  # –ü—Ä–æ–º–æ–∫–æ–¥—ã –µ–¥—è—Ç –º–∞—Ä–∂—É
    scenario_2_revenue = scenario_2_users * base_aov * (effective_take_rate / 100) * base_frequency
    scenario_2_cac = base_cac * (1 + cac_inflation / 100)
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 3: –§–æ–∫—É—Å –Ω–∞ retention –±–µ–∑ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    scenario_3_users = base_users * (1 - market_share_loss / 100 * 0.6)  # –ú–µ–Ω—å—à–∏–µ –ø–æ—Ç–µ—Ä–∏
    scenario_3_frequency = base_frequency * 1.2  # –ü–æ–≤—ã—à–µ–Ω–∏–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
    scenario_3_revenue = scenario_3_users * base_aov * (base_take_rate / 100) * scenario_3_frequency
    scenario_3_cac = base_cac * 1.1  # –ù–µ–±–æ–ª—å—à–æ–π —Ä–æ—Å—Ç CAC
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    st.subheader("üìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤")
    
    scenarios_df = pd.DataFrame([
        {
            '–°—Ü–µ–Ω–∞—Ä–∏–π': '–ù–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º',
            '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏': f"{scenario_1_users:,.0f}",
            '–ú–µ—Å—è—á–Ω–∞—è –≤—ã—Ä—É—á–∫–∞': f"{scenario_1_revenue:,.0f} —Ä—É–±",
            '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π CAC': f"{scenario_1_cac:,} —Ä—É–±",
            'Take Rate': f"{base_take_rate}%",
            '–†–∏—Å–∫–∏': '–ü–æ—Ç–µ—Ä—è –¥–æ–ª–∏ —Ä—ã–Ω–∫–∞'
        },
        {
            '–°—Ü–µ–Ω–∞—Ä–∏–π': '–ü—Ä–æ–º–æ–≤–æ–π–Ω–∞',
            '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏': f"{scenario_2_users:,.0f}",
            '–ú–µ—Å—è—á–Ω–∞—è –≤—ã—Ä—É—á–∫–∞': f"{scenario_2_revenue:,.0f} —Ä—É–±",
            '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π CAC': f"{scenario_2_cac:,} —Ä—É–±",
            'Take Rate': f"{effective_take_rate:.1f}%",
            '–†–∏—Å–∫–∏': '–ù–∏–∑–∫–∞—è –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å'
        },
        {
            '–°—Ü–µ–Ω–∞—Ä–∏–π': '–§–æ–∫—É—Å –Ω–∞ retention',
            '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏': f"{scenario_3_users:,.0f}",
            '–ú–µ—Å—è—á–Ω–∞—è –≤—ã—Ä—É—á–∫–∞': f"{scenario_3_revenue:,.0f} —Ä—É–±",
            '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π CAC': f"{scenario_3_cac:,} —Ä—É–±",
            'Take Rate': f"{base_take_rate}%",
            '–†–∏—Å–∫–∏': '–ú–µ–¥–ª–µ–Ω–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è'
        }
    ])
    
    st.dataframe(scenarios_df, use_container_width=True)
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    best_revenue_scenario = max([scenario_1_revenue, scenario_2_revenue, scenario_3_revenue])
    
    if best_revenue_scenario == scenario_3_revenue:
        st.success("üéØ **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è**: –§–æ–∫—É—Å –Ω–∞ retention –∏ —á–∞—Å—Ç–æ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ –ø—Ä–æ–º–æ–≤–æ–π–Ω—ã.")
    elif best_revenue_scenario == scenario_1_revenue:
        st.info("üìä **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è**: –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ø–µ—Ä–µ–∂–¥–∞—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—É—é –≤–æ–ª–Ω—É, —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏–≤—à–∏—Å—å –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
    else:
        st.warning("‚ö†Ô∏è **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è**: –ü—Ä–æ–º–æ–≤–æ–π–Ω–∞ –æ–ø—Ä–∞–≤–¥–∞–Ω–∞, –Ω–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ unit economics.")
    
    st.markdown("""
    ### üí° –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏:
    
    1. **–î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞**: –ø—Ä–µ–º–∏—É–º –æ–ø—Ü–∏–∏, –ª—É—á—à–∏–π UX
    2. **–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è**: –¥–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã, –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏  
    3. **B2B focus**: –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã, –º–µ–Ω–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∫ —Ü–µ–Ω–µ
    4. **Geographic moats**: —Ñ–æ–∫—É—Å –Ω–∞ –ø—Ä–∏–≥–æ—Ä–æ–¥–∞—Ö, –≥–¥–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è —Å–ª–∞–±–µ–µ
    5. **Supply-side**: –ø–µ—Ä–µ–º–∞–Ω–∏–≤–∞–Ω–∏–µ –ª—É—á—à–∏—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π
    """)

def economic_crisis_scenario():
    """–°—Ü–µ–Ω–∞—Ä–∏–π —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ –∫—Ä–∏–∑–∏—Å–∞"""
    st.subheader("üìâ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∫—Ä–∏–∑–∏—Å –∏ —Å–Ω–∏–∂–µ–Ω–∏–µ —Å–ø—Ä–æ—Å–∞")
    
    st.error("""
    **–°–∏—Ç—É–∞—Ü–∏—è**: –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∫—Ä–∏–∑–∏—Å —Å–Ω–∏–∂–∞–µ—Ç —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ–º—ã–µ –¥–æ—Ö–æ–¥—ã. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥—è—Ç 
    –Ω–∞ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, —Å–Ω–∏–∂–∞–µ—Ç—Å—è —á–∞—Å—Ç–æ—Ç–∞ –ø–æ–µ–∑–¥–æ–∫, —Ä–∞—Å—Ç–µ—Ç price sensitivity.
    """)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫—Ä–∏–∑–∏—Å–∞
    col1, col2 = st.columns(2)
    
    with col1:
        demand_drop = st.slider("–°–Ω–∏–∂–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å–ø—Ä–æ—Å–∞ (%)", 20, 60, 35)
        price_sensitivity = st.slider("–†–æ—Å—Ç price sensitivity (—ç–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å)", 1.2, 2.5, 1.8)
        income_effect = st.slider("–°–Ω–∏–∂–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤ –Ω–∞—Å–µ–ª–µ–Ω–∏—è (%)", 10, 30, 20)
        
    with col2:
        # –†–µ–∞–∫—Ü–∏—è –±–∏–∑–Ω–µ—Å–∞
        price_cut = st.slider("–°–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–ø—Ä–æ—Å–∞ (%)", 0, 30, 15)
        cost_optimization = st.slider("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ (%)", 10, 40, 25)
        
    # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    base_volume = 1000000  # –ø–æ–µ–∑–¥–æ–∫ –≤ –º–µ—Å—è—Ü
    base_aov = 350
    base_take_rate = 25
    base_ops_cost = 50  # –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ—Å—è—Ü
    
    # –†–∞—Å—á–µ—Ç –≤–ª–∏—è–Ω–∏—è –∫—Ä–∏–∑–∏—Å–∞
    new_volume = base_volume * (1 - demand_drop / 100)
    new_aov = base_aov * (1 - price_cut / 100)
    
    # Price elasticity effect
    additional_volume_from_price_cut = base_volume * (price_cut / 100) * price_sensitivity
    final_volume = min(new_volume + additional_volume_from_price_cut, base_volume * 0.9)
    
    new_ops_cost = base_ops_cost * (1 - cost_optimization / 100)
    
    # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    base_revenue = base_volume * base_aov * (base_take_rate / 100)
    new_revenue = final_volume * new_aov * (base_take_rate / 100)
    
    base_profit = base_revenue - (base_volume / 4.5) * base_ops_cost  # Assuming 4.5 rides per user per month
    new_profit = new_revenue - (final_volume / 4.5) * new_ops_cost
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    st.subheader("üìä –í–ª–∏—è–Ω–∏–µ –∫—Ä–∏–∑–∏—Å–∞ –Ω–∞ –±–∏–∑–Ω–µ—Å")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–û–±—ä–µ–º –ø–æ–µ–∑–¥–æ–∫", f"{final_volume:,.0f}", 
                 f"{((final_volume - base_volume) / base_volume * 100):+.1f}%")
    
    with col2:
        st.metric("–°—Ä–µ–¥–Ω–∏–π —á–µ–∫", f"{new_aov:.0f} —Ä—É–±", 
                 f"{((new_aov - base_aov) / base_aov * 100):+.1f}%")
    
    with col3:
        st.metric("–ú–µ—Å—è—á–Ω–∞—è –≤—ã—Ä—É—á–∫–∞", f"{new_revenue:,.0f} —Ä—É–±", 
                 f"{((new_revenue - base_revenue) / base_revenue * 100):+.1f}%")
    
    with col4:
        st.metric("–ü—Ä–∏–±—ã–ª—å", f"{new_profit:,.0f} —Ä—É–±", 
                 f"{((new_profit - base_profit) / base_profit * 100):+.1f}%")
    
    # –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∫—Ä–∏–∑–∏—Å–∞
    profit_impact = (new_profit - base_profit) / base_profit
    
    if profit_impact < -0.5:
        st.error("üö® **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å!** –ù–µ–æ–±—Ö–æ–¥–∏–º—ã —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –º–µ—Ä—ã.")
        recommendations = [
            "–†–∞–¥–∏–∫–∞–ª—å–Ω–æ–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤",
            "–§–æ–∫—É—Å –Ω–∞ –Ω–∞–∏–±–æ–ª–µ–µ –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–∞—Ö",
            "–í—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —É–±—ã—Ç–æ—á–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤",
            "–ü–µ—Ä–µ–≥–æ–≤–æ—Ä—ã —Å –≤–æ–¥–∏—Ç–µ–ª—è–º–∏ –æ —Å–Ω–∏–∂–µ–Ω–∏–∏ –∫–æ–º–∏—Å—Å–∏–∏"
        ]
    elif profit_impact < -0.2:
        st.warning("‚ö†Ô∏è **–°–µ—Ä—å–µ–∑–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ.** –ù—É–∂–Ω–∞ –∞–Ω—Ç–∏–∫—Ä–∏–∑–∏—Å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è.")
        recommendations = [
            "–°–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã (—ç–∫–æ–Ω–æ–º vs –ø—Ä–µ–º–∏—É–º)",
            "Loyalty –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            "–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤ B2B —Å–µ–≥–º–µ–Ω—Ç",
            "–ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞ —Å —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è–º–∏"
        ]
    else:
        st.info("üìä **–£–º–µ—Ä–µ–Ω–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ.** –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π.")
        recommendations = [
            "–ó–∞—Ö–≤–∞—Ç –¥–æ–ª–∏ —Ä—ã–Ω–∫–∞ –æ—Ç –æ—Å–ª–∞–±–ª–µ–Ω–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤",
            "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è costs",
            "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é —ç–∫–æ–Ω–æ–º–∏–∫–∏"
        ]
    
    st.markdown("### üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:")
    for rec in recommendations:
        st.write(f"‚Ä¢ {rec}")

def regulation_scenario():
    """–°—Ü–µ–Ω–∞—Ä–∏–π —É—Å–∏–ª–µ–Ω–∏—è —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
    st.subheader("üö´ –£—Å–∏–ª–µ–Ω–∏–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    st.info("""
    **–°–∏—Ç—É–∞—Ü–∏—è**: –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ –≤–≤–æ–¥–∏—Ç –Ω–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è ride-hailing: –ª–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π,
    –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ surge pricing, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ, –Ω–∞–ª–æ–≥–∏ –Ω–∞ —Ü–∏—Ñ—Ä–æ–≤—ã–µ —É—Å–ª—É–≥–∏.
    """)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üìã –ù–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è**")
        
        licensing_cost = st.slider("–°—Ç–æ–∏–º–æ—Å—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è (—Ä—É–±)", 5000, 50000, 15000)
        driver_retention_impact = st.slider("–û—Ç—Ç–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π –∏–∑-–∑–∞ –ª–∏—Ü–µ–Ω–∑–∏–π (%)", 10, 40, 25)
        surge_limitation = st.slider("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ surge pricing (–º–∞–∫—Å. –º–Ω–æ–∂–∏—Ç–µ–ª—å)", 1.5, 3.0, 2.0)
        digital_tax = st.slider("–ù–∞–ª–æ–≥ –Ω–∞ —Ü–∏—Ñ—Ä–æ–≤—ã–µ —É—Å–ª—É–≥–∏ (%)", 0, 10, 5)
        
    with col2:
        st.markdown("**üìä –ë–∞–∑–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏**")
        
        base_drivers = 50000
        base_surge_revenue_share = 15  # % –æ—Ç –≤—ã—Ä—É—á–∫–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ surge
        base_avg_surge = 2.5
        base_monthly_revenue = 500_000_000
    
    # –†–∞—Å—á–µ—Ç –≤–ª–∏—è–Ω–∏—è —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    
    # –í–ª–∏—è–Ω–∏–µ –Ω–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π
    remaining_drivers = base_drivers * (1 - driver_retention_impact / 100)
    supply_shortage = (base_drivers - remaining_drivers) / base_drivers
    
    # –í–ª–∏—è–Ω–∏–µ –Ω–∞ surge pricing
    surge_revenue_loss = 0
    if surge_limitation < base_avg_surge:
        surge_revenue_loss = (base_surge_revenue_share / 100) * base_monthly_revenue * \
                           ((base_avg_surge - surge_limitation) / base_avg_surge)
    
    # –í–ª–∏—è–Ω–∏–µ –¥–µ—Ñ–∏—Ü–∏—Ç–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π –Ω–∞ —Å–ø—Ä–æ—Å
    demand_impact = supply_shortage * 0.8  # 80% —ç–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å —Å–ø—Ä–æ—Å–∞ –∫ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    demand_loss = base_monthly_revenue * demand_impact
    
    # –ù–∞–ª–æ–≥–æ–≤–æ–µ –≤–ª–∏—è–Ω–∏–µ
    tax_cost = base_monthly_revenue * (digital_tax / 100)
    
    # Licensing costs
    monthly_licensing_cost = (base_drivers * licensing_cost) / 12  # –ê–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—è –Ω–∞ –≥–æ–¥
    
    # –ò—Ç–æ–≥–æ–≤–æ–µ –≤–ª–∏—è–Ω–∏–µ
    total_revenue_impact = surge_revenue_loss + demand_loss
    total_cost_impact = tax_cost + monthly_licensing_cost
    net_impact = total_revenue_impact + total_cost_impact
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    st.subheader("üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –≤–ª–∏—è–Ω–∏–µ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–ü–æ—Ç–µ—Ä—è –≤–æ–¥–∏—Ç–µ–ª–µ–π", f"{base_drivers - remaining_drivers:,.0f}", 
                 f"-{driver_retention_impact}%")
    
    with col2:
        st.metric("–ü–æ—Ç–µ—Ä—è –æ—Ç surge", f"{surge_revenue_loss:,.0f} —Ä—É–±", 
                 f"-{(surge_revenue_loss/base_monthly_revenue*100):.1f}%")
    
    with col3:
        st.metric("–ü–æ—Ç–µ—Ä—è –æ—Ç –¥–µ—Ñ–∏—Ü–∏—Ç–∞", f"{demand_loss:,.0f} —Ä—É–±", 
                 f"-{(demand_loss/base_monthly_revenue*100):.1f}%")
    
    with col4:
        st.metric("–î–æ–ø. —Ä–∞—Å—Ö–æ–¥—ã", f"{total_cost_impact:,.0f} —Ä—É–±", 
                 f"+{(total_cost_impact/base_monthly_revenue*100):.1f}%")
    
    # –û–±—â–µ–µ –≤–ª–∏—è–Ω–∏–µ
    total_impact_pct = (net_impact / base_monthly_revenue) * 100
    
    if total_impact_pct > 15:
        st.error(f"üö® **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –≤–ª–∏—è–Ω–∏–µ**: {total_impact_pct:.1f}% –æ—Ç –≤—ã—Ä—É—á–∫–∏!")
    elif total_impact_pct > 8:
        st.warning(f"‚ö†Ô∏è **–°–µ—Ä—å–µ–∑–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ**: {total_impact_pct:.1f}% –æ—Ç –≤—ã—Ä—É—á–∫–∏")
    else:
        st.info(f"üìä **–£–º–µ—Ä–µ–Ω–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ**: {total_impact_pct:.1f}% –æ—Ç –≤—ã—Ä—É—á–∫–∏")
    
    # –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
    st.subheader("üîß –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∫ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—é")
    
    strategies = [
        {
            "–°—Ç—Ä–∞—Ç–µ–≥–∏—è": "–ü–æ–º–æ—â—å –≤–æ–¥–∏—Ç–µ–ª—è–º —Å –ª–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏–µ–º",
            "–û–ø–∏—Å–∞–Ω–∏–µ": "Subsidize licensing costs, –æ–±—É—á–∞—é—â–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã",
            "–≠—Ñ—Ñ–µ–∫—Ç": "–°–Ω–∏–∂–µ–Ω–∏–µ –æ—Ç—Ç–æ–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π –Ω–∞ 50-70%",
            "–°—Ç–æ–∏–º–æ—Å—Ç—å": f"{monthly_licensing_cost * 0.8:,.0f} —Ä—É–±/–º–µ—Å—è—Ü"
        },
        {
            "–°—Ç—Ä–∞—Ç–µ–≥–∏—è": "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è",
            "–û–ø–∏—Å–∞–Ω–∏–µ": "AI –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å–ø—Ä–æ—Å–∞, –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Ä–∞–º–∫–∞—Ö –ª–∏–º–∏—Ç–æ–≤",
            "–≠—Ñ—Ñ–µ–∫—Ç": "–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è 30-40% –ø–æ—Ç–µ—Ä—å –æ—Ç surge –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π",
            "–°—Ç–æ–∏–º–æ—Å—Ç—å": "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ R&D"
        },
        {
            "–°—Ç—Ä–∞—Ç–µ–≥–∏—è": "–î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤",
            "–û–ø–∏—Å–∞–Ω–∏–µ": "–î–æ—Å—Ç–∞–≤–∫–∞, –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏, subscription –º–æ–¥–µ–ª–∏",
            "–≠—Ñ—Ñ–µ–∫—Ç": "–ù–æ–≤—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–æ—Ö–æ–¥–∞, —Å–Ω–∏–∂–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è",
            "–°—Ç–æ–∏–º–æ—Å—Ç—å": "–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞–ø–∏—Ç–∞–ª–æ–≤–ª–æ–∂–µ–Ω–∏—è"
        },
        {
            "–°—Ç—Ä–∞—Ç–µ–≥–∏—è": "–õ–æ–±–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞",
            "–û–ø–∏—Å–∞–Ω–∏–µ": "–†–∞–±–æ—Ç–∞ —Å —Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞–º–∏, –æ—Ç—Ä–∞—Å–ª–µ–≤—ã–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏",
            "–≠—Ñ—Ñ–µ–∫—Ç": "–°–º—è–≥—á–µ–Ω–∏–µ –±—É–¥—É—â–∏—Ö —Ä–µ–≥—É–ª—è—Ç–æ—Ä–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π",
            "–°—Ç–æ–∏–º–æ—Å—Ç—å": "–ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã"
        }
    ]
    
    strategies_df = pd.DataFrame(strategies)
    st.dataframe(strategies_df, use_container_width=True)

def pandemic_scenario():
    """–°—Ü–µ–Ω–∞—Ä–∏–π –ø–∞–Ω–¥–µ–º–∏–∏"""
    st.subheader("ü¶† –ü–∞–Ω–¥–µ–º–∏—è / –§–æ—Ä—Å-–º–∞–∂–æ—Ä–Ω—ã–µ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞")
    
    st.error("""
    **–°–∏—Ç—É–∞—Ü–∏—è**: –ü–∞–Ω–¥–µ–º–∏—è –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä–Ω—ã–µ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞ –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ –º–µ–Ω—è—é—Ç 
    –ø–∞—Ç—Ç–µ—Ä–Ω—ã –º–æ–±–∏–ª—å–Ω–æ—Å—Ç–∏. Lockdown, —É–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞, —Å—Ç—Ä–∞—Ö –ø–µ—Ä–µ–¥ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º.
    """)
    
    # –§–∞–∑—ã –ø–∞–Ω–¥–µ–º–∏–∏
    pandemic_phase = st.selectbox(
        "–§–∞–∑–∞ –ø–∞–Ω–¥–µ–º–∏–∏:",
        ["üîí Lockdown (–ø–æ–ª–Ω–∞—è –∏–∑–æ–ª—è—Ü–∏—è)", "üìâ Partial restrictions", "üìà Recovery phase", "üÜï New normal"]
    )
    
    col1, col2 = st.columns(2)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–∞–∑—ã
    if pandemic_phase == "üîí Lockdown (–ø–æ–ª–Ω–∞—è –∏–∑–æ–ª—è—Ü–∏—è)":
        default_demand = -80
        default_essential = 20
        default_safety = 80
    elif pandemic_phase == "üìâ Partial restrictions":
        default_demand = -50
        default_essential = 40
        default_safety = 60
    elif pandemic_phase == "üìà Recovery phase":
        default_demand = -20
        default_essential = 70
        default_safety = 30
    else:  # New normal
        default_demand = 10
        default_essential = 90
        default_safety = 10
    
    with col1:
        st.markdown(f"**üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {pandemic_phase}**")
        
        demand_change = st.slider("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å–ø—Ä–æ—Å–∞ (%)", -90, 50, default_demand)
        essential_trips_share = st.slider("–î–æ–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫ (%)", 10, 90, default_essential)
        safety_premium = st.slider("–ü—Ä–µ–º–∏—è –∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å vs –æ–±—â.—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç (%)", 0, 100, default_safety)
        
    with col2:
        st.markdown("**üöó –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞**")
        
        safety_measures_cost = st.slider("–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ safety –º–µ—Ä—ã (% –æ—Ç –≤—ã—Ä—É—á–∫–∏)", 0, 15, 8)
        delivery_expansion = st.slider("Expansion –≤ –¥–æ—Å—Ç–∞–≤–∫—É (% –¥–æ–ø. –≤—ã—Ä—É—á–∫–∏)", 0, 50, 25)
        pricing_adjustment = st.slider("–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ü–µ–Ω (%)", -30, 30, 0)
    
    # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    base_monthly_volume = 2_000_000
    base_aov = 350
    base_take_rate = 25
    
    # –†–∞—Å—á–µ—Ç –≤–ª–∏—è–Ω–∏—è –ø–∞–Ω–¥–µ–º–∏–∏
    
    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–ø—Ä–æ—Å–∞ —Å —É—á–µ—Ç–æ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ–µ–∑–¥–æ–∫
    new_volume = base_monthly_volume * (1 + demand_change / 100)
    
    # Safety premium effect - –ª—é–¥–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é—Ç —Ç–∞–∫—Å–∏ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–º—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
    safety_boost = base_monthly_volume * 0.1 * (safety_premium / 100)  # 10% –±–∞–∑—ã –º–æ–≥—É—Ç –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è
    final_volume = new_volume + safety_boost
    
    # –í–ª–∏—è–Ω–∏–µ –Ω–∞ AOV
    new_aov = base_aov * (1 + pricing_adjustment / 100)
    
    # –î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ –¥–æ—Å—Ç–∞–≤–∫—É
    delivery_revenue = base_monthly_volume * base_aov * (base_take_rate / 100) * (delivery_expansion / 100)
    
    # –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    base_revenue = final_volume * new_aov * (base_take_rate / 100)
    safety_costs = base_revenue * (safety_measures_cost / 100)
    
    total_revenue = base_revenue + delivery_revenue
    net_revenue = total_revenue - safety_costs
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–≤—ã–º —Å—Ü–µ–Ω–∞—Ä–∏–µ–º
    base_total_revenue = base_monthly_volume * base_aov * (base_take_rate / 100)
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    st.subheader("üìà –í–ª–∏—è–Ω–∏–µ –Ω–∞ –±–∏–∑–Ω–µ—Å-–ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
    
    col1, col2, col3, col4 = st.columns(4)
    
    volume_change = ((final_volume - base_monthly_volume) / base_monthly_volume) * 100
    revenue_change = ((total_revenue - base_total_revenue) / base_total_revenue) * 100
    
    with col1:
        st.metric("–û–±—ä–µ–º –ø–æ–µ–∑–¥–æ–∫", f"{final_volume:,.0f}", f"{volume_change:+.1f}%")
    
    with col2:
        st.metric("AOV", f"{new_aov:.0f} —Ä—É–±", f"{pricing_adjustment:+.0f}%")
    
    with col3:
        st.metric("–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞", f"{total_revenue:,.0f} —Ä—É–±", f"{revenue_change:+.1f}%")
    
    with col4:
        st.metric("–ß–∏—Å—Ç–∞—è –≤—ã—Ä—É—á–∫–∞", f"{net_revenue:,.0f} —Ä—É–±", 
                 f"{((net_revenue - base_total_revenue) / base_total_revenue * 100):+.1f}%")
    
    # Breakdown –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –≤—ã—Ä—É—á–∫–∏
    if delivery_revenue > 0:
        st.subheader("üçï –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—ã—Ä—É—á–∫–∏")
        
        fig = go.Figure(data=[go.Pie(
            labels=['Ride-hailing', 'Delivery'],
            values=[base_revenue, delivery_revenue],
            hole=0.3
        )])
        
        fig.update_layout(title="–î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ —É—Å–ª–æ–≤–∏—è—Ö –ø–∞–Ω–¥–µ–º–∏–∏", height=300)
        st.plotly_chart(fig, use_container_width=True)
    
    # –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å–∞–π—Ç—ã
    st.subheader("üí° –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å–∞–π—Ç—ã")
    
    if revenue_change > 0:
        st.success(f"""
        üéØ **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤ –∫—Ä–∏–∑–∏—Å–µ**: –í—ã—Ä—É—á–∫–∞ –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ {revenue_change:.1f}%
        
        **–§–∞–∫—Ç–æ—Ä—ã —É—Å–ø–µ—Ö–∞**:
        ‚Ä¢ Safety premium: +{safety_boost:,.0f} –ø–æ–µ–∑–¥–æ–∫
        ‚Ä¢ –î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: +{delivery_revenue:,.0f} —Ä—É–± –≤—ã—Ä—É—á–∫–∏
        ‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        """)
    else:
        st.warning(f"""
        ‚ö†Ô∏è **–°–ª–æ–∂–Ω—ã–π –ø–µ—Ä–∏–æ–¥**: –í—ã—Ä—É—á–∫–∞ —Å–Ω–∏–∑–∏–ª–∞—Å—å –Ω–∞ {abs(revenue_change):.1f}%
        
        **–§–∞–∫—Ç–æ—Ä—ã —Å–Ω–∏–∂–µ–Ω–∏—è**:
        ‚Ä¢ –û–±—â–µ–µ –ø–∞–¥–µ–Ω–∏–µ —Å–ø—Ä–æ—Å–∞: {demand_change}%
        ‚Ä¢ –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {safety_costs:,.0f} —Ä—É–±
        ‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –º–æ–±–∏–ª—å–Ω–æ—Å—Ç–∏
        """)
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ñ–∞–∑–∞–º
    phase_recommendations = {
        "üîí Lockdown (–ø–æ–ª–Ω–∞—è –∏–∑–æ–ª—è—Ü–∏—è)": [
            "–ü–æ–ª–Ω—ã–π pivot –≤ –¥–æ—Å—Ç–∞–≤–∫—É –µ–¥—ã –∏ —Ç–æ–≤–∞—Ä–æ–≤",
            "–ú–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤",
            "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π (—Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø–æ–º–æ—â—å)",
            "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ recovery phase"
        ],
        "üìâ Partial restrictions": [
            "Hybrid –º–æ–¥–µ–ª—å: rides + delivery",
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ safety –º–µ—Ä—ã",
            "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ safety –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤",
            "Flexible pricing –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–ø—Ä–æ—Å–∞"
        ],
        "üìà Recovery phase": [
            "–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            "–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ü–µ–Ω",
            "Expansion supply side",
            "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ new normal"
        ],
        "üÜï New normal": [
            "–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö user behavior",
            "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ technology (contactless)",
            "Expansion –≤ —Å–º–µ–∂–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã",
            "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–ª–µ–¥—É—é—â–∏–º –∫—Ä–∏–∑–∏—Å–∞–º"
        ]
    }
    
    st.markdown(f"### üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ñ–∞–∑—ã '{pandemic_phase}':")
    for rec in phase_recommendations[pandemic_phase]:
        st.write(f"‚Ä¢ {rec}")

def public_transport_scenario():
    """–†–∞–∑–≤–∏—Ç–∏–µ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"""
    st.subheader("üöá –†–∞–∑–≤–∏—Ç–∏–µ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
    
    st.info("""
    **–°–∏—Ç—É–∞—Ü–∏—è**: –ì–æ—Ä–æ–¥ –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–µ—Ç –≤ —Ä–∞–∑–≤–∏—Ç–∏–µ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ - –Ω–æ–≤—ã–µ –ª–∏–Ω–∏–∏ –º–µ—Ç—Ä–æ, 
    BRT, —É–ª—É—á—à–µ–Ω–∏–µ –∞–≤—Ç–æ–±—É—Å–Ω–æ–π —Å–µ—Ç–∏. –†–∞—Å—Ç–µ—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è —Å –±–æ–ª–µ–µ –¥–µ—à–µ–≤–æ–π –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–æ–π.
    """)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üöá –†–∞–∑–≤–∏—Ç–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞**")
        
        metro_expansion = st.slider("–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –º–µ—Ç—Ä–æ (–Ω–æ–≤—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π)", 0, 20, 8)
        bus_improvement = st.slider("–£–ª—É—á—à–µ–Ω–∏–µ –∞–≤—Ç–æ–±—É—Å–Ω–æ–π —Å–µ—Ç–∏ (%)", 0, 50, 25)
        public_transport_price = st.slider("–¶–µ–Ω–∞ –ø–æ–µ–∑–¥–∫–∏ –≤ –æ–±—â.—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ (—Ä—É–±)", 20, 80, 45)
        
        # –í–ª–∏—è–Ω–∏–µ –Ω–∞ ride-hailing
        coverage_impact = st.slider("–ü–æ–∫—Ä—ã—Ç–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ ride-hailing (%)", 30, 80, 55)
        
    with col2:
        st.markdown("**üöó –¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏**")
        
        current_aov = 350
        current_frequency = 4.2
        current_users = 150000
        price_elasticity = 2.1  # –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ —Ü–µ–Ω–µ
        
        st.metric("–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ ride-hailing", f"{current_aov} —Ä—É–±")
        st.metric("–¶–µ–Ω–∞ –æ–±—â.—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", f"{public_transport_price} —Ä—É–±")
        st.metric("–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω", f"{current_aov/public_transport_price:.1f}x")
    
    # –†–∞—Å—á–µ—Ç –≤–ª–∏—è–Ω–∏—è
    
    # Price advantage –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    price_ratio = current_aov / public_transport_price
    
    # –û—Ü–µ–Ω–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    # –≠–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å —Å–ø—Ä–æ—Å–∞: —á–µ–º –±–æ–ª—å—à–µ —Ä–∞–∑–Ω–∏—Ü–∞ –≤ —Ü–µ–Ω–µ, —Ç–µ–º –±–æ–ª—å—à–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Ç—Å—è
    demand_elasticity_effect = min(0.4, (price_ratio - 3) * 0.1)  # –ú–∞–∫—Å–∏–º—É–º 40% –º–æ–≥—É—Ç –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è
    
    # –í–ª–∏—è–Ω–∏–µ –ø–æ–∫—Ä—ã—Ç–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
    coverage_effect = (coverage_impact / 100) * 0.3  # –î–æ 30% –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–ª–∏—è–Ω–∏—è
    
    total_demand_loss = (demand_elasticity_effect + coverage_effect) * 100
    
    # –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –æ–±—â.—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    quality_multiplier = 1 + (bus_improvement / 100) * 0.5
    metro_effect = metro_expansion * 0.02  # –ö–∞–∂–¥–∞—è —Å—Ç–∞–Ω—Ü–∏—è = 2% –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–ª–∏—è–Ω–∏—è
    
    final_demand_loss = min(60, total_demand_loss * quality_multiplier + metro_effect * 100)
    
    # –í–ª–∏—è–Ω–∏–µ –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç—ã
    # –ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Å—Ç—Ä–∞–¥–∞—é—Ç –∫–æ—Ä–æ—Ç–∫–∏–µ –ø–æ–µ–∑–¥–∫–∏ –≤ —Ü–µ–Ω—Ç—Ä–µ
    short_trips_loss = final_demand_loss * 1.5
    long_trips_loss = final_demand_loss * 0.6
    premium_trips_loss = final_demand_loss * 0.3  # –ü—Ä–µ–º–∏—É–º —Å–µ–≥–º–µ–Ω—Ç –º–µ–Ω–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
    
    # –ù–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    new_users = current_users * (1 - final_demand_loss / 100)
    new_frequency = current_frequency * 0.95  # –ù–µ–±–æ–ª—å—à–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã
    
    # –ê–¥–∞–ø—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    st.subheader("üìä –°–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ")
    
    segments_data = {
        '–°–µ–≥–º–µ–Ω—Ç': ['–ö–æ—Ä–æ—Ç–∫–∏–µ –ø–æ–µ–∑–¥–∫–∏ (<3 –∫–º)', '–°—Ä–µ–¥–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏ (3-10 –∫–º)', 
                   '–î–ª–∏–Ω–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏ (>10 –∫–º)', '–ü—Ä–µ–º–∏—É–º —Å–µ–≥–º–µ–Ω—Ç'],
        '–ü–æ—Ç–µ—Ä—è —Å–ø—Ä–æ—Å–∞': [f"{short_trips_loss:.1f}%", f"{final_demand_loss:.1f}%", 
                         f"{long_trips_loss:.1f}%", f"{premium_trips_loss:.1f}%"],
        '–ü—Ä–∏—á–∏–Ω–∞': ['–ü—Ä—è–º–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è —Å –º–µ—Ç—Ä–æ/–∞–≤—Ç–æ–±—É—Å–æ–º', '–£–ª—É—á—à–µ–Ω–∏–µ —Å–≤—è–∑–Ω–æ—Å—Ç–∏', 
                   '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ', '–ù–∏–∑–∫–∞—è price sensitivity']
    }
    
    st.table(segments_data)
    
    # –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –≤–ª–∏—è–Ω–∏–µ
    col1, col2, col3 = st.columns(3)
    
    revenue_impact = ((new_users * new_frequency) - (current_users * current_frequency)) / (current_users * current_frequency) * 100
    
    with col1:
        st.metric("–ü–æ—Ç–µ—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", f"{current_users - new_users:,.0f}", 
                 f"{((new_users - current_users) / current_users * 100):+.1f}%")
    
    with col2:
        st.metric("–í–ª–∏—è–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–æ—Ç—É", f"{new_frequency:.1f}", 
                 f"{((new_frequency - current_frequency) / current_frequency * 100):+.1f}%")
    
    with col3:
        st.metric("–û–±—â–µ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –≤—ã—Ä—É—á–∫—É", f"{revenue_impact:+.1f}%", 
                 "Critical" if revenue_impact < -20 else "Moderate")
    
    # –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
    st.subheader("üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏")
    
    if revenue_impact < -25:
        st.error("üö® **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –≤–ª–∏—è–Ω–∏–µ** - –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
        strategies = [
            "**First/Last mile solution**: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º",
            "**Premium positioning**: –§–æ–∫—É—Å –Ω–∞ –∫–æ–º—Ñ–æ—Ä—Ç –∏ —Å–∫–æ—Ä–æ—Å—Ç—å vs —Ü–µ–Ω—É",
            "**Suburban expansion**: –†–∞–π–æ–Ω—ã —Å–æ —Å–ª–∞–±—ã–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º –æ–±—â.—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞",
            "**Multi-modal app**: –î–æ–±–∞–≤–∏—Ç—å –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
        ]
    elif revenue_impact < -15:
        st.warning("‚ö†Ô∏è **–°–µ—Ä—å–µ–∑–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ** - –Ω—É–∂–Ω–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏—è value proposition")
        strategies = [
            "**Time advantage**: –ê–∫—Ü–µ–Ω—Ç –Ω–∞ —ç–∫–æ–Ω–æ–º–∏–∏ –≤—Ä–µ–º–µ–Ω–∏",
            "**Weather positioning**: –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –≤ –ø–ª–æ—Ö—É—é –ø–æ–≥–æ–¥—É",
            "**Group rides**: –°–Ω–∏–∂–µ–Ω–∏–µ cost per person",
            "**Corporate segment**: B2B —Ä–µ—à–µ–Ω–∏—è"
        ]
    else:
        st.info("üìä **–£–º–µ—Ä–µ–Ω–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ** - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞")
        strategies = [
            "**Partnership opportunities**: –°–æ–≤–º–µ—Å—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è —Å –≥–æ—Ä–æ–¥–æ–º",
            "**Complementary service**: Ride-hailing + –æ–±—â.—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
            "**Quality differentiation**: –£–ª—É—á—à–µ–Ω–∏–µ user experience",
            "**New use cases**: –ü–æ–µ–∑–¥–∫–∏ –≤ rush hour, –Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è"
        ]
    
    for strategy in strategies:
        st.write(f"‚Ä¢ {strategy}")
    
    # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    st.markdown("""
    ### üí° –°–∫—Ä—ã—Ç—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    
    1. **Intermodal integration**: –°—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –≥–æ—Ä–æ–¥—Å–∫–æ–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã
    2. **Peak hour advantage**: –ö–æ–≥–¥–∞ –æ–±—â.—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω
    3. **Accessibility**: –î–ª—è –ª—é–¥–µ–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
    4. **Cargo/delivery**: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    5. **Data partnership**: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –º–æ–±–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –≥–æ—Ä–æ–¥–∞
    """)

def new_city_launch_scenario():
    """–ó–∞–ø—É—Å–∫ –≤ –Ω–æ–≤–æ–º –≥–æ—Ä–æ–¥–µ"""
    st.subheader("üöó –ó–∞–ø—É—Å–∫ –≤ –Ω–æ–≤–æ–º –≥–æ—Ä–æ–¥–µ")
    
    st.success("""
    **–°–∏—Ç—É–∞—Ü–∏—è**: –ü–ª–∞–Ω–∏—Ä—É–µ—Ç–µ launch –≤ –Ω–æ–≤–æ–º –≥–æ—Ä–æ–¥–µ. –ù—É–∂–Ω–æ —Å–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å unit economics, 
    –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø—Ä–æ–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –∏ timeline –¥–æ breakeven.
    """)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–æ—Ä–æ–¥–∞
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üèôÔ∏è –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≥–æ—Ä–æ–¥–∞**")
        
        city_population = st.number_input("–ù–∞—Å–µ–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞", 300000, 5000000, 1200000, 50000)
        car_penetration = st.slider("–ê–≤—Ç–æ–º–æ–±–∏–ª–∏–∑–∞—Ü–∏—è (–∞–≤—Ç–æ –Ω–∞ 1000 –∂–∏—Ç–µ–ª–µ–π)", 200, 600, 350)
        avg_income = st.number_input("–°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ (—Ä—É–±/–º–µ—Å—è—Ü)", 30000, 150000, 55000, 5000)
        public_transport_quality = st.slider("–ö–∞—á–µ—Å—Ç–≤–æ –æ–±—â.—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (1-10)", 1, 10, 5)
        
    with col2:
        st.markdown("**üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∑–∞–ø—É—Å–∫–∞**")
        
        launch_strategy = st.selectbox("–°—Ç—Ä–∞—Ç–µ–≥–∏—è –∑–∞–ø—É—Å–∫–∞:", 
                                     ["Aggressive (–±—ã—Å—Ç—Ä—ã–π –∑–∞—Ö–≤–∞—Ç)", "Moderate (–ø–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç)", 
                                      "Conservative (–æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–π –≤—Ö–æ–¥)"])
        
        initial_promo_budget = st.number_input("–ü—Ä–æ–º–æ-–±—é–¥–∂–µ—Ç –Ω–∞ launch (—Ä—É–±)", 1000000, 50000000, 8000000, 500000)
        target_market_share = st.slider("–¶–µ–ª–µ–≤–∞—è –¥–æ–ª—è —Ä—ã–Ω–∫–∞ —á–µ—Ä–µ–∑ –≥–æ–¥ (%)", 5, 40, 20)
        
        # –ö–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è
        existing_competitors = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤", 0, 5, 2)
    
    # –†–∞—Å—á–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ —Ä—ã–Ω–∫–∞
    
    # Addressable market
    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ 15-25% –Ω–∞—Å–µ–ª–µ–Ω–∏—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ride-hailing
    market_penetration_potential = 0.15 + (avg_income - 30000) / 120000 * 0.1  # Higher income = higher penetration
    market_penetration_potential = min(0.25, max(0.10, market_penetration_potential))
    
    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—â.—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (–ø–ª–æ—Ö–æ–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç = –±–æ–ª—å—à–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª)
    transport_multiplier = 1.5 - (public_transport_quality / 10) * 0.5
    
    # –ö–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è —Å–Ω–∏–∂–∞–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª
    competition_factor = 1 / (1 + existing_competitors * 0.2)
    
    total_addressable_market = city_population * market_penetration_potential * transport_multiplier * competition_factor
    
    # –ü—Ä–æ–≥–Ω–æ–∑ –º–µ—Ç—Ä–∏–∫
    estimated_frequency = 2.5 + (avg_income - 30000) / 60000  # –ë–æ–ª—å—à–µ –¥–æ—Ö–æ–¥—ã = –±–æ–ª—å—à–µ –ø–æ–µ–∑–¥–æ–∫
    estimated_frequency = min(5.0, max(1.5, estimated_frequency))
    
    estimated_aov = 200 + (avg_income - 30000) / 1000  # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –¥–æ—Ö–æ–¥–æ–≤
    estimated_aov = min(500, max(150, estimated_aov))
    
    # CAC –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏
    strategy_multipliers = {"Aggressive (–±—ã—Å—Ç—Ä—ã–π –∑–∞—Ö–≤–∞—Ç)": 2.0, "Moderate (–ø–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç)": 1.3, "Conservative (–æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–π –≤—Ö–æ–¥)": 1.0}
    base_cac = 800 + existing_competitors * 300
    estimated_cac = base_cac * strategy_multipliers[launch_strategy]
    
    # Timeline –∑–∞–ø—É—Å–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
    months_to_target = 12 if launch_strategy.startswith("Aggressive") else 18 if launch_strategy.startswith("Moderate") else 24
    
    # –†–∞—Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –º–µ—Å—è—Ü–∞–º
    target_users = total_addressable_market * (target_market_share / 100)
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    st.subheader("üìä –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä—ã–Ω–∫–∞")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä—ã–Ω–∫–∞", f"{total_addressable_market:,.0f}")
    
    with col2:
        st.metric("–¶–µ–ª–µ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", f"{target_users:,.0f}")
    
    with col3:
        st.metric("–ü—Ä–æ–≥–Ω–æ–∑ AOV", f"{estimated_aov:.0f} —Ä—É–±")
    
    with col4:
        st.metric("–ü—Ä–æ–≥–Ω–æ–∑ CAC", f"{estimated_cac:,.0f} —Ä—É–±")
    
    # –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –º–æ–¥–µ–ª—å –∑–∞–ø—É—Å–∫–∞
    create_launch_financial_model(target_users, estimated_aov, estimated_frequency, estimated_cac, 
                                 initial_promo_budget, months_to_target, launch_strategy)
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞–ø—É—Å–∫—É
    show_launch_recommendations(city_population, avg_income, public_transport_quality, 
                               existing_competitors, launch_strategy)

def create_launch_financial_model(target_users: float, aov: float, frequency: float, cac: float,
                                 promo_budget: int, months_to_target: int, strategy: str):
    """–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –º–æ–¥–µ–ª—å –∑–∞–ø—É—Å–∫–∞ –≤ –Ω–æ–≤–æ–º –≥–æ—Ä–æ–¥–µ"""
    
    st.subheader("üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –º–æ–¥–µ–ª—å –∑–∞–ø—É—Å–∫–∞")
    
    # –ö—Ä–∏–≤–∞—è —Ä–æ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    months = list(range(1, months_to_target + 1))
    
    # S-–æ–±—Ä–∞–∑–Ω–∞—è –∫—Ä–∏–≤–∞—è —Ä–æ—Å—Ç–∞
    if strategy.startswith("Aggressive"):
        # –ë—ã—Å—Ç—Ä—ã–π —Ä–æ—Å—Ç –≤ –Ω–∞—á–∞–ª–µ, –ø–æ—Ç–æ–º –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ
        users_curve = [target_users * (1 - np.exp(-3 * m / months_to_target)) for m in months]
    elif strategy.startswith("Moderate"):
        # –õ–∏–Ω–µ–π–Ω—ã–π —Ä–æ—Å—Ç
        users_curve = [target_users * m / months_to_target for m in months]
    else:
        # –ú–µ–¥–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ä—Ç, –ø–æ—Ç–æ–º —É—Å–∫–æ—Ä–µ–Ω–∏–µ
        users_curve = [target_users * (m / months_to_target) ** 1.5 for m in months]
    
    # –†–∞—Å—á–µ—Ç –ø–æ–º–µ—Å—è—á–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
    monthly_data = []
    cumulative_cac_spend = 0
    cumulative_revenue = 0
    
    for i, month in enumerate(months):
        current_users = users_curve[i]
        new_users = current_users if i == 0 else current_users - users_curve[i-1]
        
        # CAC spend
        monthly_cac_spend = new_users * cac
        cumulative_cac_spend += monthly_cac_spend
        
        # –ü—Ä–æ–º–æ —Ä–∞—Å—Ö–æ–¥—ã (–±–æ–ª—å—à–µ –≤ –Ω–∞—á–∞–ª–µ)
        promo_weight = 2 - (month / months_to_target)  # –û—Ç 2 –¥–æ 1
        monthly_promo = (promo_budget / months_to_target) * promo_weight
        
        # Revenue (—Å —É—á–µ—Ç–æ–º ramp-up –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
        # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –ø–µ—Ä–≤—ã–π –º–µ—Å—è—Ü –¥–µ–ª–∞—é—Ç —Ç–æ–ª—å–∫–æ 50% –æ—Ç –ø–æ–ª–Ω–æ–π —á–∞—Å—Ç–æ—Ç—ã
        active_users = current_users * 0.85  # 85% –∞–∫—Ç–∏–≤–Ω—ã –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü
        monthly_revenue = active_users * aov * frequency * 0.25  # 25% take rate
        cumulative_revenue += monthly_revenue
        
        # –ü—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å
        monthly_costs = monthly_cac_spend + monthly_promo + (current_users * 15)  # 15 —Ä—É–± ops cost –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        monthly_profit = monthly_revenue - monthly_costs
        
        monthly_data.append({
            'month': month,
            'users': current_users,
            'new_users': new_users,
            'revenue': monthly_revenue,
            'cac_spend': monthly_cac_spend,
            'promo_spend': monthly_promo,
            'profit': monthly_profit,
            'cumulative_revenue': cumulative_revenue,
            'cumulative_cac': cumulative_cac_spend
        })
    
    # –ì—Ä–∞—Ñ–∏–∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –º–æ–¥–µ–ª–∏
    df = pd.DataFrame(monthly_data)
    
    fig = make_subplots(
        rows=2, cols=2,
        subplot_titles=('–†–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', '–ú–µ—Å—è—á–Ω–∞—è –≤—ã—Ä—É—á–∫–∞ vs —Ä–∞—Å—Ö–æ–¥—ã',
                       '–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å', 'Breakeven –∞–Ω–∞–ª–∏–∑'),
        specs=[[{"secondary_y": False}, {"secondary_y": False}],
               [{"secondary_y": False}, {"secondary_y": False}]]
    )
    
    # –ì—Ä–∞—Ñ–∏–∫ 1: –†–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    fig.add_trace(
        go.Scatter(x=df['month'], y=df['users'], mode='lines+markers',
                  name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', line=dict(color='blue', width=3)),
        row=1, col=1
    )
    
    # –ì—Ä–∞—Ñ–∏–∫ 2: –í—ã—Ä—É—á–∫–∞ vs —Ä–∞—Å—Ö–æ–¥—ã
    fig.add_trace(
        go.Bar(x=df['month'], y=df['revenue'], name='–í—ã—Ä—É—á–∫–∞', marker_color='green'),
        row=1, col=2
    )
    fig.add_trace(
        go.Bar(x=df['month'], y=df['cac_spend'] + df['promo_spend'], name='–†–∞—Å—Ö–æ–¥—ã', marker_color='red'),
        row=1, col=2
    )
    
    # –ì—Ä–∞—Ñ–∏–∫ 3: –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å
    cumulative_profit = np.cumsum(df['profit'])
    fig.add_trace(
        go.Scatter(x=df['month'], y=cumulative_profit, mode='lines+markers',
                  name='–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å', line=dict(color='purple', width=3)),
        row=2, col=1
    )
    fig.add_hline(y=0, line_dash="dash", line_color="black", row=2, col=1)
    
    # –ì—Ä–∞—Ñ–∏–∫ 4: ROI
    cumulative_spend = df['cumulative_cac'] + np.cumsum(df['promo_spend'])
    roi = (df['cumulative_revenue'] - cumulative_spend) / cumulative_spend * 100
    fig.add_trace(
        go.Scatter(x=df['month'], y=roi, mode='lines+markers',
                  name='ROI (%)', line=dict(color='orange', width=3)),
        row=2, col=2
    )
    fig.add_hline(y=0, line_dash="dash", line_color="black", row=2, col=2)
    
    fig.update_layout(height=600, showlegend=False)
    fig.update_xaxes(title_text="–ú–µ—Å—è—Ü")
    fig.update_yaxes(title_text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", row=1, col=1)
    fig.update_yaxes(title_text="–†—É–±", row=1, col=2)
    fig.update_yaxes(title_text="–†—É–±", row=2, col=1)
    fig.update_yaxes(title_text="ROI (%)", row=2, col=2)
    
    st.plotly_chart(fig, use_container_width=True)
    
    # –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3 = st.columns(3)
    
    breakeven_month = None
    for i, profit in enumerate(cumulative_profit):
        if profit > 0:
            breakeven_month = i + 1
            break
    
    total_investment = cumulative_spend[-1]
    final_revenue = df['cumulative_revenue'].iloc[-1]
    final_roi = roi.iloc[-1]
    
    with col1:
        if breakeven_month:
            st.metric("Breakeven", f"{breakeven_month} –º–µ—Å—è—Ü")
        else:
            st.metric("Breakeven", "–ù–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç")
    
    with col2:
        st.metric("–û–±—â–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", f"{total_investment:,.0f} —Ä—É–±")
    
    with col3:
        color = "success" if final_roi > 50 else "warning" if final_roi > 0 else "error"
        st.markdown(f"""
        <div class="{color}-card">
            <h4>ROI —á–µ—Ä–µ–∑ {months_to_target} –º–µ—Å</h4>
            <h2>{final_roi:.1f}%</h2>
        </div>
        """, unsafe_allow_html=True)

def show_launch_recommendations(population: int, income: int, transport_quality: int,
                               competitors: int, strategy: str):
    """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞–ø—É—Å–∫—É"""
    
    st.subheader("üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞–ø—É—Å–∫—É")
    
    # –û—Ü–µ–Ω–∫–∞ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞
    attractiveness_score = 0
    
    # –†–∞–∑–º–µ—Ä —Ä—ã–Ω–∫–∞
    if population > 1_500_000:
        attractiveness_score += 3
    elif population > 800_000:
        attractiveness_score += 2
    else:
        attractiveness_score += 1
    
    # –î–æ—Ö–æ–¥—ã
    if income > 80_000:
        attractiveness_score += 3
    elif income > 50_000:
        attractiveness_score += 2
    else:
        attractiveness_score += 1
    
    # –û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç (—á–µ–º —Ö—É–∂–µ, —Ç–µ–º –ª—É—á—à–µ –¥–ª—è –Ω–∞—Å)
    if transport_quality < 4:
        attractiveness_score += 3
    elif transport_quality < 7:
        attractiveness_score += 2
    else:
        attractiveness_score += 1
    
    # –ö–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è (—á–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –ª—É—á—à–µ)
    if competitors == 0:
        attractiveness_score += 3
    elif competitors <= 2:
        attractiveness_score += 2
    else:
        attractiveness_score += 1
    
    # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è
    if attractiveness_score >= 10:
        st.success("üéØ **–í—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π —Ä—ã–Ω–æ–∫** - –æ—Ç–ª–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞")
        priority = "–í—ã—Å–æ–∫–∏–π"
    elif attractiveness_score >= 7:
        st.info("üìä **–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–π —Ä—ã–Ω–æ–∫** - —Ö–æ—Ä–æ—à–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
        priority = "–°—Ä–µ–¥–Ω–∏–π"
    else:
        st.warning("‚ö†Ô∏è **–°–ª–æ–∂–Ω—ã–π —Ä—ã–Ω–æ–∫** - —Ç—Ä–µ–±—É–µ—Ç –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –∏ –±–æ–ª—å—à–∏—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π")
        priority = "–ù–∏–∑–∫–∏–π"
    
    # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations = []
    
    if income < 50_000:
        recommendations.append("üéØ **Price-sensitive market**: –§–æ–∫—É—Å –Ω–∞ –Ω–∏–∑–∫–∏–µ —Ü–µ–Ω—ã –∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã")
    
    if transport_quality > 7:
        recommendations.append("üöá **Strong public transport**: –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∫ premium alternative")
    
    if competitors >= 3:
        recommendations.append("üÜö **High competition**: –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è value proposition")
    
    if population < 500_000:
        recommendations.append("üèòÔ∏è **Small market**: –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
    
    # –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ñ–∞–∑–∞–º
    phase_recommendations = {
        "Aggressive (–±—ã—Å—Ç—Ä—ã–π –∑–∞—Ö–≤–∞—Ç)": [
            "–ú–∞—Å—Å–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–∞–º–ø–∞–Ω–∏–∏ –≤ –ø–µ—Ä–≤—ã–µ 3 –º–µ—Å—è—Ü–∞",
            "Aggressive driver onboarding —Å –±–æ–Ω—É—Å–∞–º–∏",
            "PR –∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è buzz'–∞",
            "–ë—ã—Å—Ç—Ä–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∑–æ–Ω—ã –ø–æ–∫—Ä—ã—Ç–∏—è"
        ],
        "Moderate (–ø–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç)": [
            "–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø–æ —Ä–∞–π–æ–Ω–∞–º",
            "–§–æ–∫—É—Å –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–∞ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞",
            "Partnerships —Å –º–µ—Å—Ç–Ω—ã–º–∏ –±–∏–∑–Ω–µ—Å–∞–º–∏",
            "Organic growth —á–µ—Ä–µ–∑ word-of-mouth"
        ],
        "Conservative (–æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–π –≤—Ö–æ–¥)": [
            "Pilot –≤ –æ–¥–Ω–æ–º —Ä–∞–π–æ–Ω–µ –≥–æ—Ä–æ–¥–∞",
            "–ì–ª—É–±–æ–∫–æ–µ –∏–∑—É—á–µ–Ω–∏–µ local preferences",
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã, —Ñ–æ–∫—É—Å –Ω–∞ retention",
            "–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫–∞—Ö"
        ]
    }
    
    st.markdown(f"### üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ '{strategy}':")
    for rec in phase_recommendations[strategy]:
        st.write(f"‚Ä¢ {rec}")
    
    if recommendations:
        st.markdown("### üéØ –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        for rec in recommendations:
            st.write(f"‚Ä¢ {rec}")


import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
from datetime import datetime, timedelta
import random
from typing import Dict, List, Tuple, Optional

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
st.set_page_config(
    page_title="üöó Ride-Hailing LTV/CAC –°–∏–º—É–ª—è—Ç–æ—Ä",
    page_icon="üöó",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –°—Ç–∏–ª–∏
st.markdown("""
<style>
    .metric-card {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin: 0.5rem 0;
    }
    
    .warning-card {
        background: #ff6b6b;
        padding: 1rem;
        border-radius: 10px;
        color: white;
        text-align: center;
    }
    
    .success-card {
        background: #51cf66;
        padding: 1rem;
        border-radius: 10px;
        color: white;
        text-align: center;
    }
    
    .city-card {
        background: #f8f9fa;
        border: 2px solid #e1e5e9;
        border-radius: 10px;
        padding: 1rem;
        margin: 0.5rem 0;
    }
</style>
""", unsafe_allow_html=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
if 'scenario_results' not in st.session_state:
    st.session_state.scenario_results = []

if 'city_data' not in st.session_state:
    st.session_state.city_data = {}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    st.title("üöó Ride-Hailing LTV/CAC –°–∏–º—É–ª—è—Ç–æ—Ä")
    st.markdown("**–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ unit economics –≤ –∫–∞—Ä—à–µ—Ä–∏–Ω–≥–µ –∏ —Ç–∞–∫—Å–∏**")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    with st.sidebar:
        st.header("üéØ –†–µ–∂–∏–º—ã –∞–Ω–∞–ª–∏–∑–∞")
        mode = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
            [
                "üìä Unit Economics –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä",
                "üèôÔ∏è –ê–Ω–∞–ª–∏–∑ –ø–æ –≥–æ—Ä–æ–¥–∞–º", 
                "üìà –ö–æ–≥–æ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞–π–¥–µ—Ä–æ–≤",
                "üé™ –°—Ü–µ–Ω–∞—Ä–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
                "üí∞ –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤",
                "üöÄ –°—Ç—Ä–∞—Ç–µ–≥–∏—è —ç–∫—Å–ø–∞–Ω—Å–∏–∏",
                "üìö –ö–µ–π—Å—ã –∏–∑ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏"
            ]
        )
        
        st.markdown("---")
        show_ride_hailing_sidebar()
    
    # –†–æ—É—Ç–∏–Ω–≥
    if mode == "üìä Unit Economics –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä":
        unit_economics_calculator()
    elif mode == "üèôÔ∏è –ê–Ω–∞–ª–∏–∑ –ø–æ –≥–æ—Ä–æ–¥–∞–º":
        city_analysis_mode()
    elif mode == "üìà –ö–æ–≥–æ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞–π–¥–µ—Ä–æ–≤":
        rider_cohort_analysis()
    elif mode == "üé™ –°—Ü–µ–Ω–∞—Ä–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ":
        ride_hailing_scenarios()
    elif mode == "üí∞ –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤":
        promo_optimizer()
    elif mode == "üöÄ –°—Ç—Ä–∞—Ç–µ–≥–∏—è —ç–∫—Å–ø–∞–Ω—Å–∏–∏":
        expansion_strategy()
    elif mode == "üìö –ö–µ–π—Å—ã –∏–∑ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏":
        industry_cases()

def show_ride_hailing_sidebar():
    """–°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è ride-hailing"""
    with st.expander("üìñ Ride-Hailing –º–µ—Ç—Ä–∏–∫–∏"):
        st.markdown("""
        **AOV** - Average Order Value (—Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ –ø–æ–µ–∑–¥–∫–∏)
        **Take Rate** - –∫–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —Å –ø–æ–µ–∑–¥–∫–∏
        **–ß–∞—Å—Ç–æ—Ç–∞** - –ø–æ–µ–∑–¥–æ–∫ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ—Å—è—Ü
        **Time to 2nd ride** - –≤—Ä–µ–º—è –¥–æ –≤—Ç–æ—Ä–æ–π –ø–æ–µ–∑–¥–∫–∏
        **Monthly Active Users** - –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –º–µ—Å—è—Ü
        **Supply/Demand balance** - –±–∞–ª–∞–Ω—Å –≤–æ–¥–∏—Ç–µ–ª–µ–π –∏ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤
        **Surge pricing** - –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
        **–ü—Ä–æ–º–æ–∫–æ–¥—ã** - —Å—É–±—Å–∏–¥–∏–∏ –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """)
    
    with st.expander("üéØ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏"):
        st.markdown("""
        **–î–≤—É—Ö—Å—Ç–æ—Ä–æ–Ω–Ω—è—è –º–æ–¥–µ–ª—å**: –≤–æ–¥–∏—Ç–µ–ª–∏ + –ø–∞—Å—Å–∞–∂–∏—Ä—ã
        **–°–µ—Ç–µ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã**: –±–æ–ª—å—à–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π ‚Üí –±–æ–ª—å—à–µ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤
        **–ü–ª–æ—Ç–Ω–æ—Å—Ç—å**: –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –≤ –∫—Ä—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö
        **–ü–∏–∫–æ–≤—ã–µ —á–∞—Å—ã**: rush hours, –≤—ã—Ö–æ–¥–Ω—ã–µ, –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
        **–ö–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è**: –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–∞–º–ø–∞–Ω–∏–∏
        **–†–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ**: –ª–∏—Ü–µ–Ω–∑–∏–∏, –Ω–∞–ª–æ–≥–∏, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        """)

def unit_economics_calculator():
    """–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä Unit Economics –¥–ª—è ride-hailing"""
    st.header("üìä Unit Economics –¥–ª—è Ride-Hailing")
    
    st.markdown("""
    **–°–ø–µ—Ü–∏—Ñ–∏–∫–∞ ride-hailing**: –≤–º–µ—Å—Ç–æ –ø–æ–¥–ø–∏—Å–æ–∫ —É –Ω–∞—Å –ø–æ–µ–∑–¥–∫–∏, –≤–º–µ—Å—Ç–æ –≤–∞–ª–æ–≤–æ–π –º–∞—Ä–∂–∏ - take rate, 
    –∫–ª—é—á–µ–≤–∞—è –º–µ—Ç—Ä–∏–∫–∞ - —á–∞—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
    """)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üöó –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–µ–∑–¥–æ–∫")
        
        aov = st.slider("–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –ø–æ–µ–∑–¥–∫–∏ (AOV)", 150, 800, 350, 25)
        take_rate = st.slider("Take rate (%)", 15, 35, 25, 1)
        monthly_frequency = st.slider("–ü–æ–µ–∑–¥–æ–∫ –≤ –º–µ—Å—è—Ü –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", 1, 20, 4, 1)
        monthly_churn = st.slider("–ú–µ—Å—è—á–Ω—ã–π –æ—Ç—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (%)", 5, 25, 12, 1)
        
        # –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        ops_costs = st.slider("–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/–º–µ—Å—è—Ü", 10, 100, 30, 5)
        
        # –†–∞—Å—á–µ—Ç LTV
        monthly_revenue = aov * (take_rate / 100) * monthly_frequency
        monthly_profit = monthly_revenue - ops_costs
        ltv = monthly_profit / (monthly_churn / 100)
        
        st.markdown(f"""
        <div class="metric-card">
            <h3>LTV –ø–∞—Å—Å–∞–∂–∏—Ä–∞: {ltv:,.0f} —Ä—É–±</h3>
            <p>–ú–µ—Å—è—á–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {monthly_profit:,.0f} —Ä—É–±</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.subheader("üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è")
        
        # CAC —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
        marketing_spend = st.number_input("–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–π –±—é–¥–∂–µ—Ç (—Ä—É–±)", 500000, 20000000, 2000000, 100000)
        promo_budget = st.number_input("–ë—é–¥–∂–µ—Ç –Ω–∞ –ø—Ä–æ–º–æ–∫–æ–¥—ã (—Ä—É–±)", 200000, 10000000, 1000000, 100000)
        new_users = st.number_input("–ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", 500, 10000, 2000, 100)
        
        # –†–∞—Å—á–µ—Ç –ø–æ–ª–Ω–æ–≥–æ CAC
        total_acquisition_cost = marketing_spend + promo_budget
        cac_total = total_acquisition_cost / new_users
        cac_marketing = marketing_spend / new_users
        cac_promo = promo_budget / new_users
        
        st.markdown(f"""
        <div class="metric-card">
            <h3>–ü–æ–ª–Ω—ã–π CAC: {cac_total:,.0f} —Ä—É–±</h3>
            <p>–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥: {cac_marketing:,.0f} | –ü—Ä–æ–º–æ: {cac_promo:,.0f}</p>
        </div>
        """, unsafe_allow_html=True)
    
    # –ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π
    st.subheader("üìà –ê–Ω–∞–ª–∏–∑ Unit Economics")
    
    col1, col2, col3, col4 = st.columns(4)
    
    ltv_cac_ratio = ltv / cac_total
    payback_months = cac_total / monthly_profit if monthly_profit > 0 else float('inf')
    
    # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è ride-hailing
    revenue_per_ride = aov * (take_rate / 100)
    rides_to_payback = cac_total / revenue_per_ride if revenue_per_ride > 0 else float('inf')
    
    with col1:
        color = "success" if ltv_cac_ratio >= 3 else "warning" if ltv_cac_ratio >= 2 else "error"
        st.markdown(f"""
        <div class="{color}-card">
            <h4>LTV/CAC</h4>
            <h2>{ltv_cac_ratio:.1f}:1</h2>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        color = "success" if payback_months <= 6 else "warning" if payback_months <= 12 else "error"
        st.markdown(f"""
        <div class="{color}-card">
            <h4>–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å</h4>
            <h2>{payback_months:.1f} –º–µ—Å</h2>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown(f"""
        <div class="metric-card">
            <h4>–î–æ—Ö–æ–¥ —Å –ø–æ–µ–∑–¥–∫–∏</h4>
            <h2>{revenue_per_ride:.0f} —Ä—É–±</h2>
        </div>
        """, unsafe_allow_html=True)
    
    with col4:
        color = "success" if rides_to_payback <= 20 else "warning" if rides_to_payback <= 40 else "error"
        st.markdown(f"""
        <div class="{color}-card">
            <h4>–ü–æ–µ–∑–¥–æ–∫ –¥–æ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏</h4>
            <h2>{rides_to_payback:.0f}</h2>
        </div>
        """, unsafe_allow_html=True)
    
    # –ê–Ω–∞–ª–∏–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è ride-hailing
    create_ride_hailing_sensitivity_chart(aov, take_rate, monthly_frequency, monthly_churn, cac_total)
    
    # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è
    show_ride_hailing_interpretation(ltv_cac_ratio, payback_months, rides_to_payback, monthly_frequency)

def create_ride_hailing_sensitivity_chart(aov: float, take_rate: float, frequency: float, churn: float, cac: float):
    """–ì—Ä–∞—Ñ–∏–∫ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è ride-hailing –º–µ—Ç—Ä–∏–∫"""
    st.subheader("üéØ –ê–Ω–∞–ª–∏–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ride-hailing –º–µ—Ç—Ä–∏–∫")
    
    # –í–∞—Ä–∏–∞—Ü–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    frequency_range = np.linspace(frequency * 0.5, frequency * 2, 20)
    take_rate_range = np.linspace(take_rate * 0.7, take_rate * 1.4, 20)
    aov_range = np.linspace(aov * 0.8, aov * 1.3, 20)
    
    # –†–∞—Å—á–µ—Ç LTV –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    ltv_frequency = [(aov * (take_rate / 100) * f - 30) / (churn / 100) for f in frequency_range]
    ltv_take_rate = [(aov * (tr / 100) * frequency - 30) / (churn / 100) for tr in take_rate_range]
    ltv_aov = [(a * (take_rate / 100) * frequency - 30) / (churn / 100) for a in aov_range]
    
    # –ì—Ä–∞—Ñ–∏–∫ —Å —Ç—Ä–µ–º—è subplot'–∞–º–∏
    fig = make_subplots(
        rows=2, cols=2,
        subplot_titles=('–í–ª–∏—è–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –ø–æ–µ–∑–¥–æ–∫', '–í–ª–∏—è–Ω–∏–µ take rate', 
                       '–í–ª–∏—è–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞', '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–æ–≤'),
        specs=[[{"colspan": 1}, {"colspan": 1}], 
               [{"colspan": 1}, {"colspan": 1}]]
    )
    
    # –ì—Ä–∞—Ñ–∏–∫ 1: –ß–∞—Å—Ç–æ—Ç–∞ –ø–æ–µ–∑–¥–æ–∫
    fig.add_trace(
        go.Scatter(x=frequency_range, y=ltv_frequency, mode='lines+markers',
                  name='LTV –æ—Ç —á–∞—Å—Ç–æ—Ç—ã', line=dict(color='blue', width=3)),
        row=1, col=1
    )
    
    # –ì—Ä–∞—Ñ–∏–∫ 2: Take rate
    fig.add_trace(
        go.Scatter(x=take_rate_range, y=ltv_take_rate, mode='lines+markers',
                  name='LTV –æ—Ç take rate', line=dict(color='green', width=3)),
        row=1, col=2
    )
    
    # –ì—Ä–∞—Ñ–∏–∫ 3: AOV
    fig.add_trace(
        go.Scatter(x=aov_range, y=ltv_aov, mode='lines+markers',
                  name='LTV –æ—Ç AOV', line=dict(color='orange', width=3)),
        row=2, col=1
    )
    
    # –ì—Ä–∞—Ñ–∏–∫ 4: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —ç–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
    elasticity_data = {
        '–ü–∞—Ä–∞–º–µ—Ç—Ä': ['–ß–∞—Å—Ç–æ—Ç–∞ –ø–æ–µ–∑–¥–æ–∫', 'Take Rate', '–°—Ä–µ–¥–Ω–∏–π —á–µ–∫'],
        '–≠–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å': [
            (max(ltv_frequency) - min(ltv_frequency)) / min(ltv_frequency),
            (max(ltv_take_rate) - min(ltv_take_rate)) / min(ltv_take_rate),
            (max(ltv_aov) - min(ltv_aov)) / min(ltv_aov)
        ]
    }
    
    fig.add_trace(
        go.Bar(x=elasticity_data['–ü–∞—Ä–∞–º–µ—Ç—Ä'], y=elasticity_data['–≠–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å'],
               marker_color=['blue', 'green', 'orange']),
        row=2, col=2
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏—é CAC
    for i in range(1, 4):
        row = 1 if i <= 2 else 2
        col = i if i <= 2 else i - 2
        fig.add_hline(y=cac, line_dash="dash", line_color="red", 
                     annotation_text=f"CAC = {cac:,.0f}", row=row, col=col)
    
    fig.update_layout(height=600, showlegend=False)
    fig.update_xaxes(title_text="–ü–æ–µ–∑–¥–æ–∫/–º–µ—Å—è—Ü", row=1, col=1)
    fig.update_xaxes(title_text="Take Rate (%)", row=1, col=2)
    fig.update_xaxes(title_text="AOV (—Ä—É–±)", row=2, col=1)
    fig.update_xaxes(title_text="–ü–∞—Ä–∞–º–µ—Ç—Ä", row=2, col=2)
    fig.update_yaxes(title_text="LTV (—Ä—É–±)")
    
    st.plotly_chart(fig, use_container_width=True)
    
    # –ò–Ω—Å–∞–π—Ç—ã –¥–ª—è ride-hailing
    st.info(f"""
    üí° **–ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã –¥–ª—è ride-hailing**:
    
    1. **–ß–∞—Å—Ç–æ—Ç–∞ - –∫–æ—Ä–æ–ª—å**: –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–æ–µ–∑–¥–æ–∫ —Å {frequency} –¥–æ {frequency*1.5:.1f} –≤ –º–µ—Å—è—Ü 
       –ø–æ–≤—ã—à–∞–µ—Ç LTV –Ω–∞ {((max(ltv_frequency)/min(ltv_frequency) - 1) * 100):.0f}%
    
    2. **Take rate –∏–º–µ–µ—Ç –ø—Ä–µ–¥–µ–ª—ã**: –ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç LTV, –Ω–æ —Å–Ω–∏–∂–∞–µ—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
    
    3. **AOV –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø—Ä–æ–¥—É–∫—Ç–∞**: –ü—Ä–µ–º–∏—É–º-—Å–µ–≥–º–µ–Ω—Ç vs —ç–∫–æ–Ω–æ–º –≤–ª–∏—è–µ—Ç –Ω–∞ —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫
    
    4. **–§–æ–∫—É—Å –Ω–∞ habit forming**: –ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å occasional users –≤ power users –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ
    """)

def show_ride_hailing_interpretation(ltv_cac_ratio: float, payback_months: float, 
                                   rides_to_payback: float, frequency: float):
    """–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è ride-hailing"""
    st.subheader("üß† –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –¥–ª—è ride-hailing –±–∏–∑–Ω–µ—Å–∞")
    
    if ltv_cac_ratio >= 4:
        st.success("üéâ **–û—Ç–ª–∏—á–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏!** Unit economics –∑–¥–æ—Ä–æ–≤—ã–µ, –º–æ–∂–Ω–æ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
    elif ltv_cac_ratio >= 2.5:
        st.info("üëç **–ü—Ä–∏–µ–º–ª–µ–º—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏.** –ï—Å—Ç—å –º–µ—Å—Ç–æ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —á–∞—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.")
    elif ltv_cac_ratio >= 1.5:
        st.warning("‚ö†Ô∏è **–ù–∞ –≥—Ä–∞–Ω–∏ —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏.** –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å retention –∏ —á–∞—Å—Ç–æ—Ç—É.")
    else:
        st.error("üö® **–£–±—ã—Ç–æ—á–Ω–∞—è –º–æ–¥–µ–ª—å!** –ü–µ—Ä–µ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –∏ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.")
    
    # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è ride-hailing
    if frequency < 3:
        st.warning("üìä **–ù–∏–∑–∫–∞—è —á–∞—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.** –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ loyalty –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
    
    if rides_to_payback > 30:
        st.error("üö® **–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–µ–∑–¥–æ–∫ –¥–æ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏.** –°–Ω–∏–∂–∞–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –∏–ª–∏ —É–ª—É—á—à–∞–π—Ç–µ retention.")
    elif rides_to_payback <= 15:
        st.success("üí∞ **–ë—ã—Å—Ç—Ä–∞—è –æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å –≤ –ø–æ–µ–∑–¥–∫–∞—Ö** - –æ—Ç–ª–∏—á–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è.")
    
    # –ò–Ω–¥—É—Å—Ç—Ä–∏–∞–ª—å–Ω—ã–µ –±–µ–Ω—á–º–∞—Ä–∫–∏
    st.markdown("""
    ### üìä –ë–µ–Ω—á–º–∞—Ä–∫–∏ ride-hailing –∏–Ω–¥—É—Å—Ç—Ä–∏–∏:
    
    **LTV/CAC —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è:**
    - üü¢ Mature markets: 3-5:1
    - üü° Growing markets: 2-3:1  
    - üî¥ New markets: 1.5-2:1 (–¥–æ–ø—É—Å—Ç–∏–º–æ –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–º —Ä–æ—Å—Ç–µ)
    
    **–ü–æ–µ–∑–¥–æ–∫ –¥–æ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏:**
    - üü¢ 10-20 –ø–æ–µ–∑–¥–æ–∫ (–æ—Ç–ª–∏—á–Ω–æ)
    - üü° 20-30 –ø–æ–µ–∑–¥–æ–∫ (–ø—Ä–∏–µ–º–ª–µ–º–æ)
    - üî¥ 30+ –ø–æ–µ–∑–¥–æ–∫ (–ø—Ä–æ–±–ª–µ–º–∞)
    
    **–ß–∞—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
    - üü¢ Power users: 8+ –ø–æ–µ–∑–¥–æ–∫/–º–µ—Å—è—Ü
    - üü° Regular users: 3-7 –ø–æ–µ–∑–¥–æ–∫/–º–µ—Å—è—Ü
    - üî¥ Occasional users: 1-2 –ø–æ–µ–∑–¥–∫–∏/–º–µ—Å—è—Ü
    """)

def city_analysis_mode():
    """–ê–Ω–∞–ª–∏–∑ –ø–æ –≥–æ—Ä–æ–¥–∞–º"""
    st.header("üèôÔ∏è –ê–Ω–∞–ª–∏–∑ –ø–æ –≥–æ—Ä–æ–¥–∞–º")
    
    st.markdown("""
    **–ì–æ—Ä–æ–¥—Å–∫–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞**: —Ä–∞–∑–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –∏–º–µ—é—Ç –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ —Ä–∞–∑–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏–∑-–∑–∞ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏, 
    –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏, –ø–æ–∫—É–ø–∞—Ç–µ–ª—å–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã.
    """)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä–æ–¥–æ–≤
    cities_data = setup_cities_data()
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤
    create_cities_comparison_chart(cities_data)
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ —Å—Ç–∞–¥–∏—è–º —Ä–∞–∑–≤–∏—Ç–∏—è
    analyze_city_maturity(cities_data)
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≥–æ—Ä–æ–¥–∞–º
    show_city_recommendations(cities_data)

def setup_cities_data() -> Dict:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –≥–æ—Ä–æ–¥–∞–º"""
    st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ—Ç—Ä–∏–∫ –ø–æ –≥–æ—Ä–æ–¥–∞–º")
    
    # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤
    default_cities = {
        "–ú–æ—Å–∫–≤–∞": {
            "population": 12_500_000, "aov": 420, "frequency": 6.2, "take_rate": 28,
            "cac": 1800, "competition": 9, "maturity": "–ó—Ä–µ–ª—ã–π"
        },
        "–°–ü–±": {
            "population": 5_400_000, "aov": 380, "frequency": 4.8, "take_rate": 26,
            "cac": 1400, "competition": 8, "maturity": "–ó—Ä–µ–ª—ã–π"
        },
        "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": {
            "population": 1_600_000, "aov": 280, "frequency": 3.2, "take_rate": 24,
            "cac": 900, "competition": 5, "maturity": "–†–∞—Å—Ç—É—â–∏–π"
        },
        "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥": {
            "population": 1_500_000, "aov": 310, "frequency": 3.8, "take_rate": 25,
            "cac": 1100, "competition": 6, "maturity": "–†–∞—Å—Ç—É—â–∏–π"
        },
        "–ö–∞–∑–∞–Ω—å": {
            "population": 1_300_000, "aov": 260, "frequency": 2.9, "take_rate": 23,
            "cac": 800, "competition": 4, "maturity": "–†–∞–∑–≤–∏–≤–∞—é—â–∏–π—Å—è"
        },
        "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä": {
            "population": 900_000, "aov": 240, "frequency": 2.1, "take_rate": 22,
            "cac": 650, "competition": 3, "maturity": "–†–∞–∑–≤–∏–≤–∞—é—â–∏–π—Å—è"
        }
    }
    
    selected_cities = st.multiselect(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
        list(default_cities.keys()),
        default=["–ú–æ—Å–∫–≤–∞", "–°–ü–±", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ö–∞–∑–∞–Ω—å"]
    )
    
    if not selected_cities:
        selected_cities = ["–ú–æ—Å–∫–≤–∞", "–°–ü–±"]
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    cities_analysis = {}
    for city in selected_cities:
        data = default_cities[city].copy()
        
        # –†–∞—Å—á–µ—Ç LTV –∏ –¥—Ä—É–≥–∏—Ö –º–µ—Ç—Ä–∏–∫
        monthly_revenue = data['aov'] * data['take_rate'] / 100 * data['frequency']
        ops_cost = 25  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
        monthly_profit = monthly_revenue - ops_cost
        
        # Churn –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∑—Ä–µ–ª–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞
        churn_rates = {"–ó—Ä–µ–ª—ã–π": 10, "–†–∞—Å—Ç—É—â–∏–π": 12, "–†–∞–∑–≤–∏–≤–∞—é—â–∏–π—Å—è": 15}
        churn = churn_rates[data['maturity']]
        
        ltv = monthly_profit / (churn / 100)
        ltv_cac_ratio = ltv / data['cac']
        
        cities_analysis[city] = {
            **data,
            'monthly_revenue': monthly_revenue,
            'monthly_profit': monthly_profit,
            'churn': churn,
            'ltv': ltv,
            'ltv_cac_ratio': ltv_cac_ratio,
            'market_potential': data['population'] * 0.15 * data['frequency']  # 15% penetration
        }
    
    return cities_analysis

def create_cities_comparison_chart(cities_data: Dict):
    """–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≥–æ—Ä–æ–¥–æ–≤"""
    st.subheader("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤")
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    cities = list(cities_data.keys())
    ltv_values = [cities_data[city]['ltv'] for city in cities]
    cac_values = [cities_data[city]['cac'] for city in cities]
    populations = [cities_data[city]['population'] for city in cities]
    frequencies = [cities_data[city]['frequency'] for city in cities]
    
    # Bubble chart
    fig = go.Figure()
    
    # –¶–≤–µ—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –ø–æ —Å—Ç–∞–¥–∏–∏ –∑—Ä–µ–ª–æ—Å—Ç–∏
    maturity_colors = {"–ó—Ä–µ–ª—ã–π": "green", "–†–∞—Å—Ç—É—â–∏–π": "orange", "–†–∞–∑–≤–∏–≤–∞—é—â–∏–π—Å—è": "red"}
    colors = [maturity_colors[cities_data[city]['maturity']] for city in cities]
    
    fig.add_trace(go.Scatter(
        x=cac_values,
        y=ltv_values,
        mode='markers+text',
        text=cities,
        textposition="middle center",
        marker=dict(
            size=[p/100000 for p in populations],  # –†–∞–∑–º–µ—Ä = –Ω–∞—Å–µ–ª–µ–Ω–∏–µ
            color=colors,
            line=dict(width=2, color='black'),
            sizemode='diameter',
            sizeref=2.*max([p/100000 for p in populations])/(40.**2),
            sizemin=10
        ),
        hovertemplate='<b>%{text}</b><br>' +
                      'CAC: %{x:,.0f} —Ä—É–±<br>' +
                      'LTV: %{y:,.0f} —Ä—É–±<br>' +
                      '<extra></extra>'
    ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏–∏-–æ—Ä–∏–µ–Ω—Ç–∏—Ä—ã
    max_val = max(max(ltv_values), max(cac_values))
    
    # –õ–∏–Ω–∏—è LTV = CAC (1:1)
    fig.add_shape(type="line", x0=0, x1=max_val, y0=0, y1=max_val,
                  line=dict(color="red", width=2, dash="dash"))
    
    # –õ–∏–Ω–∏—è LTV = 3*CAC (3:1)
    fig.add_shape(type="line", x0=0, x1=max_val/3, y0=0, y1=max_val,
                  line=dict(color="green", width=2, dash="dash"))
    
    fig.update_layout(
        title="–†–∞–∑–º–µ—Ä –ø—É–∑—ã—Ä—è = –Ω–∞—Å–µ–ª–µ–Ω–∏–µ, —Ü–≤–µ—Ç = —Å—Ç–∞–¥–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è —Ä—ã–Ω–∫–∞",
        xaxis_title="CAC (—Ä—É–±)",
        yaxis_title="LTV (—Ä—É–±)",
        height=500
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
    fig.add_annotation(x=max_val*0.8, y=max_val*0.85, text="LTV = CAC (1:1)",
                      showarrow=False, font=dict(color="red"))
    fig.add_annotation(x=max_val*0.25, y=max_val*0.85, text="LTV = 3√óCAC (3:1)",
                      showarrow=False, font=dict(color="green"))
    
    st.plotly_chart(fig, use_container_width=True)
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤")
    
    comparison_df = pd.DataFrame([
        {
            '–ì–æ—Ä–æ–¥': city,
            '–ù–∞—Å–µ–ª–µ–Ω–∏–µ': f"{data['population']:,}",
            'AOV': f"{data['aov']} —Ä—É–±",
            '–ß–∞—Å—Ç–æ—Ç–∞': f"{data['frequency']:.1f}",
            'Take Rate': f"{data['take_rate']}%",
            'CAC': f"{data['cac']:,} —Ä—É–±",
            'LTV': f"{data['ltv']:,.0f} —Ä—É–±",
            'LTV/CAC': f"{data['ltv_cac_ratio']:.1f}:1",
            '–°—Ç–∞–¥–∏—è': data['maturity'],
            '–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä—ã–Ω–∫–∞': f"{data['market_potential']:,.0f}"
        }
        for city, data in cities_data.items()
    ])
    
    st.dataframe(comparison_df, use_container_width=True)

def analyze_city_maturity(cities_data: Dict):
    """–ê–Ω–∞–ª–∏–∑ –ø–æ —Å—Ç–∞–¥–∏—è–º –∑—Ä–µ–ª–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞"""
    st.subheader("üìà –ê–Ω–∞–ª–∏–∑ –ø–æ —Å—Ç–∞–¥–∏—è–º —Ä–∞–∑–≤–∏—Ç–∏—è —Ä—ã–Ω–∫–∞")
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç–∞–¥–∏—è–º
    maturity_groups = {}
    for city, data in cities_data.items():
        stage = data['maturity']
        if stage not in maturity_groups:
            maturity_groups[stage] = []
        maturity_groups[stage].append(data)
    
    # –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ —Å—Ç–∞–¥–∏—è–º
    fig = make_subplots(
        rows=2, cols=2,
        subplot_titles=('–°—Ä–µ–¥–Ω–∏–π LTV/CAC –ø–æ —Å—Ç–∞–¥–∏—è–º', '–°—Ä–µ–¥–Ω–∏–π CAC',
                       '–ß–∞—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è', 'Take Rate'),
        specs=[[{"type": "bar"}, {"type": "bar"}],
               [{"type": "bar"}, {"type": "bar"}]]
    )
    
    stages = list(maturity_groups.keys())
    colors = ['red', 'orange', 'green']
    
    for i, stage in enumerate(stages):
        stage_data = maturity_groups[stage]
        avg_ltv_cac = np.mean([d['ltv_cac_ratio'] for d in stage_data])
        avg_cac = np.mean([d['cac'] for d in stage_data])
        avg_frequency = np.mean([d['frequency'] for d in stage_data])
        avg_take_rate = np.mean([d['take_rate'] for d in stage_data])
        
        fig.add_trace(go.Bar(x=[stage], y=[avg_ltv_cac], 
                            marker_color=colors[i % len(colors)], showlegend=False), 
                     row=1, col=1)
        fig.add_trace(go.Bar(x=[stage], y=[avg_cac], 
                            marker_color=colors[i % len(colors)], showlegend=False), 
                     row=1, col=2)
        fig.add_trace(go.Bar(x=[stage], y=[avg_frequency], 
                            marker_color=colors[i % len(colors)], showlegend=False), 
                     row=2, col=1)
        fig.add_trace(go.Bar(x=[stage], y=[avg_take_rate], 
                            marker_color=colors[i % len(colors)], showlegend=False), 
                     row=2, col=2)
    
    fig.update_layout(height=600)
    fig.update_yaxes(title_text="LTV/CAC", row=1, col=1)
    fig.update_yaxes(title_text="CAC (—Ä—É–±)", row=1, col=2)
    fig.update_yaxes(title_text="–ü–æ–µ–∑–¥–æ–∫/–º–µ—Å—è—Ü", row=2, col=1)
    fig.update_yaxes(title_text="Take Rate (%)", row=2, col=2)
    
    st.plotly_chart(fig, use_container_width=True)

def show_city_recommendations(cities_data: Dict):
    """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≥–æ—Ä–æ–¥–∞–º"""
    st.subheader("üí° –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    
    # –ê–Ω–∞–ª–∏–∑ –ª—É—á—à–∏—Ö –∏ —Ö—É–¥—à–∏—Ö –≥–æ—Ä–æ–¥–æ–≤
    best_city = max(cities_data.keys(), key=lambda x: cities_data[x]['ltv_cac_ratio'])
    worst_city = min(cities_data.keys(), key=lambda x: cities_data[x]['ltv_cac_ratio'])
    
    highest_potential = max(cities_data.keys(), key=lambda x: cities_data[x]['market_potential'])
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### üü¢ –õ—É—á—à–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
        best_data = cities_data[best_city]
        st.success(f"""
        **{best_city}**: LTV/CAC = {best_data['ltv_cac_ratio']:.1f}:1
        
        ‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞: {best_data['frequency']:.1f} –ø–æ–µ–∑–¥–æ–∫/–º–µ—Å—è—Ü
        ‚Ä¢ AOV: {best_data['aov']} —Ä—É–±
        ‚Ä¢ –ó—Ä–µ–ª–æ—Å—Ç—å —Ä—ã–Ω–∫–∞: {best_data['maturity']}
        
        **–°—Ç—Ä–∞—Ç–µ–≥–∏—è**: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        """)
        
        st.markdown("#### üöÄ –ù–∞–∏–±–æ–ª—å—à–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª")
        potential_data = cities_data[highest_potential]
        st.info(f"""
        **{highest_potential}**: –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª {potential_data['market_potential']:,.0f}
        
        ‚Ä¢ –ù–∞—Å–µ–ª–µ–Ω–∏–µ: {potential_data['population']:,}
        ‚Ä¢ –¢–µ–∫—É—â–∏–π CAC: {potential_data['cac']:,} —Ä—É–±
        ‚Ä¢ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è: {potential_data['competition']}/10
        """)
    
    with col2:
        st.markdown("#### üî¥ –¢—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è")
        worst_data = cities_data[worst_city]
        st.warning(f"""
        **{worst_city}**: LTV/CAC = {worst_data['ltv_cac_ratio']:.1f}:1
        
        ‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞: {worst_data['frequency']:.1f} –ø–æ–µ–∑–¥–æ–∫/–º–µ—Å—è—Ü
        ‚Ä¢ CAC: {worst_data['cac']:,} —Ä—É–±
        ‚Ä¢ Churn: {worst_data['churn']}%
        
        **–°—Ç—Ä–∞—Ç–µ–≥–∏—è**: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è retention –∏ —á–∞—Å—Ç–æ—Ç—ã
        """)
        
        # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø–∞–º –≥–æ—Ä–æ–¥–æ–≤
        st.markdown("#### üìä –ü–æ —Ç–∏–ø–∞–º –≥–æ—Ä–æ–¥–æ–≤")
        
        for maturity in ["–ó—Ä–µ–ª—ã–π", "–†–∞—Å—Ç—É—â–∏–π", "–†–∞–∑–≤–∏–≤–∞—é—â–∏–π—Å—è"]:
            cities_in_stage = [city for city, data in cities_data.items() 
                             if data['maturity'] == maturity]
            if cities_in_stage:
                stage_recommendations = {
                    "–ó—Ä–µ–ª—ã–π": "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π, –ø—Ä–µ–º–∏—É–º –ø—Ä–æ–¥—É–∫—Ç—ã",
                    "–†–∞—Å—Ç—É—â–∏–π": "–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ, –∑–∞—Ö–≤–∞—Ç –¥–æ–ª–∏",
                    "–†–∞–∑–≤–∏–≤–∞—é—â–∏–π—Å—è": "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞, –Ω–∏–∑–∫–∏–µ —Ü–µ–Ω—ã"
                }
                st.write(f"**{maturity}** ({', '.join(cities_in_stage)}): {stage_recommendations[maturity]}")

def rider_cohort_analysis():
    """–ö–æ–≥–æ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞–π–¥–µ—Ä–æ–≤"""
    st.header("üìà –ö–æ–≥–æ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞–π–¥–µ—Ä–æ–≤")
    
    st.markdown("""
    **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ ride-hailing**: –ø–µ—Ä–≤–∞—è –ø–æ–µ–∑–¥–∫–∞ ‚â† –∞–∫—Ç–∏–≤–∞—Ü–∏—è. –ö–ª—é—á–µ–≤–∞—è –º–µ—Ç—Ä–∏–∫–∞ - 
    time to second ride –∏ —á–∞—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø–µ—Ä–≤—ã–µ 30 –¥–Ω–µ–π.
    """)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–≥–æ—Ä—Ç")
        
        num_cohorts = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—á–Ω—ã—Ö –∫–æ–≥–æ—Ä—Ç", 6, 18, 12)
        base_cohort_size = st.slider("–†–∞–∑–º–µ—Ä –±–∞–∑–æ–≤–æ–π –∫–æ–≥–æ—Ä—Ç—ã", 1000, 10000, 3000)
        seasonal_effect = st.checkbox("–£—á–µ—Å—Ç—å —Å–µ–∑–æ–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã", True)
        
    with col2:
        st.subheader("üéØ –ú–µ—Ç—Ä–∏–∫–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏")
        
        time_to_second_ride = st.slider("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–æ 2-–π –ø–æ–µ–∑–¥–∫–∏ (–¥–Ω–∏)", 3, 21, 7)
        first_month_frequency = st.slider("–ü–æ–µ–∑–¥–æ–∫ –≤ –ø–µ—Ä–≤—ã–π –º–µ—Å—è—Ü (–∞–∫—Ç–∏–≤–Ω—ã–µ)", 2, 8, 4)
        activation_rate = st.slider("–î–æ–ª—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (%)", 30, 80, 55)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–≥–æ—Ä—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    cohort_data = generate_rider_cohort_data(
        num_cohorts, base_cohort_size, seasonal_effect, 
        time_to_second_ride, first_month_frequency, activation_rate
    )
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–≥–æ—Ä—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
    create_rider_cohort_table(cohort_data)
    
    # –ê–Ω–∞–ª–∏–∑ retention –∫—Ä–∏–≤—ã—Ö
    create_retention_curves(cohort_data)
    
    # –ê–Ω–∞–ª–∏–∑ revenue cohorts
    create_revenue_cohort_analysis(cohort_data)

def generate_rider_cohort_data(num_cohorts: int, base_size: int, seasonal: bool,
                              time_to_second: int, first_frequency: int, activation_rate: int) -> List[Dict]:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–≥–æ—Ä—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —Ä–∞–π–¥–µ—Ä–æ–≤"""
    
    cohorts = []
    
    for i in range(num_cohorts):
        month = i + 1
        
        # –°–µ–∑–æ–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è ride-hailing
        seasonal_multiplier = 1.0
        if seasonal:
            # –ó–∏–º–∞ (–¥–µ–∫-—Ñ–µ–≤) - –±–æ–ª—å—à–µ –ø–æ–µ–∑–¥–æ–∫ –∏–∑-–∑–∞ –ø–æ–≥–æ–¥—ã
            if month in [12, 1, 2]:
                seasonal_multiplier = 1.4
            # –õ–µ—Ç–æ (–∏—é–Ω-–∞–≤–≥) - –º–µ–Ω—å—à–µ –ø–æ–µ–∑–¥–æ–∫, –±–æ–ª—å—à–µ –ø–µ—à–∫–æ–º/–≤–µ–ª–æ—Å–∏–ø–µ–¥
            elif month in [6, 7, 8]:
                seasonal_multiplier = 0.8
            # –î–æ–∂–¥–ª–∏–≤—ã–µ –º–µ—Å—è—Ü—ã (–æ–∫—Ç-–Ω–æ—è, –º–∞—Ä-–∞–ø—Ä)
            elif month in [10, 11, 3, 4]:
                seasonal_multiplier = 1.2
        
        cohort_size = int(base_size * seasonal_multiplier * np.random.uniform(0.9, 1.1))
        
        # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –∫–æ–≥–æ—Ä—Ç—ã
        activated_users = int(cohort_size * (activation_rate / 100))
        
        # Retention pattern –¥–ª—è ride-hailing (–±–æ–ª–µ–µ –∫—Ä—É—Ç–æ–µ –ø–∞–¥–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–µ)
        monthly_retention = []
        for month_num in range(1, 13):
            if month_num == 1:
                retention = 1.0  # 100% –≤ –ø–µ—Ä–≤—ã–π –º–µ—Å—è—Ü
            elif month_num == 2:
                retention = activation_rate / 100  # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–æ –≤—Ç–æ—Ä–æ–π –º–µ—Å—è—Ü
            else:
                # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ —Å –≤—ã—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–∞—Ç–æ
                base_retention = 0.25 + (activation_rate / 100 - 0.25) * np.exp(-(month_num - 2) / 4)
                retention = max(base_retention, 0.15)  # –ú–∏–Ω–∏–º—É–º 15% –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π retention
            
            monthly_retention.append(retention)
        
        # –†–∞—Å—á–µ—Ç –ø–æ–º–µ—Å—è—á–Ω–æ–π –≤—ã—Ä—É—á–∫–∏
        aov = 350 * seasonal_multiplier  # AOV –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–µ–∑–æ–Ω–∞
        take_rate = 0.25
        
        monthly_revenue = []
        for month_num, retention in enumerate(monthly_retention):
            active_users = cohort_size * retention
            
            # –ß–∞—Å—Ç–æ—Ç–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—Ç–∞–¥–∏–∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
            if month_num == 0:
                frequency = first_frequency * 0.6  # –ü–µ—Ä–≤—ã–π –º–µ—Å—è—Ü - —á–∞—Å—Ç–∏—á–Ω—ã–π
            elif month_num <= 2:
                frequency = first_frequency  # –ù–∞—á–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            else:
                # –°—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è —á–∞—Å—Ç–æ—Ç—ã –¥–ª—è retained users
                frequency = first_frequency * 1.2
            
            revenue = active_users * aov * take_rate * frequency
            monthly_revenue.append(revenue)
        
        # –†–∞—Å—á–µ—Ç LTV –∫–æ–≥–æ—Ä—Ç—ã
        total_revenue = sum(monthly_revenue)
        ltv_per_user = total_revenue / cohort_size
        
        cohorts.append({
            'month': month,
            'cohort_size': cohort_size,
            'activated_users': activated_users,
            'activation_rate': activation_rate / 100,
            'monthly_retention': monthly_retention,
            'monthly_revenue': monthly_revenue,
            'ltv_per_user': ltv_per_user,
            'seasonal_factor': seasonal_multiplier,
            'time_to_second_ride': time_to_second + np.random.normal(0, 2)
        })
    
    return cohorts

def create_rider_cohort_table(cohort_data: List[Dict]):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–≥–æ—Ä—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã retention"""
    st.subheader("üìä –ö–æ–≥–æ—Ä—Ç–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ retention (–≤ %)")
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è heatmap
    cohort_months = len(cohort_data)
    max_periods = 12
    
    retention_matrix = np.zeros((cohort_months, max_periods))
    
    for i, cohort in enumerate(cohort_data):
        for j in range(min(len(cohort['monthly_retention']), max_periods)):
            retention_matrix[i, j] = cohort['monthly_retention'][j] * 100
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π heatmap
    fig = go.Figure(data=go.Heatmap(
        z=retention_matrix,
        x=[f"M{i+1}" for i in range(max_periods)],
        y=[f"–ö–æ–≥–æ—Ä—Ç–∞ {i+1}" for i in range(cohort_months)],
        colorscale='RdYlGn',
        zmin=0,
        zmax=100,
        text=[[f"{val:.1f}%" for val in row] for row in retention_matrix],
        texttemplate="%{text}",
        textfont={"size":10},
        colorbar=dict(title="Retention %")
    ))
    
    fig.update_layout(
        title="Retention Rate –ø–æ –∫–æ–≥–æ—Ä—Ç–∞–º (—á–µ–º –∑–µ–ª–µ–Ω–µ–µ, —Ç–µ–º –ª—É—á—à–µ)",
        xaxis_title="–ú–µ—Å—è—Ü —Å –º–æ–º–µ–Ω—Ç–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è",
        yaxis_title="–ö–æ–≥–æ—Ä—Ç–∞",
        height=500
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    st.subheader("üìà –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ retention")
    
    avg_retention = np.mean(retention_matrix, axis=0)
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("1-–π –º–µ—Å—è—Ü", f"{avg_retention[0]:.1f}%")
    with col2:
        st.metric("2-–π –º–µ—Å—è—Ü (–∞–∫—Ç–∏–≤–∞—Ü–∏—è)", f"{avg_retention[1]:.1f}%")
    with col3:
        st.metric("6-–π –º–µ—Å—è—Ü", f"{avg_retention[5]:.1f}%")
    with col4:
        st.metric("12-–π –º–µ—Å—è—Ü", f"{avg_retention[11]:.1f}%")

def create_retention_curves(cohort_data: List[Dict]):
    """–ö—Ä–∏–≤—ã–µ retention –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ–≥–æ—Ä—Ç"""
    st.subheader("üìâ –ö—Ä–∏–≤—ã–µ retention –ø–æ –∫–æ–≥–æ—Ä—Ç–∞–º")
    
    fig = go.Figure()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–≥–æ—Ä—Ç
    selected_cohorts = [0, len(cohort_data)//4, len(cohort_data)//2, len(cohort_data)-1]
    colors = ['blue', 'green', 'orange', 'red']
    
    for i, cohort_idx in enumerate(selected_cohorts):
        if cohort_idx < len(cohort_data):
            cohort = cohort_data[cohort_idx]
            months = list(range(1, len(cohort['monthly_retention']) + 1))
            retention_pct = [r * 100 for r in cohort['monthly_retention']]
            
            fig.add_trace(go.Scatter(
                x=months,
                y=retention_pct,
                mode='lines+markers',
                name=f"–ö–æ–≥–æ—Ä—Ç–∞ {cohort['month']} (—Å–µ–∑–æ–Ω {cohort['seasonal_factor']:.1f}x)",
                line=dict(color=colors[i], width=3),
                marker=dict(size=6)
            ))
    
    # –°—Ä–µ–¥–Ω—è—è –∫—Ä–∏–≤–∞—è
    avg_retention = []
    for month_idx in range(12):
        month_retentions = [c['monthly_retention'][month_idx] * 100 
                          for c in cohort_data if month_idx < len(c['monthly_retention'])]
        avg_retention.append(np.mean(month_retentions))
    
    fig.add_trace(go.Scatter(
        x=list(range(1, 13)),
        y=avg_retention,
        mode='lines+markers',
        name="–°—Ä–µ–¥–Ω—è—è retention",
        line=dict(color='black', width=4, dash='dash'),
        marker=dict(size=8)
    ))
    
    fig.update_layout(
        title="Retention curves: –≤–ª–∏—è–Ω–∏–µ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç—å",
        xaxis_title="–ú–µ—Å—è—Ü —Å –º–æ–º–µ–Ω—Ç–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è",
        yaxis_title="Retention (%)",
        height=500
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # –ò–Ω—Å–∞–π—Ç—ã
    st.info("""
    üí° **–ö–ª—é—á–µ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã ride-hailing retention**:
    
    1. **–ö—Ä—É—Ç–æ–µ –ø–∞–¥–µ–Ω–∏–µ –ø–æ—Å–ª–µ 1-–≥–æ –º–µ—Å—è—Ü–∞** - –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å –±—ã—Å—Ç—Ä–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    2. **–°—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è –Ω–∞ 3-4 –º–µ—Å—è—Ü–µ** - —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏
    3. **–°–µ–∑–æ–Ω–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è** - –∑–∏–º–Ω–∏–µ –∫–æ–≥–æ—Ä—Ç—ã —á–∞—Å—Ç–æ –∏–º–µ—é—Ç –ª—É—á—à–∏–π retention
    4. **–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ –ø–ª–∞—Ç–æ 15-25%** - –±–∞–∑–∞ –ª–æ—è–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """)

def create_revenue_cohort_analysis(cohort_data: List[Dict]):
    """–ê–Ω–∞–ª–∏–∑ –≤—ã—Ä—É—á–∫–∏ –ø–æ –∫–æ–≥–æ—Ä—Ç–∞–º"""
    st.subheader("üí∞ Revenue Cohort Analysis")
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    cohort_months = len(cohort_data)
    max_periods = 12
    
    revenue_matrix = np.zeros((cohort_months, max_periods))
    
    for i, cohort in enumerate(cohort_data):
        for j in range(min(len(cohort['monthly_revenue']), max_periods)):
            revenue_matrix[i, j] = cohort['monthly_revenue'][j] / 1000  # –í —Ç—ã—Å—è—á–∞—Ö —Ä—É–±–ª–µ–π
    
    # Cumulative revenue
    cumulative_revenue = np.cumsum(revenue_matrix, axis=1)
    
    # –ì—Ä–∞—Ñ–∏–∫ cumulative revenue
    fig = make_subplots(
        rows=1, cols=2,
        subplot_titles=('–ú–µ—Å—è—á–Ω–∞—è –≤—ã—Ä—É—á–∫–∞ –ø–æ –∫–æ–≥–æ—Ä—Ç–∞–º', '–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞')
    )
    
    # Monthly revenue heatmap
    fig.add_trace(
        go.Heatmap(
            z=revenue_matrix,
            x=[f"M{i+1}" for i in range(max_periods)],
            y=[f"–ö–æ–≥–æ—Ä—Ç–∞ {i+1}" for i in range(cohort_months)],
            colorscale='Blues',
            name="Monthly Revenue",
            showscale=False
        ),
        row=1, col=1
    )
    
    # Cumulative revenue heatmap
    fig.add_trace(
        go.Heatmap(
            z=cumulative_revenue,
            x=[f"M{i+1}" for i in range(max_periods)],
            y=[f"–ö–æ–≥–æ—Ä—Ç–∞ {i+1}" for i in range(cohort_months)],
            colorscale='Greens',
            name="Cumulative Revenue",
            colorbar=dict(title="–í—ã—Ä—É—á–∫–∞ (—Ç—ã—Å. —Ä—É–±)")
        ),
        row=1, col=2
    )
    
    fig.update_layout(height=500)
    st.plotly_chart(fig, use_container_width=True)
    
    # LTV –∞–Ω–∞–ª–∏–∑
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### üìä LTV –ø–æ –∫–æ–≥–æ—Ä—Ç–∞–º")
        ltv_data = pd.DataFrame([
            {
                '–ö–æ–≥–æ—Ä—Ç–∞': f"–ö–æ–≥–æ—Ä—Ç–∞ {c['month']}",
                '–†–∞–∑–º–µ—Ä': c['cohort_size'],
                'LTV –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è': f"{c['ltv_per_user']:,.0f} —Ä—É–±",
                '–°–µ–∑–æ–Ω–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä': f"{c['seasonal_factor']:.1f}x",
                '–ê–∫—Ç–∏–≤–∞—Ü–∏—è': f"{c['activation_rate']:.1%}"
            }
            for c in cohort_data
        ])
        st.dataframe(ltv_data, use_container_width=True)
    
    with col2:
        st.markdown("#### üí° –í—ã–≤–æ–¥—ã")
        
        avg_ltv = np.mean([c['ltv_per_user'] for c in cohort_data])
        max_ltv_cohort = max(cohort_data, key=lambda x: x['ltv_per_user'])
        min_ltv_cohort = min(cohort_data, key=lambda x: x['ltv_per_user'])
        
        st.metric("–°—Ä–µ–¥–Ω–∏–π LTV", f"{avg_ltv:,.0f} —Ä—É–±")
        st.success(f"–õ—É—á—à–∞—è –∫–æ–≥–æ—Ä—Ç–∞: {max_ltv_cohort['month']} ({max_ltv_cohort['ltv_per_user']:,.0f} —Ä—É–±)")
        st.warning(f"–•—É–¥—à–∞—è –∫–æ–≥–æ—Ä—Ç–∞: {min_ltv_cohort['month']} ({min_ltv_cohort['ltv_per_user']:,.0f} —Ä—É–±)")
        
        ltv_variance = (max_ltv_cohort['ltv_per_user'] - min_ltv_cohort['ltv_per_user']) / avg_ltv
        st.info(f"–†–∞–∑–±—Ä–æ—Å LTV: {ltv_variance:.1%}")

def ride_hailing_scenarios():
    """–°—Ü–µ–Ω–∞—Ä–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è ride-hailing"""
    st.header("üé™ –°—Ü–µ–Ω–∞—Ä–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Ride-Hailing")
    
    st.markdown("""
    **–°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è ride-hailing**: –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –≤–æ–π–Ω—ã, —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ, 
    –ø–∞–Ω–¥–µ–º–∏–∏, –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≥–æ—Ä–æ–¥—Å–∫–æ–π –º–æ–±–∏–ª—å–Ω–æ—Å—Ç–∏.
    """)
    
    scenario_type = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π:",
        [
            "üÜö –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è –≤–æ–π–Ω–∞ (–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã)",
            "üìâ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∫—Ä–∏–∑–∏—Å (—Å–Ω–∏–∂–µ–Ω–∏–µ —Å–ø—Ä–æ—Å–∞)",
            "üö´ –£—Å–∏–ª–µ–Ω–∏–µ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è",
            "ü¶† –ü–∞–Ω–¥–µ–º–∏—è/—Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä",
            "üöá –†–∞–∑–≤–∏—Ç–∏–µ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞",
            "üöó –ó–∞–ø—É—Å–∫ –≤ –Ω–æ–≤–æ–º –≥–æ—Ä–æ–¥–µ"
        ]
    )
    
    if scenario_type == "üÜö –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è –≤–æ–π–Ω–∞ (–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã)":
        competitive_war_scenario()
    elif scenario_type == "üìâ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∫—Ä–∏–∑–∏—Å (—Å–Ω–∏–∂–µ–Ω–∏–µ —Å–ø—Ä–æ—Å–∞)":
        economic_crisis_scenario()
    elif scenario_type == "üö´ –£—Å–∏–ª–µ–Ω–∏–µ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è":
        regulation_scenario()
    elif scenario_type == "ü¶† –ü–∞–Ω–¥–µ–º–∏—è/—Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä":
        pandemic_scenario()
    elif scenario_type == "üöá –†–∞–∑–≤–∏—Ç–∏–µ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞":
        public_transport_scenario()
    elif scenario_type == "üöó –ó–∞–ø—É—Å–∫ –≤ –Ω–æ–≤–æ–º –≥–æ—Ä–æ–¥–µ":
        new_city_launch_scenario()

def competitive_war_scenario():
    """–°—Ü–µ–Ω–∞—Ä–∏–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–π –≤–æ–π–Ω—ã"""
    st.subheader("üÜö –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è –≤–æ–π–Ω–∞ —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏")
    
    st.warning("""
    **–°–∏—Ç—É–∞—Ü–∏—è**: –ö—Ä—É–ø–Ω—ã–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç –∑–∞–ø—É—Å—Ç–∏–ª –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é –ø—Ä–æ–º–æ–∫–∞–º–ø–∞–Ω–∏—é —Å —Å–∫–∏–¥–∫–∞–º–∏ 50% –∏ 
    cashback'–æ–º. –í–∞—à–∞ –¥–æ–ª—è —Ä—ã–Ω–∫–∞ –ø–∞–¥–∞–µ—Ç, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É—Ö–æ–¥—è—Ç –∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º.
    """)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç–≤–µ—Ç–Ω–æ–π —Ä–µ–∞–∫—Ü–∏–∏**")
        
        promo_intensity = st.slider("–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ (% –æ—Ç –≤—ã—Ä—É—á–∫–∏)", 10, 60, 30)
        market_share_loss = st.slider("–ü–æ—Ç–µ—Ä—è –¥–æ–ª–∏ —Ä—ã–Ω–∫–∞ –±–µ–∑ —Ä–µ–∞–∫—Ü–∏–∏ (%)", 10, 50, 25)
        cac_inflation = st.slider("–†–æ—Å—Ç CAC –∏–∑-–∑–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏ (%)", 20, 100, 50)
        
        # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        base_aov = 350
        base_frequency = 4.5
        base_take_rate = 25
        base_cac = 1500
        base_users = 100000
        
    with col2:
        st.markdown("**üìä –ë–∞–∑–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏**")
        st.metric("–ë–∞–∑–æ–≤—ã–π AOV", f"{base_aov} —Ä—É–±")
        st.metric("–ß–∞—Å—Ç–æ—Ç–∞", f"{base_frequency} –ø–æ–µ–∑–¥–æ–∫/–º–µ—Å—è—Ü")
        st.metric("Take Rate", f"{base_take_rate}%")
        st.metric("–ë–∞–∑–æ–≤—ã–π CAC", f"{base_cac:,} —Ä—É–±")
    
    # –†–∞—Å—á–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ù–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—é
    scenario_1_users = base_users * (1 - market_share_loss / 100)
    scenario_1_revenue = scenario_1_users * base_aov * (base_take_rate / 100) * base_frequency
    scenario_1_cac = base_cac  # CAC –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–µ–Ω—å—à–µ
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –ø—Ä–æ–º–æ—Ä–µ–∞–∫—Ü–∏—è
    scenario_2_users = base_users * 0.95  # –ù–µ–±–æ–ª—å—à–∞—è –ø–æ—Ç–µ—Ä—è –≤—Å–µ —Ä–∞–≤–Ω–æ –µ—Å—Ç—å
    effective_take_rate = base_take_rate - promo_intensity  # –ü—Ä–æ–º–æ–∫–æ–¥—ã –µ–¥—è—Ç –º–∞—Ä–∂—É
    scenario_2_revenue = scenario_2_users * base_aov * (effective_take_rate / 100) * base_frequency
    scenario_2_cac = base_cac * (1 + cac_inflation / 100)
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 3: –§–æ–∫—É—Å –Ω–∞ retention –±–µ–∑ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    scenario_3_users = base_users * (1 - market_share_loss / 100 * 0.6)  # –ú–µ–Ω—å—à–∏–µ –ø–æ—Ç–µ—Ä–∏
    scenario_3_frequency = base_frequency * 1.2  # –ü–æ–≤—ã—à–µ–Ω–∏–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
    scenario_3_revenue = scenario_3_users * base_aov * (base_take_rate / 100) * scenario_3_frequency
    scenario_3_cac = base_cac * 1.1  # –ù–µ–±–æ–ª—å—à–æ–π —Ä–æ—Å—Ç CAC
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    st.subheader("üìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤")
    
    scenarios_df = pd.DataFrame([
        {
            '–°—Ü–µ–Ω–∞—Ä–∏–π': '–ù–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º',
            '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏': f"{scenario_1_users:,.0f}",
            '–ú–µ—Å—è—á–Ω–∞—è –≤—ã—Ä—É—á–∫–∞': f"{scenario_1_revenue:,.0f} —Ä—É–±",
            '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π CAC': f"{scenario_1_cac:,} —Ä—É–±",
            'Take Rate': f"{base_take_rate}%",
            '–†–∏—Å–∫–∏': '–ü–æ—Ç–µ—Ä—è –¥–æ–ª–∏ —Ä—ã–Ω–∫–∞'
        },
        {
            '–°—Ü–µ–Ω–∞—Ä–∏–π': '–ü—Ä–æ–º–æ–≤–æ–π–Ω–∞',
            '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏': f"{scenario_2_users:,.0f}",
            '–ú–µ—Å—è—á–Ω–∞—è –≤—ã—Ä—É—á–∫–∞': f"{scenario_2_revenue:,.0f} —Ä—É–±",
            '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π CAC': f"{scenario_2_cac:,} —Ä—É–±",
            'Take Rate': f"{effective_take_rate:.1f}%",
            '–†–∏—Å–∫–∏': '–ù–∏–∑–∫–∞—è –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å'
        },
        {
            '–°—Ü–µ–Ω–∞—Ä–∏–π': '–§–æ–∫—É—Å –Ω–∞ retention',
            '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏': f"{scenario_3_users:,.0f}",
            '–ú–µ—Å—è—á–Ω–∞—è –≤—ã—Ä—É—á–∫–∞': f"{scenario_3_revenue:,.0f} —Ä—É–±",
            '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π CAC': f"{scenario_3_cac:,} —Ä—É–±",
            'Take Rate': f"{base_take_rate}%",
            '–†–∏—Å–∫–∏': '–ú–µ–¥–ª–µ–Ω–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è'
        }
    ])
    
    st.dataframe(scenarios_df, use_container_width=True)
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    best_revenue_scenario = max([scenario_1_revenue, scenario_2_revenue, scenario_3_revenue])
    
    if best_revenue_scenario == scenario_3_revenue:
        st.success("üéØ **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è**: –§–æ–∫—É—Å –Ω–∞ retention –∏ —á–∞—Å—Ç–æ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ –ø—Ä–æ–º–æ–≤–æ–π–Ω—ã.")
    elif best_revenue_scenario == scenario_1_revenue:
        st.info("üìä **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è**: –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ø–µ—Ä–µ–∂–¥–∞—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—É—é –≤–æ–ª–Ω—É, —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏–≤—à–∏—Å—å –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
    else:
        st.warning("‚ö†Ô∏è **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è**: –ü—Ä–æ–º–æ–≤–æ–π–Ω–∞ –æ–ø—Ä–∞–≤–¥–∞–Ω–∞, –Ω–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ unit economics.")
    
    st.markdown("""
    ### üí° –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏:
    
    1. **–î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞**: –ø—Ä–µ–º–∏—É–º –æ–ø—Ü–∏–∏, –ª—É—á—à–∏–π UX
    2. **–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è**: –¥–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã, –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏  
    3. **B2B focus**: –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã, –º–µ–Ω–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∫ —Ü–µ–Ω–µ
    4. **Geographic moats**: —Ñ–æ–∫—É—Å –Ω–∞ –ø—Ä–∏–≥–æ—Ä–æ–¥–∞—Ö, –≥–¥–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è —Å–ª–∞–±–µ–µ
    5. **Supply-side**: –ø–µ—Ä–µ–º–∞–Ω–∏–≤–∞–Ω–∏–µ –ª—É—á—à–∏—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π
    """)

def economic_crisis_scenario():
    """–°—Ü–µ–Ω–∞—Ä–∏–π —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ –∫—Ä–∏–∑–∏—Å–∞"""
    st.subheader("üìâ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∫—Ä–∏–∑–∏—Å –∏ —Å–Ω–∏–∂–µ–Ω–∏–µ —Å–ø—Ä–æ—Å–∞")
    
    st.error("""
    **–°–∏—Ç—É–∞—Ü–∏—è**: –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∫—Ä–∏–∑–∏—Å —Å–Ω–∏–∂–∞–µ—Ç —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ–º—ã–µ –¥–æ—Ö–æ–¥—ã. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥—è—Ç 
    –Ω–∞ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, —Å–Ω–∏–∂–∞–µ—Ç—Å—è —á–∞—Å—Ç–æ—Ç–∞ –ø–æ–µ–∑–¥–æ–∫, —Ä–∞—Å—Ç–µ—Ç price sensitivity.
    """)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫—Ä–∏–∑–∏—Å–∞
    col1, col2 = st.columns(2)
    
    with col1:
        demand_drop = st.slider("–°–Ω–∏–∂–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å–ø—Ä–æ—Å–∞ (%)", 20, 60, 35)
        price_sensitivity = st.slider("–†–æ—Å—Ç price sensitivity (—ç–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å)", 1.2, 2.5, 1.8)
        income_effect = st.slider("–°–Ω–∏–∂–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤ –Ω–∞—Å–µ–ª–µ–Ω–∏—è (%)", 10, 30, 20)
        
    with col2:
        # –†–µ–∞–∫—Ü–∏—è –±–∏–∑–Ω–µ—Å–∞
        price_cut = st.slider("–°–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–ø—Ä–æ—Å–∞ (%)", 0, 30, 15)
        cost_optimization = st.slider("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ (%)", 10, 40, 25)
        
    # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    base_volume = 1000000  # –ø–æ–µ–∑–¥–æ–∫ –≤ –º–µ—Å—è—Ü
    base_aov = 350
    base_take_rate = 25
    base_ops_cost = 50  # –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ—Å—è—Ü
    
    # –†–∞—Å—á–µ—Ç –≤–ª–∏—è–Ω–∏—è –∫—Ä–∏–∑–∏—Å–∞
    new_volume = base_volume * (1 - demand_drop / 100)
    new_aov = base_aov * (1 - price_cut / 100)
    
    # Price elasticity effect
    additional_volume_from_price_cut = base_volume * (price_cut / 100) * price_sensitivity
    final_volume = min(new_volume + additional_volume_from_price_cut, base_volume * 0.9)
    
    new_ops_cost = base_ops_cost * (1 - cost_optimization / 100)
    
    # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    base_revenue = base_volume * base_aov * (base_take_rate / 100)
    new_revenue = final_volume * new_aov * (base_take_rate / 100)
    
    base_profit = base_revenue - (base_volume / 4.5) * base_ops_cost  # Assuming 4.5 rides per user per month
    new_profit = new_revenue - (final_volume / 4.5) * new_ops_cost
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    st.subheader("üìä –í–ª–∏—è–Ω–∏–µ –∫—Ä–∏–∑–∏—Å–∞ –Ω–∞ –±–∏–∑–Ω–µ—Å")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–û–±—ä–µ–º –ø–æ–µ–∑–¥–æ–∫", f"{final_volume:,.0f}", 
                 f"{((final_volume - base_volume) / base_volume * 100):+.1f}%")
    
    with col2:
        st.metric("–°—Ä–µ–¥–Ω–∏–π —á–µ–∫", f"{new_aov:.0f} —Ä—É–±", 
                 f"{((new_aov - base_aov) / base_aov * 100):+.1f}%")
    
    with col3:
        st.metric("–ú–µ—Å—è—á–Ω–∞—è –≤—ã—Ä—É—á–∫–∞", f"{new_revenue:,.0f} —Ä—É–±", 
                 f"{((new_revenue - base_revenue) / base_revenue * 100):+.1f}%")
    
    with col4:
        st.metric("–ü—Ä–∏–±—ã–ª—å", f"{new_profit:,.0f} —Ä—É–±", 
                 f"{((new_profit - base_profit) / base_profit * 100):+.1f}%")
    
    # –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∫—Ä–∏–∑–∏—Å–∞
    profit_impact = (new_profit - base_profit) / base_profit
    
    if profit_impact < -0.5:
        st.error("üö® **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å!** –ù–µ–æ–±—Ö–æ–¥–∏–º—ã —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –º–µ—Ä—ã.")
        recommendations = [
            "–†–∞–¥–∏–∫–∞–ª—å–Ω–æ–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤",
            "–§–æ–∫—É—Å –Ω–∞ –Ω–∞–∏–±–æ–ª–µ–µ –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–∞—Ö",
            "–í—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —É–±—ã—Ç–æ—á–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤",
            "–ü–µ—Ä–µ–≥–æ–≤–æ—Ä—ã —Å –≤–æ–¥–∏—Ç–µ–ª—è–º–∏ –æ —Å–Ω–∏–∂–µ–Ω–∏–∏ –∫–æ–º–∏—Å—Å–∏–∏"
        ]
    elif profit_impact < -0.2:
        st.warning("‚ö†Ô∏è **–°–µ—Ä—å–µ–∑–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ.** –ù—É–∂–Ω–∞ –∞–Ω—Ç–∏–∫—Ä–∏–∑–∏—Å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è.")
        recommendations = [
            "–°–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã (—ç–∫–æ–Ω–æ–º vs –ø—Ä–µ–º–∏—É–º)",
            "Loyalty –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            "–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤ B2B —Å–µ–≥–º–µ–Ω—Ç",
            "–ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞ —Å —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è–º–∏"
        ]
    else:
        st.info("üìä **–£–º–µ—Ä–µ–Ω–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ.** –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π.")
        recommendations = [
            "–ó–∞—Ö–≤–∞—Ç –¥–æ–ª–∏ —Ä—ã–Ω–∫–∞ –æ—Ç –æ—Å–ª–∞–±–ª–µ–Ω–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤",
            "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è costs",
            "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é —ç–∫–æ–Ω–æ–º–∏–∫–∏"
        ]
    
    st.markdown("### üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:")
    for rec in recommendations:
        st.write(f"‚Ä¢ {rec}")

def regulation_scenario():
    """–°—Ü–µ–Ω–∞—Ä–∏–π —É—Å–∏–ª–µ–Ω–∏—è —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
    st.subheader("üö´ –£—Å–∏–ª–µ–Ω–∏–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    st.info("""
    **–°–∏—Ç—É–∞—Ü–∏—è**: –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ –≤–≤–æ–¥–∏—Ç –Ω–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è ride-hailing: –ª–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π,
    –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ surge pricing, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ, –Ω–∞–ª–æ–≥–∏ –Ω–∞ —Ü–∏—Ñ—Ä–æ–≤—ã–µ —É—Å–ª—É–≥–∏.
    """)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üìã –ù–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è**")
        
        licensing_cost = st.slider("–°—Ç–æ–∏–º–æ—Å—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è (—Ä—É–±)", 5000, 50000, 15000)
        driver_retention_impact = st.slider("–û—Ç—Ç–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π –∏–∑-–∑–∞ –ª–∏—Ü–µ–Ω–∑–∏–π (%)", 10, 40, 25)
        surge_limitation = st.slider("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ surge pricing (–º–∞–∫—Å. –º–Ω–æ–∂–∏—Ç–µ–ª—å)", 1.5, 3.0, 2.0)
        digital_tax = st.slider("–ù–∞–ª–æ–≥ –Ω–∞ —Ü–∏—Ñ—Ä–æ–≤—ã–µ —É—Å–ª—É–≥–∏ (%)", 0, 10, 5)
        
    with col2:
        st.markdown("**üìä –ë–∞–∑–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏**")
        
        base_drivers = 50000
        base_surge_revenue_share = 15  # % –æ—Ç –≤—ã—Ä—É—á–∫–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ surge
        base_avg_surge = 2.5
        base_monthly_revenue = 500_000_000
    
    # –†–∞—Å—á–µ—Ç –≤–ª–∏—è–Ω–∏—è —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    
    # –í–ª–∏—è–Ω–∏–µ –Ω–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π
    remaining_drivers = base_drivers * (1 - driver_retention_impact / 100)
    supply_shortage = (base_drivers - remaining_drivers) / base_drivers
    
    # –í–ª–∏—è–Ω–∏–µ –Ω–∞ surge pricing
    surge_revenue_loss = 0
    if surge_limitation < base_avg_surge:
        surge_revenue_loss = (base_surge_revenue_share / 100) * base_monthly_revenue * \
                           ((base_avg_surge - surge_limitation) / base_avg_surge)
    
    # –í–ª–∏—è–Ω–∏–µ –¥–µ—Ñ–∏—Ü–∏—Ç–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π –Ω–∞ —Å–ø—Ä–æ—Å
    demand_impact = supply_shortage * 0.8  # 80% —ç–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å —Å–ø—Ä–æ—Å–∞ –∫ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    demand_loss = base_monthly_revenue * demand_impact
    
    # –ù–∞–ª–æ–≥–æ–≤–æ–µ –≤–ª–∏—è–Ω–∏–µ
    tax_cost = base_monthly_revenue * (digital_tax / 100)
    
    # Licensing costs
    monthly_licensing_cost = (base_drivers * licensing_cost) / 12  # –ê–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—è –Ω–∞ –≥–æ–¥
    
    # –ò—Ç–æ–≥–æ–≤–æ–µ –≤–ª–∏—è–Ω–∏–µ
    total_revenue_impact = surge_revenue_loss + demand_loss
    total_cost_impact = tax_cost + monthly_licensing_cost
    net_impact = total_revenue_impact + total_cost_impact
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    st.subheader("üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –≤–ª–∏—è–Ω–∏–µ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–ü–æ—Ç–µ—Ä—è –≤–æ–¥–∏—Ç–µ–ª–µ–π", f"{base_drivers - remaining_drivers:,.0f}", 
                 f"-{driver_retention_impact}%")
    
    with col2:
        st.metric("–ü–æ—Ç–µ—Ä—è –æ—Ç surge", f"{surge_revenue_loss:,.0f} —Ä—É–±", 
                 f"-{(surge_revenue_loss/base_monthly_revenue*100):.1f}%")
    
    with col3:
        st.metric("–ü–æ—Ç–µ—Ä—è –æ—Ç –¥–µ—Ñ–∏—Ü–∏—Ç–∞", f"{demand_loss:,.0f} —Ä—É–±", 
                 f"-{(demand_loss/base_monthly_revenue*100):.1f}%")
    
    with col4:
        st.metric("–î–æ–ø. —Ä–∞—Å—Ö–æ–¥—ã", f"{total_cost_impact:,.0f} —Ä—É–±", 
                 f"+{(total_cost_impact/base_monthly_revenue*100):.1f}%")
    
    # –û–±—â–µ–µ –≤–ª–∏—è–Ω–∏–µ
    total_impact_pct = (net_impact / base_monthly_revenue) * 100
    
    if total_impact_pct > 15:
        st.error(f"üö® **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –≤–ª–∏—è–Ω–∏–µ**: {total_impact_pct:.1f}% –æ—Ç –≤—ã—Ä—É—á–∫–∏!")
    elif total_impact_pct > 8:
        st.warning(f"‚ö†Ô∏è **–°–µ—Ä—å–µ–∑–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ**: {total_impact_pct:.1f}% –æ—Ç –≤—ã—Ä—É—á–∫–∏")
    else:
        st.info(f"üìä **–£–º–µ—Ä–µ–Ω–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ**: {total_impact_pct:.1f}% –æ—Ç –≤—ã—Ä—É—á–∫–∏")
    
    # –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
    st.subheader("üîß –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∫ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—é")
    
    strategies = [
        {
            "–°—Ç—Ä–∞—Ç–µ–≥–∏—è": "–ü–æ–º–æ—â—å –≤–æ–¥–∏—Ç–µ–ª—è–º —Å –ª–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏–µ–º",
            "–û–ø–∏—Å–∞–Ω–∏–µ": "Subsidize licensing costs, –æ–±—É—á–∞—é—â–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã",
            "–≠—Ñ—Ñ–µ–∫—Ç": "–°–Ω–∏–∂–µ–Ω–∏–µ –æ—Ç—Ç–æ–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π –Ω–∞ 50-70%",
            "–°—Ç–æ–∏–º–æ—Å—Ç—å": f"{monthly_licensing_cost * 0.8:,.0f} —Ä—É–±/–º–µ—Å—è—Ü"
        },
        {
            "–°—Ç—Ä–∞—Ç–µ–≥–∏—è": "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è",
            "–û–ø–∏—Å–∞–Ω–∏–µ": "AI –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å–ø—Ä–æ—Å–∞, –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Ä–∞–º–∫–∞—Ö –ª–∏–º–∏—Ç–æ–≤",
            "–≠—Ñ—Ñ–µ–∫—Ç": "–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è 30-40% –ø–æ—Ç–µ—Ä—å –æ—Ç surge –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π",
            "–°—Ç–æ–∏–º–æ—Å—Ç—å": "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ R&D"
        },
        {
            "–°—Ç—Ä–∞—Ç–µ–≥–∏—è": "–î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤",
            "–û–ø–∏—Å–∞–Ω–∏–µ": "–î–æ—Å—Ç–∞–≤–∫–∞, –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏, subscription –º–æ–¥–µ–ª–∏",
            "–≠—Ñ—Ñ–µ–∫—Ç": "–ù–æ–≤—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–æ—Ö–æ–¥–∞, —Å–Ω–∏–∂–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è",
            "–°—Ç–æ–∏–º–æ—Å—Ç—å": "–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞–ø–∏—Ç–∞–ª–æ–≤–ª–æ–∂–µ–Ω–∏—è"
        },
        {
            "–°—Ç—Ä–∞—Ç–µ–≥–∏—è": "–õ–æ–±–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞",
            "–û–ø–∏—Å–∞–Ω–∏–µ": "–†–∞–±–æ—Ç–∞ —Å —Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞–º–∏, –æ—Ç—Ä–∞—Å–ª–µ–≤—ã–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏",
            "–≠—Ñ—Ñ–µ–∫—Ç": "–°–º—è–≥—á–µ–Ω–∏–µ –±—É–¥—É—â–∏—Ö —Ä–µ–≥—É–ª—è—Ç–æ—Ä–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π",
            "–°—Ç–æ–∏–º–æ—Å—Ç—å": "–ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã"
        }
    ]
    
    strategies_df = pd.DataFrame(strategies)
    st.dataframe(strategies_df, use_container_width=True)

def pandemic_scenario():
    """–°—Ü–µ–Ω–∞—Ä–∏–π –ø–∞–Ω–¥–µ–º–∏–∏"""
    st.subheader("ü¶† –ü–∞–Ω–¥–µ–º–∏—è / –§–æ—Ä—Å-–º–∞–∂–æ—Ä–Ω—ã–µ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞")
    
    st.error("""
    **–°–∏—Ç—É–∞—Ü–∏—è**: –ü–∞–Ω–¥–µ–º–∏—è –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä–Ω—ã–µ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞ –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ –º–µ–Ω—è—é—Ç 
    –ø–∞—Ç—Ç–µ—Ä–Ω—ã –º–æ–±–∏–ª—å–Ω–æ—Å—Ç–∏. Lockdown, —É–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞, —Å—Ç—Ä–∞—Ö –ø–µ—Ä–µ–¥ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º.
    """)
    
    # –§–∞–∑—ã –ø–∞–Ω–¥–µ–º–∏–∏
    pandemic_phase = st.selectbox(
        "–§–∞–∑–∞ –ø–∞–Ω–¥–µ–º–∏–∏:",
        ["üîí Lockdown (–ø–æ–ª–Ω–∞—è –∏–∑–æ–ª—è—Ü–∏—è)", "üìâ Partial restrictions", "üìà Recovery phase", "üÜï New normal"]
    )
    
    col1, col2 = st.columns(2)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–∞–∑—ã
    if pandemic_phase == "üîí Lockdown (–ø–æ–ª–Ω–∞—è –∏–∑–æ–ª—è—Ü–∏—è)":
        default_demand = -80
        default_essential = 20
        default_safety = 80
    elif pandemic_phase == "üìâ Partial restrictions":
        default_demand = -50
        default_essential = 40
        default_safety = 60
    elif pandemic_phase == "üìà Recovery phase":
        default_demand = -20
        default_essential = 70
        default_safety = 30
    else:  # New normal
        default_demand = 10
        default_essential = 90
        default_safety = 10
    
    with col1:
        st.markdown(f"**üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {pandemic_phase}**")
        
        demand_change = st.slider("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å–ø—Ä–æ—Å–∞ (%)", -90, 50, default_demand)
        essential_trips_share = st.slider("–î–æ–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫ (%)", 10, 90, default_essential)
        safety_premium = st.slider("–ü—Ä–µ–º–∏—è –∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å vs –æ–±—â.—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç (%)", 0, 100, default_safety)
        
    with col2:
        st.markdown("**üöó –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞**")
        
        safety_measures_cost = st.slider("–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ safety –º–µ—Ä—ã (% –æ—Ç –≤—ã—Ä—É—á–∫–∏)", 0, 15, 8)
        delivery_expansion = st.slider("Expansion –≤ –¥–æ—Å—Ç–∞–≤–∫—É (% –¥–æ–ø. –≤—ã—Ä—É—á–∫–∏)", 0, 50, 25)
        pricing_adjustment = st.slider("–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ü–µ–Ω (%)", -30, 30, 0)
    
    # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    base_monthly_volume = 2_000_000
    base_aov = 350
    base_take_rate = 25
    
    # –†–∞—Å—á–µ—Ç –≤–ª–∏—è–Ω–∏—è –ø–∞–Ω–¥–µ–º–∏–∏
    
    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–ø—Ä–æ—Å–∞ —Å —É—á–µ—Ç–æ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ–µ–∑–¥–æ–∫
    new_volume = base_monthly_volume * (1 + demand_change / 100)
    
    # Safety premium effect - –ª—é–¥–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é—Ç —Ç–∞–∫—Å–∏ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–º—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
    safety_boost = base_monthly_volume * 0.1 * (safety_premium / 100)  # 10% –±–∞–∑—ã –º–æ–≥—É—Ç –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è
    final_volume = new_volume + safety_boost
    
    # –í–ª–∏—è–Ω–∏–µ –Ω–∞ AOV
    new_aov = base_aov * (1 + pricing_adjustment / 100)
    
    # –î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ –¥–æ—Å—Ç–∞–≤–∫—É
    delivery_revenue = base_monthly_volume * base_aov * (base_take_rate / 100) * (delivery_expansion / 100)
    
    # –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    base_revenue = final_volume * new_aov * (base_take_rate / 100)
    safety_costs = base_revenue * (safety_measures_cost / 100)
    
    total_revenue = base_revenue + delivery_revenue
    net_revenue = total_revenue - safety_costs
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–≤—ã–º —Å—Ü–µ–Ω–∞—Ä–∏–µ–º
    base_total_revenue = base_monthly_volume * base_aov * (base_take_rate / 100)
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    st.subheader("üìà –í–ª–∏—è–Ω–∏–µ –Ω–∞ –±–∏–∑–Ω–µ—Å-–ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
    
    col1, col2, col3, col4 = st.columns(4)
    
    volume_change = ((final_volume - base_monthly_volume) / base_monthly_volume) * 100
    revenue_change = ((total_revenue - base_total_revenue) / base_total_revenue) * 100
    
    with col1:
        st.metric("–û–±—ä–µ–º –ø–æ–µ–∑–¥–æ–∫", f"{final_volume:,.0f}", f"{volume_change:+.1f}%")
    
    with col2:
        st.metric("AOV", f"{new_aov:.0f} —Ä—É–±", f"{pricing_adjustment:+.0f}%")
    
    with col3:
        st.metric("–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞", f"{total_revenue:,.0f} —Ä—É–±", f"{revenue_change:+.1f}%")
    
    with col4:
        st.metric("–ß–∏—Å—Ç–∞—è –≤—ã—Ä—É—á–∫–∞", f"{net_revenue:,.0f} —Ä—É–±", 
                 f"{((net_revenue - base_total_revenue) / base_total_revenue * 100):+.1f}%")
    
    # Breakdown –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –≤—ã—Ä—É—á–∫–∏
    if delivery_revenue > 0:
        st.subheader("üçï –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—ã—Ä—É—á–∫–∏")
        
        fig = go.Figure(data=[go.Pie(
            labels=['Ride-hailing', 'Delivery'],
            values=[base_revenue, delivery_revenue],
            hole=0.3
        )])
        
        fig.update_layout(title="–î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ —É—Å–ª–æ–≤–∏—è—Ö –ø–∞–Ω–¥–µ–º–∏–∏", height=300)
        st.plotly_chart(fig, use_container_width=True)
    
    # –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å–∞–π—Ç—ã
    st.subheader("üí° –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å–∞–π—Ç—ã")
    
    if revenue_change > 0:
        st.success(f"""
        üéØ **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤ –∫—Ä–∏–∑–∏—Å–µ**: –í—ã—Ä—É—á–∫–∞ –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ {revenue_change:.1f}%
        
        **–§–∞–∫—Ç–æ—Ä—ã —É—Å–ø–µ—Ö–∞**:
        ‚Ä¢ Safety premium: +{safety_boost:,.0f} –ø–æ–µ–∑–¥–æ–∫
        ‚Ä¢ –î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: +{delivery_revenue:,.0f} —Ä—É–± –≤—ã—Ä—É—á–∫–∏
        ‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        """)
    else:
        st.warning(f"""
        ‚ö†Ô∏è **–°–ª–æ–∂–Ω—ã–π –ø–µ—Ä–∏–æ–¥**: –í—ã—Ä—É—á–∫–∞ —Å–Ω–∏–∑–∏–ª–∞—Å—å –Ω–∞ {abs(revenue_change):.1f}%
        
        **–§–∞–∫—Ç–æ—Ä—ã —Å–Ω–∏–∂–µ–Ω–∏—è**:
        ‚Ä¢ –û–±—â–µ–µ –ø–∞–¥–µ–Ω–∏–µ —Å–ø—Ä–æ—Å–∞: {demand_change}%
        ‚Ä¢ –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {safety_costs:,.0f} —Ä—É–±
        ‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –º–æ–±–∏–ª—å–Ω–æ—Å—Ç–∏
        """)
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ñ–∞–∑–∞–º
    phase_recommendations = {
        "üîí Lockdown (–ø–æ–ª–Ω–∞—è –∏–∑–æ–ª—è—Ü–∏—è)": [
            "–ü–æ–ª–Ω—ã–π pivot –≤ –¥–æ—Å—Ç–∞–≤–∫—É –µ–¥—ã –∏ —Ç–æ–≤–∞—Ä–æ–≤",
            "–ú–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤",
            "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π (—Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø–æ–º–æ—â—å)",
            "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ recovery phase"
        ],
        "üìâ Partial restrictions": [
            "Hybrid –º–æ–¥–µ–ª—å: rides + delivery",
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ safety –º–µ—Ä—ã",
            "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ safety –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤",
            "Flexible pricing –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–ø—Ä–æ—Å–∞"
        ],
        "üìà Recovery phase": [
            "–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            "–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ü–µ–Ω",
            "Expansion supply side",
            "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ new normal"
        ],
        "üÜï New normal": [
            "–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö user behavior",
            "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ technology (contactless)",
            "Expansion –≤ —Å–º–µ–∂–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã",
            "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–ª–µ–¥—É—é—â–∏–º –∫—Ä–∏–∑–∏—Å–∞–º"
        ]
    }
    
    st.markdown(f"### üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ñ–∞–∑—ã '{pandemic_phase}':")
    for rec in phase_recommendations[pandemic_phase]:
        st.write(f"‚Ä¢ {rec}")

def public_transport_scenario():
    """–†–∞–∑–≤–∏—Ç–∏–µ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"""
    st.subheader("üöá –†–∞–∑–≤–∏—Ç–∏–µ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
    
    st.info("""
    **–°–∏—Ç—É–∞—Ü–∏—è**: –ì–æ—Ä–æ–¥ –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–µ—Ç –≤ —Ä–∞–∑–≤–∏—Ç–∏–µ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ - –Ω–æ–≤—ã–µ –ª–∏–Ω–∏–∏ –º–µ—Ç—Ä–æ, 
    BRT, —É–ª—É—á—à–µ–Ω–∏–µ –∞–≤—Ç–æ–±—É—Å–Ω–æ–π —Å–µ—Ç–∏. –†–∞—Å—Ç–µ—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è —Å –±–æ–ª–µ–µ –¥–µ—à–µ–≤–æ–π –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–æ–π.
    """)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üöá –†–∞–∑–≤–∏—Ç–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞**")
        
        metro_expansion = st.slider("–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –º–µ—Ç—Ä–æ (–Ω–æ–≤—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π)", 0, 20, 8)
        bus_improvement = st.slider("–£–ª—É—á—à–µ–Ω–∏–µ –∞–≤—Ç–æ–±—É—Å–Ω–æ–π —Å–µ—Ç–∏ (%)", 0, 50, 25)
        public_transport_price = st.slider("–¶–µ–Ω–∞ –ø–æ–µ–∑–¥–∫–∏ –≤ –æ–±—â.—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ (—Ä—É–±)", 20, 80, 45)
        
        # –í–ª–∏—è–Ω–∏–µ –Ω–∞ ride-hailing
        coverage_impact = st.slider("–ü–æ–∫—Ä—ã—Ç–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ ride-hailing (%)", 30, 80, 55)
        
    with col2:
        st.markdown("**üöó –¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏**")
        
        current_aov = 350
        current_frequency = 4.2
        current_users = 150000
        price_elasticity = 2.1  # –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ —Ü–µ–Ω–µ
        
        st.metric("–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ ride-hailing", f"{current_aov} —Ä—É–±")
        st.metric("–¶–µ–Ω–∞ –æ–±—â.—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", f"{public_transport_price} —Ä—É–±")
        st.metric("–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω", f"{current_aov/public_transport_price:.1f}x")
    
    # –†–∞—Å—á–µ—Ç –≤–ª–∏—è–Ω–∏—è
    
    # Price advantage –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    price_ratio = current_aov / public_transport_price
    
    # –û—Ü–µ–Ω–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    # –≠–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å —Å–ø—Ä–æ—Å–∞: —á–µ–º –±–æ–ª—å—à–µ —Ä–∞–∑–Ω–∏—Ü–∞ –≤ —Ü–µ–Ω–µ, —Ç–µ–º –±–æ–ª—å—à–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Ç—Å—è
    demand_elasticity_effect = min(0.4, (price_ratio - 3) * 0.1)  # –ú–∞–∫—Å–∏–º—É–º 40% –º–æ–≥—É—Ç –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è
    
    # –í–ª–∏—è–Ω–∏–µ –ø–æ–∫—Ä—ã—Ç–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
    coverage_effect = (coverage_impact / 100) * 0.3  # –î–æ 30% –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–ª–∏—è–Ω–∏—è
    
    total_demand_loss = (demand_elasticity_effect + coverage_effect) * 100
    
    # –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –æ–±—â.—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    quality_multiplier = 1 + (bus_improvement / 100) * 0.5
    metro_effect = metro_expansion * 0.02  # –ö–∞–∂–¥–∞—è —Å—Ç–∞–Ω—Ü–∏—è = 2% –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–ª–∏—è–Ω–∏—è
    
    final_demand_loss = min(60, total_demand_loss * quality_multiplier + metro_effect * 100)
    
    # –í–ª–∏—è–Ω–∏–µ –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç—ã
    # –ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Å—Ç—Ä–∞–¥–∞—é—Ç –∫–æ—Ä–æ—Ç–∫–∏–µ –ø–æ–µ–∑–¥–∫–∏ –≤ —Ü–µ–Ω—Ç—Ä–µ
    short_trips_loss = final_demand_loss * 1.5
    long_trips_loss = final_demand_loss * 0.6
    premium_trips_loss = final_demand_loss * 0.3  # –ü—Ä–µ–º–∏—É–º —Å–µ–≥–º–µ–Ω—Ç –º–µ–Ω–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
    
    # –ù–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    new_users = current_users * (1 - final_demand_loss / 100)
    new_frequency = current_frequency * 0.95  # –ù–µ–±–æ–ª—å—à–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã
    
    # –ê–¥–∞–ø—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    st.subheader("üìä –°–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ")
    
    segments_data = {
        '–°–µ–≥–º–µ–Ω—Ç': ['–ö–æ—Ä–æ—Ç–∫–∏–µ –ø–æ–µ–∑–¥–∫–∏ (<3 –∫–º)', '–°—Ä–µ–¥–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏ (3-10 –∫–º)', 
                   '–î–ª–∏–Ω–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏ (>10 –∫–º)', '–ü—Ä–µ–º–∏—É–º —Å–µ–≥–º–µ–Ω—Ç'],
        '–ü–æ—Ç–µ—Ä—è —Å–ø—Ä–æ—Å–∞': [f"{short_trips_loss:.1f}%", f"{final_demand_loss:.1f}%", 
                         f"{long_trips_loss:.1f}%", f"{premium_trips_loss:.1f}%"],
        '–ü—Ä–∏—á–∏–Ω–∞': ['–ü—Ä—è–º–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è —Å –º–µ—Ç—Ä–æ/–∞–≤—Ç–æ–±—É—Å–æ–º', '–£–ª—É—á—à–µ–Ω–∏–µ —Å–≤—è–∑–Ω–æ—Å—Ç–∏', 
                   '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ', '–ù–∏–∑–∫–∞—è price sensitivity']
    }
    
    st.table(segments_data)
    
    # –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –≤–ª–∏—è–Ω–∏–µ
    col1, col2, col3 = st.columns(3)
    
    revenue_impact = ((new_users * new_frequency) - (current_users * current_frequency)) / (current_users * current_frequency) * 100
    
    with col1:
        st.metric("–ü–æ—Ç–µ—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", f"{current_users - new_users:,.0f}", 
                 f"{((new_users - current_users) / current_users * 100):+.1f}%")
    
    with col2:
        st.metric("–í–ª–∏—è–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–æ—Ç—É", f"{new_frequency:.1f}", 
                 f"{((new_frequency - current_frequency) / current_frequency * 100):+.1f}%")
    
    with col3:
        st.metric("–û–±—â–µ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –≤—ã—Ä—É—á–∫—É", f"{revenue_impact:+.1f}%", 
                 "Critical" if revenue_impact < -20 else "Moderate")
    
    # –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
    st.subheader("üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏")
    
    if revenue_impact < -25:
        st.error("üö® **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –≤–ª–∏—è–Ω–∏–µ** - –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
        strategies = [
            "**First/Last mile solution**: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º",
            "**Premium positioning**: –§–æ–∫—É—Å –Ω–∞ –∫–æ–º—Ñ–æ—Ä—Ç –∏ —Å–∫–æ—Ä–æ—Å—Ç—å vs —Ü–µ–Ω—É",
            "**Suburban expansion**: –†–∞–π–æ–Ω—ã —Å–æ —Å–ª–∞–±—ã–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º –æ–±—â.—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞",
            "**Multi-modal app**: –î–æ–±–∞–≤–∏—Ç—å –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
        ]
    elif revenue_impact < -15:
        st.warning("‚ö†Ô∏è **–°–µ—Ä—å–µ–∑–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ** - –Ω—É–∂–Ω–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏—è value proposition")
        strategies = [
            "**Time advantage**: –ê–∫—Ü–µ–Ω—Ç –Ω–∞ —ç–∫–æ–Ω–æ–º–∏–∏ –≤—Ä–µ–º–µ–Ω–∏",
            "**Weather positioning**: –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –≤ –ø–ª–æ—Ö—É—é –ø–æ–≥–æ–¥—É",
            "**Group rides**: –°–Ω–∏–∂–µ–Ω–∏–µ cost per person",
            "**Corporate segment**: B2B —Ä–µ—à–µ–Ω–∏—è"
        ]
    else:
        st.info("üìä **–£–º–µ—Ä–µ–Ω–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ** - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞")
        strategies = [
            "**Partnership opportunities**: –°–æ–≤–º–µ—Å—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è —Å –≥–æ—Ä–æ–¥–æ–º",
            "**Complementary service**: Ride-hailing + –æ–±—â.—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
            "**Quality differentiation**: –£–ª—É—á—à–µ–Ω–∏–µ user experience",
            "**New use cases**: –ü–æ–µ–∑–¥–∫–∏ –≤ rush hour, –Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è"
        ]
    
    for strategy in strategies:
        st.write(f"‚Ä¢ {strategy}")
    
    # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    st.markdown("""
    ### üí° –°–∫—Ä—ã—Ç—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    
    1. **Intermodal integration**: –°—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –≥–æ—Ä–æ–¥—Å–∫–æ–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã
    2. **Peak hour advantage**: –ö–æ–≥–¥–∞ –æ–±—â.—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω
    3. **Accessibility**: –î–ª—è –ª—é–¥–µ–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
    4. **Cargo/delivery**: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    5. **Data partnership**: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –º–æ–±–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –≥–æ—Ä–æ–¥–∞
    """)

def new_city_launch_scenario():
    """–ó–∞–ø—É—Å–∫ –≤ –Ω–æ–≤–æ–º –≥–æ—Ä–æ–¥–µ"""
    st.subheader("üöó –ó–∞–ø—É—Å–∫ –≤ –Ω–æ–≤–æ–º –≥–æ—Ä–æ–¥–µ")
    
    st.success("""
    **–°–∏—Ç—É–∞—Ü–∏—è**: –ü–ª–∞–Ω–∏—Ä—É–µ—Ç–µ launch –≤ –Ω–æ–≤–æ–º –≥–æ—Ä–æ–¥–µ. –ù—É–∂–Ω–æ —Å–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å unit economics, 
    –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø—Ä–æ–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –∏ timeline –¥–æ breakeven.
    """)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–æ—Ä–æ–¥–∞
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üèôÔ∏è –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≥–æ—Ä–æ–¥–∞**")
        
        city_population = st.number_input("–ù–∞—Å–µ–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞", 300000, 5000000, 1200000, 50000)
        car_penetration = st.slider("–ê–≤—Ç–æ–º–æ–±–∏–ª–∏–∑–∞—Ü–∏—è (–∞–≤—Ç–æ –Ω–∞ 1000 –∂–∏—Ç–µ–ª–µ–π)", 200, 600, 350)
        avg_income = st.number_input("–°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ (—Ä—É–±/–º–µ—Å—è—Ü)", 30000, 150000, 55000, 5000)
        public_transport_quality = st.slider("–ö–∞—á–µ—Å—Ç–≤–æ –æ–±—â.—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (1-10)", 1, 10, 5)
        
    with col2:
        st.markdown("**üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∑–∞–ø—É—Å–∫–∞**")
        
        launch_strategy = st.selectbox("–°—Ç—Ä–∞—Ç–µ–≥–∏—è –∑–∞–ø—É—Å–∫–∞:", 
                                     ["Aggressive (–±—ã—Å—Ç—Ä—ã–π –∑–∞—Ö–≤–∞—Ç)", "Moderate (–ø–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç)", 
                                      "Conservative (–æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–π –≤—Ö–æ–¥)"])
        
        initial_promo_budget = st.number_input("–ü—Ä–æ–º–æ-–±—é–¥–∂–µ—Ç –Ω–∞ launch (—Ä—É–±)", 1000000, 50000000, 8000000, 500000)
        target_market_share = st.slider("–¶–µ–ª–µ–≤–∞—è –¥–æ–ª—è —Ä—ã–Ω–∫–∞ —á–µ—Ä–µ–∑ –≥–æ–¥ (%)", 5, 40, 20)
        
        # –ö–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è
        existing_competitors = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤", 0, 5, 2)
    
    # –†–∞—Å—á–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ —Ä—ã–Ω–∫–∞
    
    # Addressable market
    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ 15-25% –Ω–∞—Å–µ–ª–µ–Ω–∏—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ride-hailing
    market_penetration_potential = 0.15 + (avg_income - 30000) / 120000 * 0.1  # Higher income = higher penetration
    market_penetration_potential = min(0.25, max(0.10, market_penetration_potential))
    
    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—â.—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (–ø–ª–æ—Ö–æ–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç = –±–æ–ª—å—à–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª)
    transport_multiplier = 1.5 - (public_transport_quality / 10) * 0.5
    
    # –ö–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è —Å–Ω–∏–∂–∞–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª
    competition_factor = 1 / (1 + existing_competitors * 0.2)
    
    total_addressable_market = city_population * market_penetration_potential * transport_multiplier * competition_factor
    
    # –ü—Ä–æ–≥–Ω–æ–∑ –º–µ—Ç—Ä–∏–∫
    estimated_frequency = 2.5 + (avg_income - 30000) / 60000  # –ë–æ–ª—å—à–µ –¥–æ—Ö–æ–¥—ã = –±–æ–ª—å—à–µ –ø–æ–µ–∑–¥–æ–∫
    estimated_frequency = min(5.0, max(1.5, estimated_frequency))
    
    estimated_aov = 200 + (avg_income - 30000) / 1000  # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –¥–æ—Ö–æ–¥–æ–≤
    estimated_aov = min(500, max(150, estimated_aov))
    
    # CAC –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏
    strategy_multipliers = {"Aggressive (–±—ã—Å—Ç—Ä—ã–π –∑–∞—Ö–≤–∞—Ç)": 2.0, "Moderate (–ø–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç)": 1.3, "Conservative (–æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–π –≤—Ö–æ–¥)": 1.0}
    base_cac = 800 + existing_competitors * 300
    estimated_cac = base_cac * strategy_multipliers[launch_strategy]
    
    # Timeline –∑–∞–ø—É—Å–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
    months_to_target = 12 if launch_strategy.startswith("Aggressive") else 18 if launch_strategy.startswith("Moderate") else 24
    
    # –†–∞—Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –º–µ—Å—è—Ü–∞–º
    target_users = total_addressable_market * (target_market_share / 100)
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    st.subheader("üìä –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä—ã–Ω–∫–∞")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä—ã–Ω–∫–∞", f"{total_addressable_market:,.0f}")
    
    with col2:
        st.metric("–¶–µ–ª–µ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", f"{target_users:,.0f}")
    
    with col3:
        st.metric("–ü—Ä–æ–≥–Ω–æ–∑ AOV", f"{estimated_aov:.0f} —Ä—É–±")
    
    with col4:
        st.metric("–ü—Ä–æ–≥–Ω–æ–∑ CAC", f"{estimated_cac:,.0f} —Ä—É–±")
    
    # –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –º–æ–¥–µ–ª—å –∑–∞–ø—É—Å–∫–∞
    create_launch_financial_model(target_users, estimated_aov, estimated_frequency, estimated_cac, 
                                 initial_promo_budget, months_to_target, launch_strategy)
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞–ø—É—Å–∫—É
    show_launch_recommendations(city_population, avg_income, public_transport_quality, 
                               existing_competitors, launch_strategy)

def create_launch_financial_model(target_users: float, aov: float, frequency: float, cac: float,
                                 promo_budget: int, months_to_target: int, strategy: str):
    """–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –º–æ–¥–µ–ª—å –∑–∞–ø—É—Å–∫–∞ –≤ –Ω–æ–≤–æ–º –≥–æ—Ä–æ–¥–µ"""
    
    st.subheader("üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –º–æ–¥–µ–ª—å –∑–∞–ø—É—Å–∫–∞")
    
    # –ö—Ä–∏–≤–∞—è —Ä–æ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    months = list(range(1, months_to_target + 1))
    
    # S-–æ–±—Ä–∞–∑–Ω–∞—è –∫—Ä–∏–≤–∞—è —Ä–æ—Å—Ç–∞
    if strategy.startswith("Aggressive"):
        # –ë—ã—Å—Ç—Ä—ã–π —Ä–æ—Å—Ç –≤ –Ω–∞—á–∞–ª–µ, –ø–æ—Ç–æ–º –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ
        users_curve = [target_users * (1 - np.exp(-3 * m / months_to_target)) for m in months]
    elif strategy.startswith("Moderate"):
        # –õ–∏–Ω–µ–π–Ω—ã–π —Ä–æ—Å—Ç
        users_curve = [target_users * m / months_to_target for m in months]
    else:
        # –ú–µ–¥–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ä—Ç, –ø–æ—Ç–æ–º —É—Å–∫–æ—Ä–µ–Ω–∏–µ
        users_curve = [target_users * (m / months_to_target) ** 1.5 for m in months]
    
    # –†–∞—Å—á–µ—Ç –ø–æ–º–µ—Å—è—á–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
    monthly_data = []
    cumulative_cac_spend = 0
    cumulative_revenue = 0
    
    for i, month in enumerate(months):
        current_users = users_curve[i]
        new_users = current_users if i == 0 else current_users - users_curve[i-1]
        
        # CAC spend
        monthly_cac_spend = new_users * cac
        cumulative_cac_spend += monthly_cac_spend
        
        # –ü—Ä–æ–º–æ —Ä–∞—Å—Ö–æ–¥—ã (–±–æ–ª—å—à–µ –≤ –Ω–∞—á–∞–ª–µ)
        promo_weight = 2 - (month / months_to_target)  # –û—Ç 2 –¥–æ 1
        monthly_promo = (promo_budget / months_to_target) * promo_weight
        
        # Revenue (—Å —É—á–µ—Ç–æ–º ramp-up –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
        # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –ø–µ—Ä–≤—ã–π –º–µ—Å—è—Ü –¥–µ–ª–∞—é—Ç —Ç–æ–ª—å–∫–æ 50% –æ—Ç –ø–æ–ª–Ω–æ–π —á–∞—Å—Ç–æ—Ç—ã
        active_users = current_users * 0.85  # 85% –∞–∫—Ç–∏–≤–Ω—ã –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü
        monthly_revenue = active_users * aov * frequency * 0.25  # 25% take rate
        cumulative_revenue += monthly_revenue
        
        # –ü—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å
        monthly_costs = monthly_cac_spend + monthly_promo + (current_users * 15)  # 15 —Ä—É–± ops cost –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        monthly_profit = monthly_revenue - monthly_costs
        
        monthly_data.append({
            'month': month,
            'users': current_users,
            'new_users': new_users,
            'revenue': monthly_revenue,
            'cac_spend': monthly_cac_spend,
            'promo_spend': monthly_promo,
            'profit': monthly_profit,
            'cumulative_revenue': cumulative_revenue,
            'cumulative_cac': cumulative_cac_spend
        })
    
    # –ì—Ä–∞—Ñ–∏–∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –º–æ–¥–µ–ª–∏
    df = pd.DataFrame(monthly_data)
    
    fig = make_subplots(
        rows=2, cols=2,
        subplot_titles=('–†–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', '–ú–µ—Å—è—á–Ω–∞—è –≤—ã—Ä—É—á–∫–∞ vs —Ä–∞—Å—Ö–æ–¥—ã',
                       '–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å', 'Breakeven –∞–Ω–∞–ª–∏–∑'),
        specs=[[{"secondary_y": False}, {"secondary_y": False}],
               [{"secondary_y": False}, {"secondary_y": False}]]
    )
    
    # –ì—Ä–∞—Ñ–∏–∫ 1: –†–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    fig.add_trace(
        go.Scatter(x=df['month'], y=df['users'], mode='lines+markers',
                  name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', line=dict(color='blue', width=3)),
        row=1, col=1
    )
    
    # –ì—Ä–∞—Ñ–∏–∫ 2: –í—ã—Ä—É—á–∫–∞ vs —Ä–∞—Å—Ö–æ–¥—ã
    fig.add_trace(
        go.Bar(x=df['month'], y=df['revenue'], name='–í—ã—Ä—É—á–∫–∞', marker_color='green'),
        row=1, col=2
    )
    fig.add_trace(
        go.Bar(x=df['month'], y=df['cac_spend'] + df['promo_spend'], name='–†–∞—Å—Ö–æ–¥—ã', marker_color='red'),
        row=1, col=2
    )
    
    # –ì—Ä–∞—Ñ–∏–∫ 3: –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å
    cumulative_profit = np.cumsum(df['profit'])
    fig.add_trace(
        go.Scatter(x=df['month'], y=cumulative_profit, mode='lines+markers',
                  name='–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å', line=dict(color='purple', width=3)),
        row=2, col=1
    )
    fig.add_hline(y=0, line_dash="dash", line_color="black", row=2, col=1)
    
    # –ì—Ä–∞—Ñ–∏–∫ 4: ROI
    cumulative_spend = df['cumulative_cac'] + np.cumsum(df['promo_spend'])
    roi = (df['cumulative_revenue'] - cumulative_spend) / cumulative_spend * 100
    fig.add_trace(
        go.Scatter(x=df['month'], y=roi, mode='lines+markers',
                  name='ROI (%)', line=dict(color='orange', width=3)),
        row=2, col=2
    )
    fig.add_hline(y=0, line_dash="dash", line_color="black", row=2, col=2)
    
    fig.update_layout(height=600, showlegend=False)
    fig.update_xaxes(title_text="–ú–µ—Å—è—Ü")
    fig.update_yaxes(title_text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", row=1, col=1)
    fig.update_yaxes(title_text="–†—É–±", row=1, col=2)
    fig.update_yaxes(title_text="–†—É–±", row=2, col=1)
    fig.update_yaxes(title_text="ROI (%)", row=2, col=2)
    
    st.plotly_chart(fig, use_container_width=True)
    
    # –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3 = st.columns(3)
    
    breakeven_month = None
    for i, profit in enumerate(cumulative_profit):
        if profit > 0:
            breakeven_month = i + 1
            break
    
    total_investment = cumulative_spend[-1]
    final_revenue = df['cumulative_revenue'].iloc[-1]
    final_roi = roi.iloc[-1]
    
    with col1:
        if breakeven_month:
            st.metric("Breakeven", f"{breakeven_month} –º–µ—Å—è—Ü")
        else:
            st.metric("Breakeven", "–ù–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç")
    
    with col2:
        st.metric("–û–±—â–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", f"{total_investment:,.0f} —Ä—É–±")
    
    with col3:
        color = "success" if final_roi > 50 else "warning" if final_roi > 0 else "error"
        st.markdown(f"""
        <div class="{color}-card">
            <h4>ROI —á–µ—Ä–µ–∑ {months_to_target} –º–µ—Å</h4>
            <h2>{final_roi:.1f}%</h2>
        </div>
        """, unsafe_allow_html=True)

def show_launch_recommendations(population: int, income: int, transport_quality: int,
                               competitors: int, strategy: str):
    """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞–ø—É—Å–∫—É"""
    
    st.subheader("üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞–ø—É—Å–∫—É")
    
    # –û—Ü–µ–Ω–∫–∞ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞
    attractiveness_score = 0
    
    # –†–∞–∑–º–µ—Ä —Ä—ã–Ω–∫–∞
    if population > 1_500_000:
        attractiveness_score += 3
    elif population > 800_000:
        attractiveness_score += 2
    else:
        attractiveness_score += 1
    
    # –î–æ—Ö–æ–¥—ã
    if income > 80_000:
        attractiveness_score += 3
    elif income > 50_000:
        attractiveness_score += 2
    else:
        attractiveness_score += 1
    
    # –û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç (—á–µ–º —Ö—É–∂–µ, —Ç–µ–º –ª—É—á—à–µ –¥–ª—è –Ω–∞—Å)
    if transport_quality < 4:
        attractiveness_score += 3
    elif transport_quality < 7:
        attractiveness_score += 2
    else:
        attractiveness_score += 1
    
    # –ö–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è (—á–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –ª—É—á—à–µ)
    if competitors == 0:
        attractiveness_score += 3
    elif competitors <= 2:
        attractiveness_score += 2
    else:
        attractiveness_score += 1
    
    # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è
    if attractiveness_score >= 10:
        st.success("üéØ **–í—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π —Ä—ã–Ω–æ–∫** - –æ—Ç–ª–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞")
        priority = "–í—ã—Å–æ–∫–∏–π"
    elif attractiveness_score >= 7:
        st.info("üìä **–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–π —Ä—ã–Ω–æ–∫** - —Ö–æ—Ä–æ—à–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
        priority = "–°—Ä–µ–¥–Ω–∏–π"
    else:
        st.warning("‚ö†Ô∏è **–°–ª–æ–∂–Ω—ã–π —Ä—ã–Ω–æ–∫** - —Ç—Ä–µ–±—É–µ—Ç –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –∏ –±–æ–ª—å—à–∏—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π")
        priority = "–ù–∏–∑–∫–∏–π"
    
    # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations = []
    
    if income < 50_000:
        recommendations.append("üéØ **Price-sensitive market**: –§–æ–∫—É—Å –Ω–∞ –Ω–∏–∑–∫–∏–µ —Ü–µ–Ω—ã –∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã")
    
    if transport_quality > 7:
        recommendations.append("üöá **Strong public transport**: –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∫ premium alternative")
    
    if competitors >= 3:
        recommendations.append("üÜö **High competition**: –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è value proposition")
    
    if population < 500_000:
        recommendations.append("üèòÔ∏è **Small market**: –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
    
    # –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ñ–∞–∑–∞–º
    phase_recommendations = {
        "Aggressive (–±—ã—Å—Ç—Ä—ã–π –∑–∞—Ö–≤–∞—Ç)": [
            "–ú–∞—Å—Å–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–∞–º–ø–∞–Ω–∏–∏ –≤ –ø–µ—Ä–≤—ã–µ 3 –º–µ—Å—è—Ü–∞",
            "Aggressive driver onboarding —Å –±–æ–Ω—É—Å–∞–º–∏",
            "PR –∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è buzz'–∞",
            "–ë—ã—Å—Ç—Ä–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∑–æ–Ω—ã –ø–æ–∫—Ä—ã—Ç–∏—è"
        ],
        "Moderate (–ø–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç)": [
            "–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø–æ —Ä–∞–π–æ–Ω–∞–º",
            "–§–æ–∫—É—Å –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–∞ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞",
            "Partnerships —Å –º–µ—Å—Ç–Ω—ã–º–∏ –±–∏–∑–Ω–µ—Å–∞–º–∏",
            "Organic growth —á–µ—Ä–µ–∑ word-of-mouth"
        ],
        "Conservative (–æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–π –≤—Ö–æ–¥)": [
            "Pilot –≤ –æ–¥–Ω–æ–º —Ä–∞–π–æ–Ω–µ –≥–æ—Ä–æ–¥–∞",
            "–ì–ª—É–±–æ–∫–æ–µ –∏–∑—É—á–µ–Ω–∏–µ local preferences",
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã, —Ñ–æ–∫—É—Å –Ω–∞ retention",
            "–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫–∞—Ö"
        ]
    }
    
    st.markdown(f"### üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ '{strategy}':")
    for rec in phase_recommendations[strategy]:
        st.write(f"‚Ä¢ {rec}")
    
    if recommendations:
        st.markdown("### üéØ –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        for rec in recommendations:
            st.write(f"‚Ä¢ {rec}")

def promo_optimizer():
    """–û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤"""
    st.header("üí∞ –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤")
    
    st.markdown("""
    **–ü—Ä–æ–º–æ–∫–æ–¥—ã –≤ ride-hailing**: –º–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è, –Ω–æ —Å—ä–µ–¥–∞—é—â–∏–π –º–∞—Ä–∂—É. 
    –ö–ª—é—á - –Ω–∞–π—Ç–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –æ–±—ä–µ–º–æ–º –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –∏ unit economics.
    """)
    
    # –¢–∏–ø—ã –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    promo_type = st.selectbox(
        "–¢–∏–ø –ø—Ä–æ–º–æ–∫–∞–º–ø–∞–Ω–∏–∏:",
        [
            "üÜï –ü—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            "üîÑ –†–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö",
            "üíé Retention —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö",
            "üÜö –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è –∑–∞—â–∏—Ç–∞",
            "üéØ S–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ"
        ]
    )
    
    if promo_type == "üÜï –ü—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π":
        new_user_promo_optimization()
    elif promo_type == "üîÑ –†–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö":
        reactivation_promo_optimization()
    elif promo_type == "üíé Retention —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö":
        retention_promo_optimization()
    elif promo_type == "üÜö –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è –∑–∞—â–∏—Ç–∞":
        competitive_defense_promo()
    elif promo_type == "üéØ S–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ":
        segmented_promo_optimization()

def new_user_promo_optimization():
    """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    st.subheader("üÜï –ü—Ä–æ–º–æ–∫–æ–¥—ã –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–º–æ–∫–∞–º–ø–∞–Ω–∏–∏**")
        
        promo_discount = st.slider("–†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ (%)", 20, 80, 50)
        max_rides_promo = st.slider("–ú–∞–∫—Å–∏–º—É–º –ø–æ–µ–∑–¥–æ–∫ –ø–æ –ø—Ä–æ–º–æ", 1, 10, 3)
        promo_budget = st.number_input("–ë—é–¥–∂–µ—Ç –Ω–∞ –ø—Ä–æ–º–æ–∫–æ–¥—ã (—Ä—É–±)", 500000, 20000000, 3000000)
        
        # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        base_aov = 350
        base_conversion_rate = 5  # % –æ—Ç –ø–æ–∫–∞–∑–æ–≤ –ø—Ä–æ–º–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –≤ –ø–µ—Ä–≤—É—é –ø–æ–µ–∑–¥–∫—É
        
    with col2:
        st.markdown("**üìä –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã**")
        
        promo_elasticity = st.slider("–≠–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å –∫ —Ä–∞–∑–º–µ—Ä—É —Å–∫–∏–¥–∫–∏", 0.5, 2.0, 1.2)
        activation_rate = st.slider("–î–æ–ª—è –¥–µ–ª–∞—é—â–∏—Ö 2+ –ø–æ–µ–∑–¥–∫–∏ (%)", 30, 80, 55)
        organic_frequency = st.slider("–ß–∞—Å—Ç–æ—Ç–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–º–æ", 2.0, 6.0, 3.8)
        
    # –†–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–∞–º–ø–∞–Ω–∏–∏
    
    # –í–ª–∏—è–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Å–∫–∏–¥–∫–∏ –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏—é
    boosted_conversion = base_conversion_rate * (1 + (promo_discount / 100) * promo_elasticity)
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–µ–º –ø—Ä–∏–≤–ª–µ—á—å
    promo_aov = base_aov * (1 - promo_discount / 100)
    cost_per_promo_ride = base_aov - promo_aov
    
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –¥–∞–Ω–Ω–æ–º –±—é–¥–∂–µ—Ç–µ
    max_new_users = promo_budget / (cost_per_promo_ride * max_rides_promo)
    
    # –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
    actual_new_users = max_new_users * (boosted_conversion / 100) if boosted_conversion <= 100 else max_new_users
    
    # LTV –∞–Ω–∞–ª–∏–∑
    # –ü—Ä–æ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: –ø–µ—Ä–≤—ã–µ max_rides_promo –ø–æ —Å–∫–∏–¥–∫–µ, –ø–æ—Ç–æ–º organic
    promo_revenue = actual_new_users * max_rides_promo * promo_aov * 0.25  # 25% take rate
    
    # –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å
    activated_users = actual_new_users * (activation_rate / 100)
    organic_ltv_per_user = (base_aov * 0.25 * organic_frequency) / 0.12  # 12% –º–µ—Å—è—á–Ω—ã–π churn
    total_organic_revenue = activated_users * organic_ltv_per_user
    
    total_revenue = promo_revenue + total_organic_revenue
    effective_cac = promo_budget / actual_new_users if actual_new_users > 0 else float('inf')
    ltv_per_user = total_revenue / actual_new_users if actual_new_users > 0 else 0
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    st.subheader("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–º–æ–∫–∞–º–ø–∞–Ω–∏–∏")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–ü—Ä–∏–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", f"{actual_new_users:,.0f}")
    
    with col2:
        st.metric("–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π CAC", f"{effective_cac:,.0f} —Ä—É–±")
    
    with col3:
        st.metric("LTV –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", f"{ltv_per_user:,.0f} —Ä—É–±")
    
    with col4:
        ltv_cac_ratio = ltv_per_user / effective_cac if effective_cac != float('inf') else 0
        color = "success" if ltv_cac_ratio >= 3 else "warning" if ltv_cac_ratio >= 2 else "error"
        st.markdown(f"""
        <div class="{color}-card">
            <h4>LTV/CAC</h4>
            <h2>{ltv_cac_ratio:.1f}:1</h2>
        </div>
        """, unsafe_allow_html=True)
    
    # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–º–æ-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    create_promo_optimization_chart(promo_budget, base_aov, base_conversion_rate, 
                                   activation_rate, organic_frequency, promo_elasticity)
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    show_promo_recommendations(ltv_cac_ratio, promo_discount, activation_rate)

def create_promo_optimization_chart(budget: int, aov: float, base_conv: float,
                                   activation: float, frequency: float, elasticity: float):
    """–ì—Ä–∞—Ñ–∏–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    
    st.subheader("üéØ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–º–æ–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    
    # –°—Ü–µ–Ω–∞—Ä–∏–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏ —Å–∫–∏–¥–æ–∫
    discount_range = np.arange(20, 81, 10)
    scenarios = []
    
    for discount in discount_range:
        # –†–∞—Å—á–µ—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å–∫–∏–¥–∫–∏
        boosted_conv = base_conv * (1 + (discount / 100) * elasticity)
        promo_aov = aov * (1 - discount / 100)
        cost_per_ride = aov - promo_aov
        
        max_users = budget / (cost_per_ride * 3)  # 3 –ø—Ä–æ–º–æ-–ø–æ–µ–∑–¥–∫–∏
        actual_users = max_users * min(boosted_conv / 100, 1.0)
        
        # LTV —Ä–∞—Å—á–µ—Ç
        promo_revenue = actual_users * 3 * promo_aov * 0.25
        activated = actual_users * (activation / 100)
        organic_ltv = (aov * 0.25 * frequency) / 0.12
        total_revenue = promo_revenue + activated * organic_ltv
        
        cac = budget / actual_users if actual_users > 0 else 0
        ltv = total_revenue / actual_users if actual_users > 0 else 0
        roi = (total_revenue - budget) / budget * 100 if budget > 0 else 0
        
        scenarios.append({
            'discount': discount,
            'users': actual_users,
            'cac': cac,
            'ltv': ltv,
            'roi': roi,
            'ltv_cac_ratio': ltv / cac if cac > 0 else 0
        })
    
    df_scenarios = pd.DataFrame(scenarios)
    
    # –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    fig = make_subplots(
        rows=2, cols=2,
        subplot_titles=('–ü—Ä–∏–≤–ª–µ—á–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', 'LTV/CAC —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ',
                       'ROI –∫–∞–º–ø–∞–Ω–∏–∏', 'CAC vs LTV'),
        specs=[[{"type": "bar"}, {"type": "bar"}],
               [{"type": "bar"}, {"type": "scatter"}]]
    )
    
    # –ì—Ä–∞—Ñ–∏–∫ 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    fig.add_trace(
        go.Bar(x=df_scenarios['discount'], y=df_scenarios['users'],
               marker_color='blue', showlegend=False),
        row=1, col=1
    )
    
    # –ì—Ä–∞—Ñ–∏–∫ 2: LTV/CAC
    fig.add_trace(
        go.Bar(x=df_scenarios['discount'], y=df_scenarios['ltv_cac_ratio'],
               marker_color='green', showlegend=False),
        row=1, col=2
    )
    
    # –ì—Ä–∞—Ñ–∏–∫ 3: ROI
    colors = ['green' if roi > 0 else 'red' for roi in df_scenarios['roi']]
    fig.add_trace(
        go.Bar(x=df_scenarios['discount'], y=df_scenarios['roi'],
               marker_color=colors, showlegend=False),
        row=2, col=1
    )
    
    # –ì—Ä–∞—Ñ–∏–∫ 4: CAC vs LTV scatter
    fig.add_trace(
        go.Scatter(x=df_scenarios['cac'], y=df_scenarios['ltv'],
                  mode='markers+text', text=[f"{d}%" for d in df_scenarios['discount']],
                  textposition="top center", marker=dict(size=10, color='purple'),
                  showlegend=False),
        row=2, col=2
    )
    
    fig.update_layout(height=600)
    fig.update_xaxes(title_text="–†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ (%)", row=1, col=1)
    fig.update_xaxes(title_text="–†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ (%)", row=1, col=2)
    fig.update_xaxes(title_text="–†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ (%)", row=2, col=1)
    fig.update_xaxes(title_text="CAC (—Ä—É–±)", row=2, col=2)
    fig.update_yaxes(title_text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", row=1, col=1)
    fig.update_yaxes(title_text="LTV/CAC", row=1, col=2)
    fig.update_yaxes(title_text="ROI (%)", row=2, col=1)
    fig.update_yaxes(title_text="LTV (—Ä—É–±)", row=2, col=2)
    
    st.plotly_chart(fig, use_container_width=True)
    
    # –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞
    optimal_scenario = max(scenarios, key=lambda x: x['roi'])
    st.success(f"""
    üéØ **–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏**: {optimal_scenario['discount']}%
    
    ‚Ä¢ –ü—Ä–∏–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {optimal_scenario['users']:,.0f}
    ‚Ä¢ LTV/CAC: {optimal_scenario['ltv_cac_ratio']:.1f}:1
    ‚Ä¢ ROI –∫–∞–º–ø–∞–Ω–∏–∏: {optimal_scenario['roi']:.1f}%
    """)

def show_promo_recommendations(ltv_cac_ratio: float, discount: int, activation: int):
    """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º"""
    
    st.subheader("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–º–æ—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
    
    if ltv_cac_ratio >= 3:
        st.success("‚úÖ **–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–º–æ—Å—Ç—Ä–∞—Ç–µ–≥–∏—è** - –º–æ–∂–Ω–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å")
        recs = [
            "–£–≤–µ–ª–∏—á–∏—Ç—å –±—é–¥–∂–µ—Ç –Ω–∞ –ø—Ä–æ–º–æ–∫–æ–¥—ã –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤",
            "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–º–æ-–ø–æ–µ–∑–¥–æ–∫",
            "–†–∞—Å—à–∏—Ä–∏—Ç—å –∫–∞–Ω–∞–ª—ã –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è —Å —Ç–µ–∫—É—â–∏–º–∏ –ø—Ä–æ–º–æ"
        ]
    elif ltv_cac_ratio >= 2:
        st.warning("‚ö†Ô∏è **–ü—Ä–æ–º–æ—Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞ –≥—Ä–∞–Ω–∏** - –Ω—É–∂–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
        recs = [
            "–°–Ω–∏–∑–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ –∏ –∫–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å targeting'–æ–º",
            "–§–æ–∫—É—Å –Ω–∞ —É–ª—É—á—à–µ–Ω–∏–µ activation rate —á–µ—Ä–µ–∑ onboarding",
            "A/B —Ç–µ—Å—Ç —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–º–æ-–º–µ—Ö–∞–Ω–∏–∫ (cashback vs —Å–∫–∏–¥–∫–∞)"
        ]
    else:
        st.error("üö® **–ù–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã** - —Å—Ä–æ—á–Ω–æ –ø–µ—Ä–µ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å")
        recs = [
            "–ö–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ —Å–Ω–∏–∑–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏",
            "–ü–µ—Ä–µ–π—Ç–∏ —Å blanket –ø—Ä–æ–º–æ –Ω–∞ targeted",
            "–°—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ organic –∫–∞–Ω–∞–ª–∞—Ö"
        ]
    
    for rec in recs:
        st.write(f"‚Ä¢ {rec}")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã
    if discount > 60:
        st.warning("üí∏ **–°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–µ —Å–∫–∏–¥–∫–∏** –º–æ–≥—É—Ç –ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å –Ω–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é")
    
    if activation < 40:
        st.error("üìâ **–ù–∏–∑–∫–∏–π activation rate** - –ø—Ä–æ–±–ª–µ–º–∞ –≤ product experience, –Ω–µ –≤ –ø—Ä–æ–º–æ")
    
    st.markdown("""
    ### üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –≤ ride-hailing:
    
    1. **FOMO —ç—Ñ—Ñ–µ–∫—Ç**: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏—é
    2. **–Ø–∫–æ—Ä–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç**: –ü–æ–∫–∞–∑ –ø–æ–ª–Ω–æ–π —Ü–µ–Ω—ã —Å–æ —Å–∫–∏–¥–∫–æ–π vs –ø—Ä–æ—Å—Ç–æ –Ω–∏–∑–∫–æ–π —Ü–µ–Ω—ã
    3. **Frequency illusion**: –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –ø–æ–µ–∑–¥–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á–∞—â–µ –∑–∞–º–µ—á–∞–µ—Ç –±—Ä–µ–Ω–¥
    4. **Habit formation**: 3-4 –ø–æ–µ–∑–¥–∫–∏ –æ–±—ã—á–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏
    5. **Price anchoring**: –ü—Ä–æ–º–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Å—Ç–∞—Ç—å price-sensitive –≤ –¥–æ–ª–≥–æ—Å—Ä–æ–∫–µ
    """)

def reactivation_promo_optimization():
    """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏"""
    st.subheader("üîÑ –†–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    st.info("""
    **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏**: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ –∑–Ω–∞—é—Ç –ø—Ä–æ–¥—É–∫—Ç, –ø–æ—ç—Ç–æ–º—É –Ω—É–∂–Ω—ã –¥—Ä—É–≥–∏–µ —Å—Ç–∏–º—É–ª—ã.
    –ß–∞—Å—Ç–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ –Ω–µ–±–æ–ª—å—à–∏–µ —Å–∫–∏–¥–∫–∏ + –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è.
    """)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üë• –°–µ–≥–º–µ–Ω—Ç—ã –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö**")
        
        recent_inactive = st.number_input("–ù–µ–∞–∫—Ç–∏–≤–Ω—ã 1-3 –º–µ—Å—è—Ü–∞", 10000, 500000, 150000, 10000)
        long_inactive = st.number_input("–ù–µ–∞–∫—Ç–∏–≤–Ω—ã 3-6 –º–µ—Å—è—Ü–µ–≤", 5000, 300000, 80000, 5000)
        dormant = st.number_input("–ù–µ–∞–∫—Ç–∏–≤–Ω—ã >6 –º–µ—Å—è—Ü–µ–≤", 20000, 1000000, 200000, 10000)
        
    with col2:
        st.markdown("**üí∞ –ü—Ä–æ–º–æ–ø–∞—Ä–∞–º–µ—Ç—Ä—ã**")
        
        reactivation_budget = st.number_input("–ë—é–¥–∂–µ—Ç —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏", 500000, 10000000, 2000000)
        promo_size = st.slider("–†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ (%)", 15, 50, 25)
        personalization_lift = st.slider("–õ–∏—Ñ—Ç –æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ (%)", 10, 100, 40)
    
    # –ë–∞–∑–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
    base_reactivation_rates = {
        'recent': 12,  # % —Ä–µ–∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç—Å—è –±–µ–∑ –ø—Ä–æ–º–æ
        'long': 6,
        'dormant': 2
    }
    
    # –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
    promo_lift = promo_size / 20  # –ö–∞–∂–¥—ã–µ 20% —Å–∫–∏–¥–∫–∏ = 1x –ª–∏—Ñ—Ç
    total_lift = promo_lift * (1 + personalization_lift / 100)
    
    # –†–∞—Å—á–µ—Ç –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
    segments_analysis = {}
    total_reactivated = 0
    total_cost = 0
    
    for segment, count in [('recent', recent_inactive), ('long', long_inactive), ('dormant', dormant)]:
        base_rate = base_reactivation_rates[segment.split('_')[0] if '_' in segment else segment]
        boosted_rate = min(base_rate * (1 + total_lift), 50)  # –ú–∞–∫—Å–∏–º—É–º 50% —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è
        
        reactivated = count * (boosted_rate / 100)
        cost_per_reactivation = 350 * (promo_size / 100) * 2  # 2 –ø—Ä–æ–º–æ-–ø–æ–µ–∑–¥–∫–∏
        segment_cost = reactivated * cost_per_reactivation
        
        segments_analysis[segment] = {
            'count': count,
            'base_rate': base_rate,
            'boosted_rate': boosted_rate,
            'reactivated': reactivated,
            'cost': segment_cost,
            'cac': cost_per_reactivation
        }
        
        total_reactivated += reactivated
        total_cost += segment_cost
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        for segment, data in segments_analysis.items():
            segment_name = {"recent": "–ù–µ–¥–∞–≤–Ω–∏–µ", "long": "–î–∞–≤–Ω–∏–µ", "dormant": "–°–ø—è—â–∏–µ"}[segment]
            st.metric(f"{segment_name} ({data['boosted_rate']:.1f}%)", 
                     f"{data['reactivated']:,.0f}")
    
    with col2:
        st.metric("–û–±—â–∞—è —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è", f"{total_reactivated:,.0f}")
        st.metric("–û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã", f"{total_cost:,.0f} —Ä—É–±")
    
    with col3:
        avg_cac = total_cost / total_reactivated if total_reactivated > 0 else 0
        st.metric("–°—Ä–µ–¥–Ω–∏–π CAC —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏", f"{avg_cac:,.0f} —Ä—É–±")
        
        # LTV —Ä–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö (–æ–±—ã—á–Ω–æ –Ω–∏–∂–µ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
        reactivated_ltv = 4200  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        ltv_cac = reactivated_ltv / avg_cac if avg_cac > 0 else 0
        
        color = "success" if ltv_cac >= 3 else "warning" if ltv_cac >= 2 else "error"
        st.markdown(f"""
        <div class="{color}-card">
            <h4>LTV/CAC</h4>
            <h2>{ltv_cac:.1f}:1</h2>
        </div>
        """, unsafe_allow_html=True)
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
    fig = go.Figure()
    
    segments = list(segments_analysis.keys())
    segment_names = ["–ù–µ–¥–∞–≤–Ω–∏–µ", "–î–∞–≤–Ω–∏–µ", "–°–ø—è—â–∏–µ"]
    rates = [segments_analysis[s]['boosted_rate'] for s in segments]
    costs = [segments_analysis[s]['cac'] for s in segments]
    
    fig.add_trace(go.Bar(
        x=segment_names,
        y=rates,
        name='–†–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è (%)',
        marker_color='green',
        yaxis='y'
    ))
    
    fig.add_trace(go.Scatter(
        x=segment_names,
        y=costs,
        mode='lines+markers',
        name='CAC (—Ä—É–±)',
        line=dict(color='red', width=3),
        yaxis='y2'
    ))
    
    fig.update_layout(
        title="–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º",
        xaxis_title="–°–µ–≥–º–µ–Ω—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö",
        yaxis=dict(title="–†–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è (%)", side="left"),
        yaxis2=dict(title="CAC (—Ä—É–±)", side="right", overlaying="y"),
        height=400
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    st.markdown("""
    ### üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏:
    
    1. **–¢–∞—Ä–≥–µ—Ç–∏–Ω–≥ –Ω–µ–¥–∞–≤–Ω–∏—Ö**: –õ—É—á—à–µ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    2. **–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π**: "–ú—ã —Å–∫—É—á–∞–ª–∏ –ø–æ –≤–∞–º" + –ª—é–±–∏–º—ã–π –º–∞—Ä—à—Ä—É—Ç
    3. **Timing –≤–∞–∂–µ–Ω**: –ù–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —É—Ö–æ–¥–∞, –Ω–æ –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –ø–æ–∑–¥–Ω–æ
    4. **–ü—Ä–∏—á–∏–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑**: –ü–æ–Ω—è—Ç—å, –ø–æ—á–µ–º—É —É—à–ª–∏ (—Ü–µ–Ω–∞, –∫–∞—á–µ—Å—Ç–≤–æ, –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç)
    5. **–ì—Ä–∞–¥—É–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ**: –ù–∞—á–∞—Ç—å —Å –º–∞–ª–æ–≥–æ, —ç—Å–∫–∞–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    """)

def retention_promo_optimization():
    """–ü—Ä–æ–º–æ–∫–æ–¥—ã –¥–ª—è —É–¥–µ—Ä–∂–∞–Ω–∏—è"""
    st.subheader("üíé Retention –ø—Ä–æ–º–æ–∫–æ–¥—ã")
    
    st.success("""
    **–§–∏–ª–æ—Å–æ—Ñ–∏—è retention –ø—Ä–æ–º–æ**: –ª—É—á—à–µ –¥–∞—Ç—å –Ω–µ–±–æ–ª—å—à—É—é —Å–∫–∏–¥–∫—É –ª–æ—è–ª—å–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É, 
    —á–µ–º –ø–æ—Ç–µ—Ä—è—Ç—å –µ–≥–æ –∏ —Ç—Ä–∞—Ç–∏—Ç—å –≤ 5 —Ä–∞–∑ –±–æ–ª—å—à–µ –Ω–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ.
    """)
    
    # –†–∏—Å–∫-—Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**‚ö†Ô∏è –†–∏—Å–∫-—Å–µ–≥–º–µ–Ω—Ç—ã**")
        
        high_risk_users = st.number_input("–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –æ—Ç—Ç–æ–∫–∞", 5000, 100000, 25000)
        medium_risk_users = st.number_input("–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫", 10000, 200000, 50000)
        low_risk_users = st.number_input("–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫", 50000, 500000, 150000)
        
    with col2:
        st.markdown("**üéØ Retention —Å—Ç—Ä–∞—Ç–µ–≥–∏—è**")
        
        intervention_timing = st.selectbox("Timing –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞:", 
                                         ["Predictive (–¥–æ –æ—Ç—Ç–æ–∫–∞)", "Reactive (–ø–æ—Å–ª–µ —Å–Ω–∏–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)"])
        
        retention_budget = st.number_input("–ë—é–¥–∂–µ—Ç –Ω–∞ retention", 500000, 5000000, 1500000)
        
        # –¢–∏–ø—ã retention –ø—Ä–æ–º–æ
        promo_strategy = st.selectbox("–¢–∏–ø –ø—Ä–æ–º–æ:", 
                                    ["–°–∫–∏–¥–∫–∏ –Ω–∞ –ø–æ–µ–∑–¥–∫–∏", "Cashback –ø—Ä–æ–≥—Ä–∞–º–º–∞", "Loyalty points", "Premium features"])
    
    # –ú–æ–¥–µ–ª—å —Ä–∏—Å–∫–∞ –æ—Ç—Ç–æ–∫–∞ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ intervention
    risk_segments = {
        'high': {
            'count': high_risk_users,
            'churn_probability': 80,  # % –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Ö–æ–¥–∞ –±–µ–∑ intervention
            'intervention_effectiveness': 60,  # % —Å–Ω–∏–∂–µ–Ω–∏—è —Ä–∏—Å–∫–∞ –ø—Ä–∏ intervention
            'cost_per_intervention': 150
        },
        'medium': {
            'count': medium_risk_users,
            'churn_probability': 40,
            'intervention_effectiveness': 45,
            'cost_per_intervention': 80
        },
        'low': {
            'count': low_risk_users,
            'churn_probability': 15,
            'intervention_effectiveness': 30,
            'cost_per_intervention': 40
        }
    }
    
    # –†–∞—Å—á–µ—Ç ROI –æ—Ç retention –ø—Ä–æ–≥—Ä–∞–º–º—ã
    total_saved_users = 0
    total_program_cost = 0
    
    retention_results = {}
    
    for segment, data in risk_segments.items():
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ—Ç–µ—Ä—è–ª–∏ –±—ã –±–µ–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        would_churn = data['count'] * (data['churn_probability'] / 100)
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –±–ª–∞–≥–æ–¥–∞—Ä—è –ø—Ä–æ–≥—Ä–∞–º–º–µ
        saved_users = would_churn * (data['intervention_effectiveness'] / 100)
        
        # –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞
        segment_cost = data['count'] * data['cost_per_intervention']
        
        retention_results[segment] = {
            'would_churn': would_churn,
            'saved': saved_users,
            'cost': segment_cost,
            'roi_per_saved': segment_cost / saved_users if saved_users > 0 else 0
        }
        
        total_saved_users += saved_users
        total_program_cost += segment_cost
    
    # LTV –∞–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    avg_ltv_remaining = 3500  # LTV –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Å—Ç–∞–ª—Å—è –±–ª–∞–≥–æ–¥–∞—Ä—è retention –ø—Ä–æ–≥—Ä–∞–º–º–µ
    total_ltv_saved = total_saved_users * avg_ltv_remaining
    program_roi = (total_ltv_saved - total_program_cost) / total_program_cost * 100
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    st.subheader("üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å retention –ø—Ä–æ–≥—Ä–∞–º–º—ã")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", f"{total_saved_users:,.0f}")
    
    with col2:
        st.metric("–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º—É", f"{total_program_cost:,.0f} —Ä—É–±")
    
    with col3:
        st.metric("LTV —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö", f"{total_ltv_saved:,.0f} —Ä—É–±")
    
    with col4:
        color = "success" if program_roi > 200 else "warning" if program_roi > 100 else "error"
        st.markdown(f"""
        <div class="{color}-card">
            <h4>ROI –ø—Ä–æ–≥—Ä–∞–º–º—ã</h4>
            <h2>{program_roi:.0f}%</h2>
        </div>
        """, unsafe_allow_html=True)
    
    # Breakdown –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
    st.subheader("üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º")
    
    segments_df = pd.DataFrame([
        {
            '–°–µ–≥–º–µ–Ω—Ç': {'high': '–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫', 'medium': '–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫', 'low': '–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫'}[seg],
            '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π': data['count'],
            '–£—à–ª–∏ –±—ã': f"{retention_results[seg]['would_churn']:.0f}",
            '–°–æ—Ö—Ä–∞–Ω–∏–ª–∏': f"{retention_results[seg]['saved']:.0f}",
            '–ó–∞—Ç—Ä–∞—Ç—ã': f"{retention_results[seg]['cost']:,.0f} —Ä—É–±",
            'Cost per save': f"{retention_results[seg]['roi_per_saved']:.0f} —Ä—É–±"
        }
        for seg, data in risk_segments.items()
    ])
    
    st.dataframe(segments_df, use_container_width=True)
    
    # Recommendations
    st.markdown("""
    ### üí° Retention —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ —Ç–∏–ø–∞–º –ø—Ä–æ–º–æ:
    
    **üé´ –°–∫–∏–¥–∫–∏ –Ω–∞ –ø–æ–µ–∑–¥–∫–∏**:
    ‚Ä¢ –ü–ª—é—Å—ã: –ü—Ä–æ—Å—Ç–æ—Ç–∞, –ø—Ä—è–º–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ cost of service
    ‚Ä¢ –ú–∏–Ω—É—Å—ã: –í—Ä–µ–º–µ–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç, –º–æ–∂–µ—Ç —Å–Ω–∏–∑–∏—Ç—å perceived value
    ‚Ä¢ –õ—É—á—à–µ –¥–ª—è: High-risk —Å–µ–≥–º–µ–Ω—Ç–∞ –∫–∞–∫ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –º–µ—Ä–∞
    
    **üí∞ Cashback –ø—Ä–æ–≥—Ä–∞–º–º–∞**:
    ‚Ä¢ –ü–ª—é—Å—ã: –°–æ–∑–¥–∞–µ—Ç –ª–æ—è–ª—å–Ω–æ—Å—Ç—å, —Å—Ç–∏–º—É–ª–∏—Ä—É–µ—Ç —á–∞—Å—Ç–æ—Ç—É
    ‚Ä¢ –ú–∏–Ω—É—Å—ã: –°–ª–æ–∂–Ω–æ—Å—Ç—å –≤ —É—á–µ—Ç–µ, –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å gaming behavior
    ‚Ä¢ –õ—É—á—à–µ –¥–ª—è: Medium-risk –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    **‚≠ê Loyalty points**:
    ‚Ä¢ –ü–ª—é—Å—ã: –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å partner rewards
    ‚Ä¢ –ú–∏–Ω—É—Å—ã: –°–ª–æ–∂–Ω–æ—Å—Ç—å –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏, operational overhead
    ‚Ä¢ –õ—É—á—à–µ –¥–ª—è: Low-risk –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∏
    
    **üëë Premium features**:
    ‚Ä¢ –ü–ª—é—Å—ã: –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç perceived value, –º–æ–∂–µ—Ç —É–≤–µ–ª–∏—á–∏—Ç—å frequency
    ‚Ä¢ –ú–∏–Ω—É—Å—ã: –¢—Ä–µ–±—É–µ—Ç product development, –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å entitlement
    ‚Ä¢ –õ—É—á—à–µ –¥–ª—è: High-value –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Å–µ—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤
    """)

def competitive_defense_promo():
    """–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è –∑–∞—â–∏—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–º–æ–∫–æ–¥—ã"""
    st.subheader("üÜö –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è –∑–∞—â–∏—Ç–∞")
    
    st.warning("""
    **–°–∏—Ç—É–∞—Ü–∏—è**: –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é –∫–∞–º–ø–∞–Ω–∏—é –ø–æ –ø–µ—Ä–µ–º–∞–Ω–∏–≤–∞–Ω–∏—é –≤–∞—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    –ù—É–∂–Ω–∞ –±—ã—Å—Ç—Ä–∞—è defensive —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –∑–∞—â–∏—Ç—ã user base.
    """)
    
    # Threat assessment
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**‚ö†Ô∏è –û—Ü–µ–Ω–∫–∞ —É–≥—Ä–æ–∑—ã**")
        
        competitor_discount = st.slider("–°–∫–∏–¥–∫–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ (%)", 30, 80, 50)
        threat_duration = st.slider("–û–∂–∏–¥–∞–µ–º–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—Ç–∞–∫–∏ (–Ω–µ–¥–µ–ª–∏)", 2, 12, 6)
        at_risk_users = st.number_input("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–¥ —É–≥—Ä–æ–∑–æ–π", 10000, 200000, 75000)
        
        # Historical churn data
        organic_churn = st.slider("–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π –º–µ—Å—è—á–Ω—ã–π churn (%)", 8, 20, 12)
        
    with col2:
        st.markdown("**üõ°Ô∏è Defensive —Å—Ç—Ä–∞—Ç–µ–≥–∏—è**")
        
        defense_strategy = st.selectbox("–¢–∏–ø –∑–∞—â–∏—Ç—ã:", 
                                      ["Matching (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è —Å–∫–∏–¥–∫–∞)", "Premium positioning", 
                                       "Loyalty surge", "Targeted retention"])
        
        defense_budget = st.number_input("–ë—é–¥–∂–µ—Ç –Ω–∞ –∑–∞—â–∏—Ç—É", 1000000, 20000000, 5000000)
        
        # Response timing
        response_speed = st.selectbox("–°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–∏:", 
                                    ["Immediate (–≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è)", "Fast (–≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏)", "Measured (2-3 –Ω–µ–¥–µ–ª–∏)"])
    
    # Modeling competitive threat
    base_weekly_churn = organic_churn / 4  # –ë–∞–∑–æ–≤—ã–π –Ω–µ–¥–µ–ª—å–Ω—ã–π churn
    
    # Threat multiplier based on competitor offer
    threat_multiplier = 1 + (competitor_discount / 50)  # –ö–∞–∂–¥—ã–µ 50% —Å–∫–∏–¥–∫–∏ = 2x threat
    
    # Time decay of competitive effect
    weeks = list(range(1, threat_duration + 1))
    competitive_churn_rates = []
    
    for week in weeks:
        # –≠—Ñ—Ñ–µ–∫—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ –∑–∞—Ç—É—Ö–∞–µ—Ç —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
        decay_factor = np.exp(-week / 4)  # Exponential decay
        weekly_threat = base_weekly_churn * threat_multiplier * decay_factor
        competitive_churn_rates.append(weekly_threat)
    
    # Users lost without defense
    users_lost_without_defense = []
    remaining_users = at_risk_users
    
    for weekly_churn in competitive_churn_rates:
        lost_this_week = remaining_users * (weekly_churn / 100)
        users_lost_without_defense.append(lost_this_week)
        remaining_users -= lost_this_week
    
    total_lost_without_defense = sum(users_lost_without_defense)
    
    # Defense effectiveness
    defense_effectiveness = {
        "Matching (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è —Å–∫–∏–¥–∫–∞)": 70,  # % —Å–Ω–∏–∂–µ–Ω–∏—è –ø–æ—Ç–µ—Ä—å
        "Premium positioning": 40,
        "Loyalty surge": 55,
        "Targeted retention": 65
    }
    
    response_delay_penalty = {
        "Immediate (–≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è)": 1.0,
        "Fast (–≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏)": 0.8,
        "Measured (2-3 –Ω–µ–¥–µ–ª–∏)": 0.6
    }
    
    effectiveness = defense_effectiveness[defense_strategy] * response_delay_penalty[response_speed]
    users_saved = total_lost_without_defense * (effectiveness / 100)
    
    # Cost analysis
    if defense_strategy == "Matching (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è —Å–∫–∏–¥–∫–∞)":
        cost_per_user = competitor_discount / 100 * 350 * 3  # 3 –ø–æ–µ–∑–¥–∫–∏ —Å –∑–∞—â–∏—Ç–Ω–æ–π —Å–∫–∏–¥–∫–æ–π
    elif defense_strategy == "Premium positioning":
        cost_per_user = 200  # –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –ø—Ä–µ–º–∏—É–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    elif defense_strategy == "Loyalty surge":
        cost_per_user = 120  # Loyalty –±–æ–Ω—É—Å—ã
    else:  # Targeted retention
        cost_per_user = 150  # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ retention offers
    
    total_defense_cost = at_risk_users * cost_per_user
    
    # LTV impact
    avg_ltv_at_risk = 4500  # LTV –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–¥ —É–≥—Ä–æ–∑–æ–π
    ltv_saved = users_saved * avg_ltv_at_risk
    defense_roi = (ltv_saved - total_defense_cost) / total_defense_cost * 100
    
    # Results
    st.subheader("‚öîÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞—â–∏—Ç–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–ü–æ—Ç–µ—Ä–∏ –±–µ–∑ –∑–∞—â–∏—Ç—ã", f"{total_lost_without_defense:,.0f}")
    
    with col2:
        st.metric("–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", f"{users_saved:,.0f}")
    
    with col3:
        st.metric("–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –∑–∞—â–∏—Ç—É", f"{total_defense_cost:,.0f} —Ä—É–±")
    
    with col4:
        color = "success" if defense_roi > 100 else "warning" if defense_roi > 0 else "error"
        st.markdown(f"""
        <div class="{color}-card">
            <h4>ROI –∑–∞—â–∏—Ç—ã</h4>
            <h2>{defense_roi:.0f}%</h2>
        </div>
        """, unsafe_allow_html=True)
    
    # Timeline visualization
    fig = go.Figure()
    
    fig.add_trace(go.Scatter(
        x=weeks,
        y=users_lost_without_defense,
        mode='lines+markers',
        name='–ü–æ—Ç–µ—Ä–∏ –±–µ–∑ –∑–∞—â–∏—Ç—ã',
        line=dict(color='red', width=3)
    ))
    
    users_lost_with_defense = [loss * (1 - effectiveness/100) for loss in users_lost_without_defense]
    fig.add_trace(go.Scatter(
        x=weeks,
        y=users_lost_with_defense,
        mode='lines+markers',
        name='–ü–æ—Ç–µ—Ä–∏ —Å –∑–∞—â–∏—Ç–æ–π',
        line=dict(color='green', width=3)
    ))
    
    fig.update_layout(
        title="–í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–π —É–≥—Ä–æ–∑—ã",
        xaxis_title="–ù–µ–¥–µ–ª—è",
        yaxis_title="–ü–æ—Ç–µ—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        height=400
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # Strategic recommendations
    if defense_roi > 200:
        st.success("üõ°Ô∏è **Defensive –∫–∞–º–ø–∞–Ω–∏—è –≤—ã—Å–æ–∫–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞** - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏")
    elif defense_roi > 50:
        st.info("üìä **–£–º–µ—Ä–µ–Ω–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å** - —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
    else:
        st.warning("‚ö†Ô∏è **–ù–∏–∑–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å** - –≤–æ–∑–º–æ–∂–Ω–æ, –ª—É—á—à–µ –ø—Ä–∏–Ω—è—Ç—å –ø–æ—Ç–µ—Ä–∏ –∏ —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–∏")
    
    st.markdown(f"""
    ### üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è "{defense_strategy}":
    """)
    
    strategy_recommendations = {
        "Matching (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è —Å–∫–∏–¥–∫–∞)": [
            "–ë—ã—Å—Ç—Ä–∞—è —Ä–µ–∞–∫—Ü–∏—è –∫—Ä–∏—Ç–∏—á–Ω–∞ - –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–æ–º–µ–¥–ª–µ–Ω–∏—è = +10% –ø–æ—Ç–µ—Ä—å",
            "–ö–æ–º–º—É–Ω–∏—Ü–∏—Ä–æ–≤–∞—Ç—å '–º—ã –≤—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ª—É—á—à–∏–µ —Ü–µ–Ω—ã'",
            "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å exit strategy –∫–æ–≥–¥–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç –∫–∞–º–ø–∞–Ω–∏—é",
            "–ò–∑–±–µ–≥–∞—Ç—å race to the bottom - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã"
        ],
        "Premium positioning": [
            "–ê–∫—Ü–µ–Ω—Ç –Ω–∞ quality, safety, reliability vs —Ü–µ–Ω—É",
            "Testimonials –∏ case studies –¥–æ–≤–æ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤",
            "Premium features –∫–∞–∫ differentiator",
            "–ú–µ–Ω—å—à–µ direct mentions –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞"
        ],
        "Loyalty surge": [
            "Reward existing loyalty –≤–º–µ—Å—Ç–æ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö",
            "Exclusive perks –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            "Community building –∏ insider access",
            "Gradual rollout –¥–ª—è maximum impact"
        ],
        "Targeted retention": [
            "–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ offers –Ω–∞ –æ—Å–Ω–æ–≤–µ usage patterns",
            "Proactive outreach –∫ high-value –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
            "Address specific pain points –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞",
            "Measure effectiveness –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º"
        ]
    }
    
    for rec in strategy_recommendations[defense_strategy]:
        st.write(f"‚Ä¢ {rec}")

def segmented_promo_optimization():
    """–°–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã"""
    st.subheader("üéØ –°–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–∞–º–ø–∞–Ω–∏–∏")
    
    st.success("""
    **–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–º–æ**: –í–º–µ—Å—Ç–æ one-size-fits-all –ø–æ–¥—Ö–æ–¥–∞, —Å–æ–∑–¥–∞–µ–º targeted offers 
    –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö –ø–æ–≤–µ–¥–µ–Ω–∏—è –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫.
    """)
    
    # Segmentation criteria
    segmentation_approach = st.selectbox(
        "–ü—Ä–∏–Ω—Ü–∏–ø —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏:",
        ["Behavioral (—á–∞—Å—Ç–æ—Ç–∞ –ø–æ–µ–∑–¥–æ–∫)", "Geographic (—Ä–∞–π–æ–Ω—ã –≥–æ—Ä–æ–¥–∞)", 
         "Temporal (–≤—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)", "Value-based (–ø–æ—Ç—Ä–∞—á–µ–Ω–æ –¥–µ–Ω–µ–≥)"]
    )
    
    if segmentation_approach == "Behavioral (—á–∞—Å—Ç–æ—Ç–∞ –ø–æ–µ–∑–¥–æ–∫)":
        behavioral_segmentation()
    elif segmentation_approach == "Geographic (—Ä–∞–π–æ–Ω—ã –≥–æ—Ä–æ–¥–∞)":
        geographic_segmentation()
    elif segmentation_approach == "Temporal (–≤—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)":
        temporal_segmentation()
    elif segmentation_approach == "Value-based (–ø–æ—Ç—Ä–∞—á–µ–Ω–æ –¥–µ–Ω–µ–≥)":
        value_based_segmentation()

def behavioral_segmentation():
    """–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –ø–æ–≤–µ–¥–µ–Ω–∏—é"""
    st.markdown("### üìä –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è")
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üë• –°–µ–≥–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**")
        
        power_users = st.number_input("Power users (8+ –ø–æ–µ–∑–¥–æ–∫/–º–µ—Å)", 5000, 100000, 25000)
        regular_users = st.number_input("Regular users (3-7 –ø–æ–µ–∑–¥–æ–∫/–º–µ—Å)", 20000, 300000, 85000)
        occasional_users = st.number_input("Occasional users (1-2 –ø–æ–µ–∑–¥–∫–∏/–º–µ—Å)", 50000, 500000, 150000)
        
    with col2:
        st.markdown("**üéØ –ü—Ä–æ–º–æ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º**")
        
        power_promo = st.slider("Power users —Å–∫–∏–¥–∫–∞ (%)", 0, 30, 10)
        regular_promo = st.slider("Regular users —Å–∫–∏–¥–∫–∞ (%)", 15, 50, 25)
        occasional_promo = st.slider("Occasional users —Å–∫–∏–¥–∫–∞ (%)", 30, 70, 45)
    
    # Behavioral insights –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
    segments_data = {
        'Power Users': {
            'count': power_users,
            'avg_frequency': 12,
            'avg_aov': 380,
            'churn_risk': 'Low',
            'promo_sensitivity': 'Low',
            'promo_discount': power_promo,
            'strategy': 'Loyalty & Premium'
        },
        'Regular Users': {
            'count': regular_users,
            'avg_frequency': 5,
            'avg_aov': 350,
            'churn_risk': 'Medium',
            'promo_sensitivity': 'Medium',
            'promo_discount': regular_promo,
            'strategy': 'Frequency increase'
        },
        'Occasional Users': {
            'count': occasional_users,
            'avg_frequency': 1.5,
            'avg_aov': 320,
            'churn_risk': 'High',
            'promo_sensitivity': 'High',
            'promo_discount': occasional_promo,
            'strategy': 'Activation & Habit'
        }
    }
    
    # –†–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
    total_campaign_cost = 0
    total_incremental_revenue = 0
    
    results_data = []
    
    for segment, data in segments_data.items():
        # Baseline revenue –±–µ–∑ –ø—Ä–æ–º–æ
        baseline_revenue = data['count'] * data['avg_frequency'] * data['avg_aov'] * 0.25
        
        # –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–æ–º–æ –Ω–∞ frequency (–æ–±—Ä–∞—Ç–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç baseline frequency)
        frequency_lift = (data['promo_discount'] / 100) * (10 / data['avg_frequency'])  # Higher discount + lower baseline = higher lift
        new_frequency = data['avg_frequency'] * (1 + frequency_lift)
        
        # –ü—Ä–æ–º–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å
        promo_cost_per_ride = data['avg_aov'] * (data['promo_discount'] / 100)
        total_promo_rides = data['count'] * new_frequency
        segment_promo_cost = total_promo_rides * promo_cost_per_ride
        
        # –ù–æ–≤–∞—è –≤—ã—Ä—É—á–∫–∞
        new_revenue = data['count'] * new_frequency * data['avg_aov'] * 0.25
        incremental_revenue = new_revenue - baseline_revenue
        
        # ROI —Å–µ–≥–º–µ–Ω—Ç–∞
        segment_roi = (incremental_revenue - segment_promo_cost) / segment_promo_cost * 100 if segment_promo_cost > 0 else 0
        
        results_data.append({
            '–°–µ–≥–º–µ–Ω—Ç': segment,
            '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π': f"{data['count']:,}",
            'Baseline —á–∞—Å—Ç–æ—Ç–∞': f"{data['avg_frequency']:.1f}",
            '–ù–æ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞': f"{new_frequency:.1f}",
            '–°–∫–∏–¥–∫–∞': f"{data['promo_discount']}%",
            '–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ø—Ä–æ–º–æ': f"{segment_promo_cost:,.0f}",
            '–î–æ–ø. –≤—ã—Ä—É—á–∫–∞': f"{incremental_revenue:,.0f}",
            'ROI': f"{segment_roi:.0f}%"
        })
        
        total_campaign_cost += segment_promo_cost
        total_incremental_revenue += incremental_revenue
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    st.subheader("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏")
    
    results_df = pd.DataFrame(results_data)
    st.dataframe(results_df, use_container_width=True)
    
    # –û–±—â–∏–π ROI
    overall_roi = (total_incremental_revenue - total_campaign_cost) / total_campaign_cost * 100
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("–û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã", f"{total_campaign_cost:,.0f} —Ä—É–±")
    
    with col2:
        st.metric("–î–æ–ø. –≤—ã—Ä—É—á–∫–∞", f"{total_incremental_revenue:,.0f} —Ä—É–±")
    
    with col3:
        color = "success" if overall_roi > 100 else "warning" if overall_roi > 0 else "error"
        st.markdown(f"""
        <div class="{color}-card">
            <h4>–û–±—â–∏–π ROI</h4>
            <h2>{overall_roi:.0f}%</h2>
        </div>
        """, unsafe_allow_html=True)
    
    # Insights –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
    st.markdown("""
    ### üí° –ò–Ω—Å–∞–π—Ç—ã –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏:
    
    **üöÄ Power Users**:
    ‚Ä¢ –ù–∏–∑–∫–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ —Å–∫–∏–¥–∫–∞–º - —Ñ–æ–∫—É—Å –Ω–∞ exclusive perks
    ‚Ä¢ –í—ã—Å–æ–∫–∞—è frequency —É–∂–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ - —Å–ª–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å
    ‚Ä¢ –õ—É—á—à–∏–π —Å–µ–≥–º–µ–Ω—Ç –¥–ª—è premium services –∏ loyalty –ø—Ä–æ–≥—Ä–∞–º–º
    
    **‚öñÔ∏è Regular Users**:
    ‚Ä¢ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å volume vs sensitivity
    ‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è growth –≤ power users –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º nudging
    ‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ —Å–∫–∏–¥–∫–∏ –º–æ–≥—É—Ç —Å—Ç–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å frequency
    
    **üìà Occasional Users**:
    ‚Ä¢ –í—ã—Å–æ–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞, –Ω–æ –Ω—É–∂–Ω—ã –±–æ–ª—å—à–∏–µ —Å—Ç–∏–º—É–ª—ã
    ‚Ä¢ –†–∏—Å–∫ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ discount-hunting behavior
    ‚Ä¢ –§–æ–∫—É—Å –Ω–∞ habit formation, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –Ω–∞ deals
    """)

def geographic_segmentation():
    """–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è"""
    st.markdown("### üó∫Ô∏è –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è")
    
    st.info("""
    **–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞**: –†–∞–∑–Ω—ã–µ —Ä–∞–π–æ–Ω—ã –≥–æ—Ä–æ–¥–∞ –∏–º–µ—é—Ç —Ä–∞–∑–Ω—É—é –ø–ª–æ—Ç–Ω–æ—Å—Ç—å —Å–ø—Ä–æ—Å–∞,
    –ø–æ–∫—É–ø–∞—Ç–µ–ª—å–Ω—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—é —Å –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º.
    """)
    
    # –ó–æ–Ω—ã –≥–æ—Ä–æ–¥–∞
    zones_data = {
        '–¶–µ–Ω—Ç—Ä': {
            'population': 500000,
            'avg_income': 80000,
            'competition': 9,
            'public_transport': 8,
            'current_penetration': 15
        },
        '–ë–∏–∑–Ω–µ—Å-—Ä–∞–π–æ–Ω—ã': {
            'population': 300000,
            'avg_income': 120000,
            'competition': 7,
            'public_transport': 7,
            'current_penetration': 25
        },
        '–°–ø–∞–ª—å–Ω—ã–µ —Ä–∞–π–æ–Ω—ã': {
            'population': 800000,
            'avg_income': 50000,
            'competition': 4,
            'public_transport': 5,
            'current_penetration': 8
        },
        '–ü—Ä–∏–≥–æ—Ä–æ–¥—ã': {
            'population': 400000,
            'avg_income': 45000,
            'competition': 2,
            'public_transport': 3,
            'current_penetration': 12
        }
    }
    
    # –†–∞—Å—á–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ –∑–æ–Ω–∞–º
    for zone, data in zones_data.items():
        # –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞
        market_potential = data['population'] * 0.2  # 20% –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è penetration
        growth_potential = market_potential - (data['population'] * data['current_penetration'] / 100)
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø—Ä–æ–º–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∑–æ–Ω—ã
        if data['avg_income'] > 80000 and data['competition'] > 6:
            promo_strategy = "Premium positioning, –Ω–µ–±–æ–ª—å—à–∏–µ —Å–∫–∏–¥–∫–∏"
            recommended_discount = 15
        elif data['public_transport'] < 5:
            promo_strategy = "Convenience focus, —Å—Ä–µ–¥–Ω–∏–µ —Å–∫–∏–¥–∫–∏"
            recommended_discount = 25
        elif data['current_penetration'] < 10:
            promo_strategy = "Market education, –≤—ã—Å–æ–∫–∏–µ —Å–∫–∏–¥–∫–∏"
            recommended_discount = 40
        else:
            promo_strategy = "Balanced approach"
            recommended_discount = 30
        
        zones_data[zone].update({
            'growth_potential': growth_potential,
            'promo_strategy': promo_strategy,
            'recommended_discount': recommended_discount
        })
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    col1, col2 = st.columns(2)
    
    with col1:
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ –∑–æ–Ω–∞–º
        zones_df = pd.DataFrame([
            {
                '–ó–æ–Ω–∞': zone,
                '–ù–∞—Å–µ–ª–µ–Ω–∏–µ': f"{data['population']:,}",
                '–°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥': f"{data['avg_income']:,}",
                '–¢–µ–∫—É—â–∞—è penetration': f"{data['current_penetration']}%",
                '–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞': f"{data['growth_potential']:,.0f}",
                '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å–∫–∏–¥–∫–∞': f"{data['recommended_discount']}%"
            }
            for zone, data in zones_data.items()
        ])
        st.dataframe(zones_df, use_container_width=True)
    
    with col2:
        # –ì—Ä–∞—Ñ–∏–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ vs —Ç–µ–∫—É—â–µ–π penetration
        fig = go.Figure()
        
        zones = list(zones_data.keys())
        current_users = [zones_data[z]['population'] * zones_data[z]['current_penetration'] / 100 for z in zones]
        potential_users = [zones_data[z]['growth_potential'] for z in zones]
        
        fig.add_trace(go.Bar(
            x=zones,
            y=current_users,
            name='–¢–µ–∫—É—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
            marker_color='blue'
        ))
        
        fig.add_trace(go.Bar(
            x=zones,
            y=potential_users,
            name='–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞',
            marker_color='lightblue'
        ))
        
        fig.update_layout(
            title="–¢–µ–∫—É—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ vs –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞",
            barmode='stack',
            height=400
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    # –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    st.markdown("""
    ### üéØ –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:
    
    **üè¢ –¶–µ–Ω—Ç—Ä –≥–æ—Ä–æ–¥–∞**:
    ‚Ä¢ –í—ã—Å–æ–∫–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è ‚Üí —Ñ–æ–∫—É—Å –Ω–∞ differentiation
    ‚Ä¢ –•–æ—Ä–æ—à–∏–π –æ–±—â.—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç ‚Üí –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∫ time-saver
    ‚Ä¢ –í—ã—Å–æ–∫–∏–µ –¥–æ—Ö–æ–¥—ã ‚Üí –º–µ–Ω—å—à–∞—è price sensitivity
    
    **üíº –ë–∏–∑–Ω–µ—Å-—Ä–∞–π–æ–Ω—ã**:
    ‚Ä¢ B2B partnerships —Å –∫–æ–º–ø–∞–Ω–∏—è–º–∏
    ‚Ä¢ Rush hour surge pricing acceptance
    ‚Ä¢ Corporate accounts –∏ bulk payments
    
    **üè† –°–ø–∞–ª—å–Ω—ã–µ —Ä–∞–π–æ–Ω—ã**:
    ‚Ä¢ Price-sensitive segment ‚Üí –≤—ã—Å–æ–∫–∏–µ –ø—Ä–æ–º–æ
    ‚Ä¢ –°–ª–∞–±—ã–π –æ–±—â.—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç ‚Üí —É–¥–æ–±—Å—Ç–≤–æ –∫–∞–∫ value prop
    ‚Ä¢ Family accounts –∏ shared rides
    
    **üå≥ –ü—Ä–∏–≥–æ—Ä–æ–¥—ã**:
    ‚Ä¢ Last mile connectivity —Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–º–∏ —É–∑–ª–∞–º–∏
    ‚Ä¢ Scheduled rides –¥–ª—è commuting
    ‚Ä¢ Lower competition ‚Üí focus –Ω–∞ market education
    """)

def temporal_segmentation():
    """–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è"""
    st.markdown("### ‚è∞ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è")
    
    st.success("""
    **Time-based –ø—Ä–æ–º–æ**: –†–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è = —Ä–∞–∑–Ω—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–∏—Ç—å.
    Surge pricing vs off-peak discounts.
    """)
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
    time_segments = {
        'Rush hour (7-9, 17-19)': {
            'demand_level': 'High',
            'price_sensitivity': 'Low',
            'current_surge': 1.8,
            'recommended_strategy': 'Premium pricing, minimal discounts'
        },
        'Business hours (9-17)': {
            'demand_level': 'Medium',
            'price_sensitivity': 'Medium', 
            'current_surge': 1.2,
            'recommended_strategy': 'Moderate promotions for B2B'
        },
        'Evening leisure (19-23)': {
            'demand_level': 'Medium-High',
            'price_sensitivity': 'Medium',
            'current_surge': 1.4,
            'recommended_strategy': 'Entertainment partnerships'
        },
        'Night hours (23-6)': {
            'demand_level': 'Low',
            'price_sensitivity': 'Low',
            'current_surge': 1.6,
            'recommended_strategy': 'Safety premium, night differential'
        },
        'Weekend days': {
            'demand_level': 'Medium',
            'price_sensitivity': 'High',
            'current_surge': 1.1,
            'recommended_strategy': 'Leisure promotions, family discounts'
        },
        'Off-peak (10-16)': {
            'demand_level': 'Low',
            'price_sensitivity': 'High',
            'current_surge': 0.9,
            'recommended_strategy': 'Aggressive promotions for demand stimulation'
        }
    }
    
    # –í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    selected_segment = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–µ–≥–º–µ–Ω—Ç:", list(time_segments.keys()))
    
    segment_data = time_segments[selected_segment]
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown(f"**üìä –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {selected_segment}**")
        st.write(f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —Å–ø—Ä–æ—Å–∞: {segment_data['demand_level']}")
        st.write(f"‚Ä¢ Price sensitivity: {segment_data['price_sensitivity']}")
        st.write(f"‚Ä¢ –¢–µ–∫—É—â–∏–π surge: {segment_data['current_surge']}x")
        st.write(f"‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {segment_data['recommended_strategy']}")
        
    with col2:
        st.markdown("**‚öôÔ∏è –ü—Ä–æ–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã**")
        
        promo_type = st.selectbox("–¢–∏–ø –ø—Ä–æ–º–æ:", 
                                ["–°–∫–∏–¥–∫–∞ –æ—Ç –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω—ã", "–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞", 
                                 "Cashback", "Bundle offers"])
        
        if segment_data['price_sensitivity'] == 'High':
            default_discount = 35
        elif segment_data['price_sensitivity'] == 'Medium':
            default_discount = 20
        else:
            default_discount = 10
            
        promo_size = st.slider("–†–∞–∑–º–µ—Ä –ø—Ä–æ–º–æ (%)", 5, 50, default_discount)
    
    # Simulation –ø—Ä–æ–º–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
    base_demand = 10000  # –ë–∞–∑–æ–≤—ã–π —Å–ø—Ä–æ—Å –≤ —Å–µ–≥–º–µ–Ω—Ç–µ
    base_aov = 350
    
    # Demand elasticity –∫ –ø—Ä–æ–º–æ
    elasticity_map = {'High': 2.5, 'Medium': 1.5, 'Low': 0.8}
    elasticity = elasticity_map[segment_data['price_sensitivity']]
    
    # –ù–æ–≤—ã–π —Å–ø—Ä–æ—Å –ø–æ—Å–ª–µ –ø—Ä–æ–º–æ
    demand_lift = (promo_size / 100) * elasticity
    new_demand = base_demand * (1 + demand_lift)
    
    # Revenue impact
    new_aov = base_aov * (1 - promo_size / 100) if promo_type == "–°–∫–∏–¥–∫–∞ –æ—Ç –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω—ã" else base_aov
    
    base_revenue = base_demand * base_aov * 0.25
    new_revenue = new_demand * new_aov * 0.25
    promo_cost = new_demand * base_aov * (promo_size / 100)
    net_revenue = new_revenue - promo_cost
    
    # Results
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("–†–æ—Å—Ç —Å–ø—Ä–æ—Å–∞", f"{new_demand:,.0f}", f"+{demand_lift:.1%}")
    
    with col2:
        st.metric("–í—ã—Ä—É—á–∫–∞ —Å –ø—Ä–æ–º–æ", f"{new_revenue:,.0f} —Ä—É–±", 
                 f"{((new_revenue - base_revenue) / base_revenue * 100):+.1f}%")
    
    with col3:
        st.metric("–ß–∏—Å—Ç–∞—è –≤—ã—Ä—É—á–∫–∞", f"{net_revenue:,.0f} —Ä—É–±",
                 f"{((net_revenue - base_revenue) / base_revenue * 100):+.1f}%")
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –≤—Å–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å–µ–≥–º–µ–Ω—Ç–∞–º
    st.subheader("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
    
    all_segments_data = []
    for segment, data in time_segments.items():
        elasticity = elasticity_map[data['price_sensitivity']]
        optimal_discount = 30 if data['price_sensitivity'] == 'High' else 20 if data['price_sensitivity'] == 'Medium' else 10
        
        demand_lift = (optimal_discount / 100) * elasticity
        revenue_lift = demand_lift * (1 - optimal_discount / 100)  # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç
        
        all_segments_data.append({
            '–°–µ–≥–º–µ–Ω—Ç': segment,
            '–°–ø—Ä–æ—Å': data['demand_level'],
            'Price Sensitivity': data['price_sensitivity'],
            'Surge': f"{data['current_surge']}x",
            '–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞': f"{optimal_discount}%",
            '–û–∂–∏–¥–∞–µ–º—ã–π –ª–∏—Ñ—Ç': f"{revenue_lift:.1%}"
        })
    
    segments_df = pd.DataFrame(all_segments_data)
    st.dataframe(segments_df, use_container_width=True)

def value_based_segmentation():
    """–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–π —Å—É–º–º–µ"""
    st.markdown("### üíé Value-based —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è")
    
    st.info("""
    **RFM –ø–æ–¥—Ö–æ–¥ –¥–ª—è ride-hailing**: Recency (–ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–µ–∑–¥–∫–∞), Frequency (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–µ–∑–¥–æ–∫), 
    Monetary (–ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞). –†–∞–∑–Ω—ã–µ value segments —Ç—Ä–µ–±—É—é—Ç —Ä–∞–∑–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –∫ –ø—Ä–æ–º–æ.
    """)
    
    # RFM —Å–µ–≥–º–µ–Ω—Ç—ã
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üí∞ Value —Å–µ–≥–º–µ–Ω—Ç—ã**")
        
        vip_users = st.number_input("VIP (>10k —Ä—É–±/–º–µ—Å)", 1000, 50000, 8000)
        high_value = st.number_input("High value (5-10k —Ä—É–±/–º–µ—Å)", 5000, 100000, 25000)
        medium_value = st.number_input("Medium value (2-5k —Ä—É–±/–º–µ—Å)", 20000, 200000, 75000)
        low_value = st.number_input("Low value (<2k —Ä—É–±/–º–µ—Å)", 50000, 500000, 150000)
        
    with col2:
        st.markdown("**üéØ –ü—Ä–æ–º–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏**")
        
        vip_strategy = st.selectbox("VIP —Å—Ç—Ä–∞—Ç–µ–≥–∏—è:", 
                                  ["Exclusive perks", "Concierge service", "Priority support", "No promotions needed"])
        
        high_value_strategy = st.selectbox("High value —Å—Ç—Ä–∞—Ç–µ–≥–∏—è:",
                                         ["Loyalty rewards", "Upgrade incentives", "Volume discounts"])
        
        medium_value_strategy = st.selectbox("Medium value —Å—Ç—Ä–∞—Ç–µ–≥–∏—è:",
                                           ["Frequency bonuses", "Referral rewards", "Modest discounts"])
        
        low_value_strategy = st.selectbox("Low value —Å—Ç—Ä–∞—Ç–µ–≥–∏—è:",
                                        ["Activation campaigns", "High discounts", "Habit formation"])
    
    # –†–∞—Å—á–µ—Ç ROI –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
    value_segments = {
        'VIP': {
            'count': vip_users,
            'avg_monthly_spend': 12000,
            'frequency': 15,
            'churn_risk': 5,
            'promo_budget_per_user': 200 if vip_strategy != "No promotions needed" else 0
        },
        'High Value': {
            'count': high_value,
            'avg_monthly_spend': 7500,
            'frequency': 9,
            'churn_risk': 8,
            'promo_budget_per_user': 150
        },
        'Medium Value': {
            'count': medium_value,
            'avg_monthly_spend': 3500,
            'frequency': 5,
            'churn_risk': 12,
            'promo_budget_per_user': 80
        },
        'Low Value': {
            'count': low_value,
            'avg_monthly_spend': 1200,
            'frequency': 2,
            'churn_risk': 20,
            'promo_budget_per_user': 120
        }
    }
    
    # –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–º–æ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
    total_promo_budget = 0
    total_incremental_revenue = 0
    
    segment_results = []
    
    for segment, data in value_segments.items():
        # –ë–∞–∑–æ–≤–∞—è –≤—ã—Ä—É—á–∫–∞ (take rate 25%)
        base_monthly_revenue = data['count'] * data['avg_monthly_spend'] * 0.25
        
        # –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–æ–º–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–µ–≥–º–µ–Ω—Ç–∞
        if segment == 'VIP':
            revenue_lift = 0.05  # VIP –º–∞–ª–æ —Ä–µ–∞–≥–∏—Ä—É—é—Ç –Ω–∞ –ø—Ä–æ–º–æ, –Ω–æ —Ü–µ–Ω—è—Ç attention
        elif segment == 'High Value':
            revenue_lift = 0.15  # –£–º–µ—Ä–µ–Ω–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è
        elif segment == 'Medium Value':
            revenue_lift = 0.25  # –•–æ—Ä–æ—à–∞—è —Ä–µ–∞–∫—Ü–∏—è
        else:  # Low Value
            revenue_lift = 0.40  # –í—ã—Å–æ–∫–∞—è —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –ø—Ä–æ–º–æ
        
        incremental_revenue = base_monthly_revenue * revenue_lift
        promo_cost = data['count'] * data['promo_budget_per_user']
        
        segment_roi = (incremental_revenue - promo_cost) / promo_cost * 100 if promo_cost > 0 else 0
        
        segment_results.append({
            '–°–µ–≥–º–µ–Ω—Ç': segment,
            '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π': f"{data['count']:,}",
            '–°—Ä–µ–¥–Ω–∏–π spend': f"{data['avg_monthly_spend']:,} —Ä—É–±",
            '–ß–∞—Å—Ç–æ—Ç–∞': f"{data['frequency']} –ø–æ–µ–∑–¥–æ–∫",
            'Churn risk': f"{data['churn_risk']}%",
            '–ü—Ä–æ–º–æ –±—é–¥–∂–µ—Ç': f"{promo_cost:,.0f} —Ä—É–±",
            '–î–æ–ø. –≤—ã—Ä—É—á–∫–∞': f"{incremental_revenue:,.0f} —Ä—É–±",
            'ROI': f"{segment_roi:.0f}%"
        })
        
        total_promo_budget += promo_cost
        total_incremental_revenue += incremental_revenue
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    st.subheader("üìà ROI –ø–æ value —Å–µ–≥–º–µ–Ω—Ç–∞–º")
    
    results_df = pd.DataFrame(segment_results)
    st.dataframe(results_df, use_container_width=True)
    
    # –û–±—â–∏–π ROI –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    overall_roi = (total_incremental_revenue - total_promo_budget) / total_promo_budget * 100
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("–û–±—â–∏–π –ø—Ä–æ–º–æ –±—é–¥–∂–µ—Ç", f"{total_promo_budget:,.0f} —Ä—É–±")
    
    with col2:
        st.metric("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞", f"{total_incremental_revenue:,.0f} —Ä—É–±")
    
    with col3:
        color = "success" if overall_roi > 150 else "warning" if overall_roi > 75 else "error"
        st.markdown(f"""
        <div class="{color}-card">
            <h4>–û–±—â–∏–π ROI</h4>
            <h2>{overall_roi:.0f}%</h2>
        </div>
        """, unsafe_allow_html=True)
    
    # Value-based –∏–Ω—Å–∞–π—Ç—ã
    st.markdown("""
    ### üí° Value-based –ø—Ä–æ–º–æ –∏–Ω—Å–∞–π—Ç—ã:
    
    **üíé VIP —Å–µ–≥–º–µ–Ω—Ç**:
    ‚Ä¢ –ü—Ä–æ–º–æ –º–æ–≥—É—Ç –æ–±–µ—Å—Ü–µ–Ω–∏—Ç—å brand perception
    ‚Ä¢ –§–æ–∫—É—Å –Ω–∞ exclusive access –∏ premium service
    ‚Ä¢ Personal relationship management –≤–∞–∂–Ω–µ–µ —Å–∫–∏–¥–æ–∫
    
    **üí∞ High Value**:
    ‚Ä¢ Loyalty –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å accumulated benefits
    ‚Ä¢ Early access –∫ –Ω–æ–≤—ã–º features
    ‚Ä¢ Volume-based rewards
    
    **‚öñÔ∏è Medium Value**:
    ‚Ä¢ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç –¥–ª—è most –ø—Ä–æ–º–æ –∫–∞–º–ø–∞–Ω–∏–π
    ‚Ä¢ Potential –¥–ª—è upgrade –≤ high value –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º nurturing
    ‚Ä¢ Referral –ø—Ä–æ–≥—Ä–∞–º–º—ã work well
    
    **üìà Low Value**:
    ‚Ä¢ –í—ã—Å–æ–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞ –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ–¥—Ö–æ–¥–µ
    ‚Ä¢ Risk –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ deal-seekers
    ‚Ä¢ Focus –Ω–∞ habit formation over pure discounting
    """)

def expansion_strategy():
    """–°—Ç—Ä–∞—Ç–µ–≥–∏—è —ç–∫—Å–ø–∞–Ω—Å–∏–∏"""
    st.header("üöÄ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π —ç–∫—Å–ø–∞–Ω—Å–∏–∏")
    
    st.markdown("""
    **Expansion –≤ ride-hailing**: –Ω–µ –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏, –∞ –∞–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –ª–æ–∫–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è.
    –£—Å–ø–µ—Ö –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞, timing'–∞ –≤—Ö–æ–¥–∞ –∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ value proposition.
    """)
    
    expansion_type = st.selectbox(
        "–¢–∏–ø —ç–∫—Å–ø–∞–Ω—Å–∏–∏:",
        [
            "üèôÔ∏è –ù–æ–≤—ã–π –≥–æ—Ä–æ–¥ –≤ —Ç–æ–º –∂–µ —Ä–µ–≥–∏–æ–Ω–µ",
            "üåç –ù–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω/—Å—Ç—Ä–∞–Ω–∞", 
            "üèòÔ∏è –ú–∞–ª—ã–µ –≥–æ—Ä–æ–¥–∞ (Tier 2/3)",
            "üöÅ Vertical expansion (–≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏, –¥–æ—Å—Ç–∞–≤–∫–∞)"
        ]
    )
    
    if expansion_type == "üèôÔ∏è –ù–æ–≤—ã–π –≥–æ—Ä–æ–¥ –≤ —Ç–æ–º –∂–µ —Ä–µ–≥–∏–æ–Ω–µ":
        regional_city_expansion()
    elif expansion_type == "üåç –ù–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω/—Å—Ç—Ä–∞–Ω–∞":
        international_expansion()
    elif expansion_type == "üèòÔ∏è –ú–∞–ª—ã–µ –≥–æ—Ä–æ–¥–∞ (Tier 2/3)":
        small_cities_expansion()
    elif expansion_type == "üöÅ Vertical expansion (–≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏, –¥–æ—Å—Ç–∞–≤–∫–∞)":
        vertical_expansion()

def regional_city_expansion():
    """–≠–∫—Å–ø–∞–Ω—Å–∏—è –≤ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ–¥"""
    st.subheader("üèôÔ∏è Expansion –≤ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ–¥")
    
    # –ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–µ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üéØ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≥–æ—Ä–æ–¥–∞**")
        
        target_city = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫")
        population = st.number_input("–ù–∞—Å–µ–ª–µ–Ω–∏–µ", 500000, 3000000, 1600000)
        avg_income = st.number_input("–°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ (—Ä—É–±)", 35000, 100000, 55000)
        existing_competitors = st.slider("–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –Ω–∞ —Ä—ã–Ω–∫–µ", 0, 5, 2)
        transport_quality = st.slider("–ö–∞—á–µ—Å—Ç–≤–æ –æ–±—â.—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (1-10)", 1, 10, 6)
        
    with col2:
        st.markdown("**üìä –¢–µ–∫—É—â–µ–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ**")
        
        current_cities = st.number_input("–ì–æ—Ä–æ–¥–æ–≤ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ", 1, 20, 3)
        operational_experience = st.slider("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã (–ª–µ—Ç)", 1, 10, 4)
        brand_recognition = st.slider("–£–∑–Ω–∞–≤–∞–µ–º–æ—Å—Ç—å –±—Ä–µ–Ω–¥–∞ –≤ —Ä–µ–≥–∏–æ–Ω–µ (%)", 10, 80, 35)
        
        # –†–µ—Å—É—Ä—Å—ã –¥–ª—è —ç–∫—Å–ø–∞–Ω—Å–∏–∏
        expansion_budget = st.number_input("–ë—é–¥–∂–µ—Ç –Ω–∞ –∑–∞–ø—É—Å–∫ (–º–ª–Ω —Ä—É–±)", 5, 200, 50)
        timeline = st.slider("Timeline –¥–æ breakeven (–º–µ—Å—è—Ü–µ–≤)", 6, 36, 18)
    
    # Market sizing
    addressable_market = population * 0.15  # 15% penetration potential –≤ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–º –≥–æ—Ä–æ–¥–µ
    income_adjustment = min(1.2, avg_income / 60000)  # Adjustment –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—å–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
    adjusted_market = addressable_market * income_adjustment
    
    # Competitive landscape
    market_share_potential = max(0.15, 0.5 / (existing_competitors + 1))  # –° —É—á–µ—Ç–æ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏
    target_users_year_1 = adjusted_market * market_share_potential
    
    # Financial projections
    estimated_aov = 200 + (avg_income - 35000) / 500  # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –¥–æ—Ö–æ–¥–æ–≤
    estimated_frequency = 2.5 + (avg_income - 35000) / 25000  # –ë–æ–ª—å—à–µ –¥–æ—Ö–æ–¥—ã = –±–æ–ª—å—à–µ –ø–æ–µ–∑–¥–æ–∫
    
    monthly_revenue_potential = target_users_year_1 * estimated_frequency * estimated_aov * 0.25 / 12
    
    # Costs
    launch_costs = {
        '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏ –ø—Ä–æ–º–æ': expansion_budget * 0.4,
        '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞': expansion_budget * 0.3,
        'Regulatory –∏ legal': expansion_budget * 0.1,
        'Local team': expansion_budget * 0.15,
        '–†–µ–∑–µ—Ä–≤': expansion_budget * 0.05
    }
    
    monthly_operational_costs = target_users_year_1 * 25 / 12  # 25 —Ä—É–± –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ—Å—è—Ü
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    st.subheader(f"üìä –ê–Ω–∞–ª–∏–∑ —ç–∫—Å–ø–∞–Ω—Å–∏–∏ –≤ {target_city}")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä—ã–Ω–∫–∞", f"{adjusted_market:,.0f}")
    
    with col2:
        st.metric("–¶–µ–ª–µ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–≥–æ–¥ 1)", f"{target_users_year_1:,.0f}")
    
    with col3:
        st.metric("–ú–µ—Å—è—á–Ω–∞—è –≤—ã—Ä—É—á–∫–∞ (–∑—Ä–µ–ª–æ—Å—Ç—å)", f"{monthly_revenue_potential:,.0f} —Ä—É–±")
    
    with col4:
        payback_months = expansion_budget * 1000000 / (monthly_revenue_potential - monthly_operational_costs)
        st.metric("–ü—Ä–æ–≥–Ω–æ–∑ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏", f"{payback_months:.1f} –º–µ—Å")
    
    # Breakdown costs
    st.subheader("üí∞ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π")
    
    costs_df = pd.DataFrame([
        {'–ö–∞—Ç–µ–≥–æ—Ä–∏—è': category, '–°—É–º–º–∞': f"{cost:,.0f} –º–ª–Ω —Ä—É–±", '–î–æ–ª—è': f"{cost/expansion_budget:.1%}"}
        for category, cost in launch_costs.items()
    ])
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.dataframe(costs_df, use_container_width=True)
    
    with col2:
        fig = go.Figure(data=[go.Pie(
            labels=list(launch_costs.keys()),
            values=list(launch_costs.values()),
            hole=0.3
        )])
        fig.update_layout(title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π", height=300)
        st.plotly_chart(fig, use_container_width=True)
    
    # Risk assessment
    st.subheader("‚ö†Ô∏è –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤")
    
    risk_factors = []
    risk_score = 0
    
    if existing_competitors >= 3:
        risk_factors.append("üî¥ –í—ã—Å–æ–∫–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è")
        risk_score += 3
    elif existing_competitors >= 1:
        risk_factors.append("üü° –£–º–µ—Ä–µ–Ω–Ω–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è")
        risk_score += 1
    
    if avg_income < 45000:
        risk_factors.append("üî¥ –ù–∏–∑–∫–∞—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—å–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å")
        risk_score += 3
    elif avg_income < 60000:
        risk_factors.append("üü° –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—å–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å")
        risk_score += 1
    
    if transport_quality > 7:
        risk_factors.append("üü° –°–∏–ª—å–Ω—ã–π –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
        risk_score += 2
    
    if brand_recognition < 25:
        risk_factors.append("üü° –ù–∏–∑–∫–∞—è —É–∑–Ω–∞–≤–∞–µ–º–æ—Å—Ç—å –±—Ä–µ–Ω–¥–∞")
        risk_score += 1
    
    if population < 800000:
        risk_factors.append("üü° –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ä—ã–Ω–∫–∞")
        risk_score += 1
    
    # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–∏—Å–∫–æ–≤
    if risk_score <= 3:
        st.success("üü¢ **–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫** - –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —ç–∫—Å–ø–∞–Ω—Å–∏–∏")
        recommendation = "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫ –∑–∞–ø—É—Å–∫—É"
    elif risk_score <= 6:
        st.warning("üü° **–£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–∏—Å–∫** - —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
        recommendation = "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é"
    else:
        st.error("üî¥ **–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫** - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å–º–æ—Ç—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
        recommendation = "–ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –±–µ–∑ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π"
    
    for risk in risk_factors:
        st.write(f"‚Ä¢ {risk}")
    
    st.info(f"**–û–±—â–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è**: {recommendation}")
    
    # Success factors
    st.subheader("üéØ –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã —É—Å–ø–µ—Ö–∞")
    
    success_factors = [
        "**Local partnerships**: –î–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ —Å –º–µ—Å—Ç–Ω—ã–º–∏ —Ç–∞–∫—Å–æ–ø–∞—Ä–∫–∞–º–∏",
        "**Regulatory compliance**: –†–∞–±–æ—Ç–∞ —Å –º–µ—Å—Ç–Ω—ã–º–∏ –≤–ª–∞—Å—Ç—è–º–∏ –∑–∞—Ä–∞–Ω–µ–µ",
        "**Localized marketing**: –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –º–µ—Å—Ç–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏",
        "**Supply-side focus**: –ë—ã—Å—Ç—Ä–æ–µ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π",
        "**Gradual rollout**: –ü–æ—ç—Ç–∞–ø–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø–æ —Ä–∞–π–æ–Ω–∞–º",
        "**Price positioning**: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –º–µ—Å—Ç–Ω—ã—Ö —Ü–µ–Ω"
    ]
    
    for factor in success_factors:
        st.write(f"‚Ä¢ {factor}")

def international_expansion():
    """–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è —ç–∫—Å–ø–∞–Ω—Å–∏—è"""
    st.subheader("üåç –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è —ç–∫—Å–ø–∞–Ω—Å–∏—è")
    
    st.warning("""
    **International expansion**: —Å–∞–º—ã–π —Å–ª–æ–∂–Ω—ã–π —Ç–∏–ø —ç–∫—Å–ø–∞–Ω—Å–∏–∏. –¢—Ä–µ–±—É–µ—Ç –ø–æ–Ω–∏–º–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ
    —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è, –∫—É–ª—å—Ç—É—Ä—ã, –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏ –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª–∏.

"""
    st.warning("""
    **International expansion**: —Å–∞–º—ã–π —Å–ª–æ–∂–Ω—ã–π —Ç–∏–ø —ç–∫—Å–ø–∞–Ω—Å–∏–∏. –¢—Ä–µ–±—É–µ—Ç –ø–æ–Ω–∏–º–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ
    —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è, –∫—É–ª—å—Ç—É—Ä—ã, –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏ –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª–∏.
    """)
    
    # –í—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–π —Å—Ç—Ä–∞–Ω—ã/—Ä–µ–≥–∏–æ–Ω–∞
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üåç –¶–µ–ª–µ–≤–æ–π —Ä—ã–Ω–æ–∫**")
        
        target_country = st.selectbox("–¶–µ–ª–µ–≤–∞—è —Å—Ç—Ä–∞–Ω–∞:", 
                                    ["–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", "–ë–µ–ª–∞—Ä—É—Å—å", "–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω", 
                                     "–ì—Ä—É–∑–∏—è", "–ê—Ä–º–µ–Ω–∏—è", "–î—Ä—É–≥–∞—è"])
        
        market_maturity = st.selectbox("–ó—Ä–µ–ª–æ—Å—Ç—å —Ä—ã–Ω–∫–∞:", 
                                     ["Emerging (–Ω–µ—Ç ride-hailing)", 
                                      "Early stage (–µ—Å—Ç—å 1-2 –∏–≥—Ä–æ–∫–∞)",
                                      "Competitive (3+ –∏–≥—Ä–æ–∫–æ–≤)"])
        
        regulatory_risk = st.slider("–†–µ–≥—É–ª—è—Ç–æ—Ä–Ω—ã–π —Ä–∏—Å–∫ (1-10)", 1, 10, 5)
        cultural_distance = st.slider("–ö—É–ª—å—Ç—É—Ä–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è (1-10)", 1, 10, 3)
        
    with col2:
        st.markdown("**üí∞ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã**")
        
        market_size_usd = st.number_input("–†–∞–∑–º–µ—Ä —Ä—ã–Ω–∫–∞ (–º–ª–Ω USD)", 10, 1000, 150)
        investment_budget_usd = st.number_input("–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –±—é–¥–∂–µ—Ç (–º–ª–Ω USD)", 5, 200, 25)
        local_partnership = st.checkbox("–õ–æ–∫–∞–ª—å–Ω–æ–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ", True)
        
        # Mode –≤—Ö–æ–¥–∞
        entry_mode = st.selectbox("–†–µ–∂–∏–º –≤—Ö–æ–¥–∞:",
                                ["Organic expansion", "Acquisition", 
                                 "Joint venture", "Franchise"])
    
    # Risk scoring
    risk_factors = {}
    total_risk_score = 0
    
    # Regulatory risk
    if regulatory_risk >= 8:
        risk_factors["Regulatory"] = {"score": 3, "desc": "–í—ã—Å–æ–∫–∏–π —Ä–µ–≥—É–ª—è—Ç–æ—Ä–Ω—ã–π —Ä–∏—Å–∫"}
        total_risk_score += 3
    elif regulatory_risk >= 5:
        risk_factors["Regulatory"] = {"score": 2, "desc": "–£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–µ–≥—É–ª—è—Ç–æ—Ä–Ω—ã–π —Ä–∏—Å–∫"}
        total_risk_score += 2
    else:
        risk_factors["Regulatory"] = {"score": 1, "desc": "–ù–∏–∑–∫–∏–π —Ä–µ–≥—É–ª—è—Ç–æ—Ä–Ω—ã–π —Ä–∏—Å–∫"}
        total_risk_score += 1
    
    # Market competition
    competition_scores = {"Emerging": 1, "Early stage": 2, "Competitive": 4}
    comp_score = competition_scores[market_maturity.split(" ")[0]]
    risk_factors["Competition"] = {"score": comp_score, "desc": f"–ö–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è: {market_maturity}"}
    total_risk_score += comp_score
    
    # Cultural risk
    if cultural_distance >= 7:
        risk_factors["Cultural"] = {"score": 3, "desc": "–í—ã—Å–æ–∫–∏–µ –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –±–∞—Ä—å–µ—Ä—ã"}
        total_risk_score += 3
    elif cultural_distance >= 4:
        risk_factors["Cultural"] = {"score": 2, "desc": "–£–º–µ—Ä–µ–Ω–Ω—ã–µ –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –±–∞—Ä—å–µ—Ä—ã"}
        total_risk_score += 2
    else:
        risk_factors["Cultural"] = {"score": 1, "desc": "–ù–∏–∑–∫–∏–µ –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –±–∞—Ä—å–µ—Ä—ã"}
        total_risk_score += 1
    
    # Investment requirements –ø–æ entry mode
    investment_multipliers = {
        "Organic expansion": 1.0,
        "Acquisition": 2.5,
        "Joint venture": 1.3,
        "Franchise": 0.6
    }
    
    required_investment = investment_budget_usd * investment_multipliers[entry_mode]
    
    # Timeline to profitability
    base_timeline = 24  # –º–µ—Å—è—Ü–µ–≤
    timeline_adjustments = {
        "Emerging": -6,  # –ë—ã—Å—Ç—Ä–µ–µ –≤ –Ω–æ–≤—ã—Ö —Ä—ã–Ω–∫–∞—Ö
        "Early stage": 0,
        "Competitive": +12  # –î–æ–ª—å—à–µ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏
    }
    
    risk_timeline_penalty = (total_risk_score - 5) * 2  # –ö–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —Ä–∏—Å–∫–∞ = +2 –º–µ—Å—è—Ü–∞
    estimated_timeline = base_timeline + timeline_adjustments[market_maturity.split(" ")[0]] + risk_timeline_penalty
    
    if local_partnership:
        estimated_timeline -= 6  # –ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ —É—Å–∫–æ—Ä—è–µ—Ç
        required_investment *= 0.8  # –ò —Å–Ω–∏–∂–∞–µ—Ç —Ä–∞—Å—Ö–æ–¥—ã
    
    # Results
    st.subheader("üìä –ê–Ω–∞–ª–∏–∑ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–π —ç–∫—Å–ø–∞–Ω—Å–∏–∏")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        risk_color = "error" if total_risk_score >= 9 else "warning" if total_risk_score >= 6 else "success"
        st.markdown(f"""
        <div class="{risk_color}-card">
            <h4>–û–±—â–∏–π —Ä–∏—Å–∫</h4>
            <h2>{total_risk_score}/12</h2>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.metric("–¢—Ä–µ–±—É–µ—Ç—Å—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π", f"${required_investment:.1f}M")
    
    with col3:
        st.metric("Timeline –¥–æ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏", f"{estimated_timeline} –º–µ—Å")
    
    with col4:
        market_attractiveness = market_size_usd / required_investment
        st.metric("Market attractiveness", f"{market_attractiveness:.1f}x")
    
    # Risk breakdown
    st.subheader("‚ö†Ô∏è –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∏—Å–∫–æ–≤")
    
    risk_df = pd.DataFrame([
        {"–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∏—Å–∫–∞": category, "–ë–∞–ª–ª": data["score"], "–û–ø–∏—Å–∞–Ω–∏–µ": data["desc"]}
        for category, data in risk_factors.items()
    ])
    st.dataframe(risk_df, use_container_width=True)
    
    # Entry mode analysis
    st.subheader(f"üéØ –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ '{entry_mode}'")
    
    entry_analysis = {
        "Organic expansion": {
            "pros": ["–ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å", "–ù–∏–∑–∫–∏–µ –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ brand identity"],
            "cons": ["–ú–µ–¥–ª–µ–Ω–Ω–æ–µ –ø—Ä–æ–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–µ", "–í—ã—Å–æ–∫–∏–µ regulatory —Ä–∏—Å–∫–∏", "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ local expertise"],
            "best_for": "–ó—Ä–µ–ª—ã–µ —Ä—ã–Ω–∫–∏ —Å –Ω–∏–∑–∫–∏–º–∏ –±–∞—Ä—å–µ—Ä–∞–º–∏"
        },
        "Acquisition": {
            "pros": ["–ë—ã—Å—Ç—Ä—ã–π market entry", "–ì–æ—Ç–æ–≤–∞—è –∫–ª–∏–µ–Ω—Ç—Å–∫–∞—è –±–∞–∑–∞", "Local expertise"],
            "cons": ["–í—ã—Å–æ–∫–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "Integration challenges", "Cultural misalignment"],
            "best_for": "–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ —Ä—ã–Ω–∫–∏ —Å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ targets"
        },
        "Joint venture": {
            "pros": ["–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–≤", "Local partnerships", "Regulatory support"],
            "cons": ["–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å", "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã", "Sharing profits"],
            "best_for": "–í—ã—Å–æ–∫–æ—Ä–∏—Å–∫–æ–≤—ã–µ —Ä—ã–Ω–∫–∏ —Å strong local players"
        },
        "Franchise": {
            "pros": ["–ù–∏–∑–∫–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–ë—ã—Å—Ç—Ä–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ", "Local ownership"],
            "cons": ["–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞", "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç franchisees", "Brand risks"],
            "best_for": "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∞–ª—ã–µ —Ä—ã–Ω–∫–∏"
        }
    }
    
    analysis = entry_analysis[entry_mode]
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**‚úÖ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**")
        for pro in analysis["pros"]:
            st.write(f"‚Ä¢ {pro}")
        
        st.markdown("**‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:**")
        for con in analysis["cons"]:
            st.write(f"‚Ä¢ {con}")
    
    with col2:
        st.info(f"**–õ—É—á—à–µ –≤—Å–µ–≥–æ –¥–ª—è**: {analysis['best_for']}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
        if total_risk_score <= 4:
            st.success("üü¢ **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è**: –ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —ç–∫—Å–ø–∞–Ω—Å–∏–∏")
        elif total_risk_score <= 7:
            st.warning("üü° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è**: –≠–∫—Å–ø–∞–Ω—Å–∏—è –≤–æ–∑–º–æ–∂–Ω–∞ –ø—Ä–∏ —Ç—â–∞—Ç–µ–ª—å–Ω–æ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏")
        else:
            st.error("üî¥ **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è**: –í—ã—Å–æ–∫–æ—Ä–∏—Å–∫–æ–≤–∞—è —ç–∫—Å–ø–∞–Ω—Å–∏—è, —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã")

def small_cities_expansion():
    """–≠–∫—Å–ø–∞–Ω—Å–∏—è –≤ –º–∞–ª—ã–µ –≥–æ—Ä–æ–¥–∞"""
    st.subheader("üèòÔ∏è –≠–∫—Å–ø–∞–Ω—Å–∏—è –≤ –º–∞–ª—ã–µ –≥–æ—Ä–æ–¥–∞ (Tier 2/3)")
    
    st.info("""
    **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –º–∞–ª—ã—Ö –≥–æ—Ä–æ–¥–æ–≤**: –ú–µ–Ω—å—à–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏, –Ω–æ –∏ –º–µ–Ω—å—à–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å.
    –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è —Ü–µ–Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –∏ operational approach.
    """)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞–ª–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üèòÔ∏è –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≥–æ—Ä–æ–¥–∞**")
        
        small_city_population = st.slider("–ù–∞—Å–µ–ª–µ–Ω–∏–µ", 100000, 800000, 300000)
        economic_activity = st.selectbox("–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:",
                                       ["–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π —Ü–µ–Ω—Ç—Ä", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π —Ü–µ–Ω—Ç—Ä",
                                        "–¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π", "–°–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã–π"])
        
        distance_from_major = st.slider("–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –∫—Ä—É–ø–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ (–∫–º)", 50, 500, 150)
        avg_income_small = st.slider("–°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ (% –æ—Ç –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ)", 40, 80, 55)
        
    with col2:
        st.markdown("**üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è**")
        
        taxi_penetration = st.slider("–ü—Ä–æ–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–µ —Ç–∞–∫—Å–∏ (%)", 5, 40, 15)
        car_ownership = st.slider("–ê–≤—Ç–æ–º–æ–±–∏–ª–∏–∑–∞—Ü–∏—è (–∞–≤—Ç–æ/1000 –∂–∏—Ç–µ–ª–µ–π)", 200, 450, 320)
        public_transport = st.slider("–ö–∞—á–µ—Å—Ç–≤–æ –æ–±—â.—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (1-10)", 2, 8, 4)
        
        # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
        pricing_strategy = st.selectbox("–¶–µ–Ω–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è:",
                                      ["–ú–æ—Å–∫–æ–≤—Å–∫–∏–µ —Ü–µ–Ω—ã", "–°–∫–∏–¥–∫–∞ 20%", "–°–∫–∏–¥–∫–∞ 40%", "–õ–æ–∫–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã"])
    
    # Market analysis
    moscow_aov = 350
    moscow_income = 100000
    
    # Adjustment –¥–ª—è –º–∞–ª–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    income_ratio = avg_income_small / 100
    adjusted_aov = moscow_aov * income_ratio
    
    # Pricing strategy impact
    pricing_adjustments = {
        "–ú–æ—Å–∫–æ–≤—Å–∫–∏–µ —Ü–µ–Ω—ã": 1.0,
        "–°–∫–∏–¥–∫–∞ 20%": 0.8,
        "–°–∫–∏–¥–∫–∞ 40%": 0.6,
        "–õ–æ–∫–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã": income_ratio
    }
    
    final_aov = adjusted_aov * pricing_adjustments[pricing_strategy]
    
    # Market potential
    # –í –º–∞–ª—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö –º–µ–Ω—å—à–µ –ø—Ä–æ–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–µ ride-hailing
    max_penetration = 0.10  # –ú–∞–∫—Å–∏–º—É–º 10% vs 20% –≤ –±–æ–ª—å—à–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö
    addressable_market = small_city_population * max_penetration
    
    # Competition factor (–æ–±—ã—á–Ω–æ –º–µ–Ω—å—à–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏)
    competition_factor = 0.8 if small_city_population > 400000 else 0.5
    realistic_market = addressable_market * competition_factor
    
    # Operational considerations
    driver_density = car_ownership / 1000 * 0.05  # 5% –≥–æ—Ç–æ–≤—ã —Ä–∞–±–æ—Ç–∞—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è–º–∏
    required_drivers = realistic_market / 20  # 1 –≤–æ–¥–∏—Ç–µ–ª—å –Ω–∞ 20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    driver_gap = max(0, required_drivers - small_city_population * driver_density)
    
    # Financial model
    frequency_small_city = 2.0  # –ú–µ–Ω—å—à–µ —á–∞—Å—Ç–æ—Ç–∞ —á–µ–º –≤ –º–µ–≥–∞–ø–æ–ª–∏—Å–∞—Ö
    monthly_revenue_per_user = final_aov * frequency_small_city * 0.25
    
    # Costs –≤ –º–∞–ª—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö
    operational_cost_per_user = 15  # –ù–∏–∂–µ —á–µ–º –≤ –±–æ–ª—å—à–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö
    cac_small_city = 800  # –ú–µ–Ω—å—à–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è = –º–µ–Ω—å—à–µ CAC
    
    # Break-even analysis
    monthly_profit_per_user = monthly_revenue_per_user - operational_cost_per_user
    ltv_small_city = monthly_profit_per_user / 0.08  # 8% churn –≤ –º–∞–ª—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö
    ltv_cac_ratio = ltv_small_city / cac_small_city
    
    # Results
    st.subheader("üìä –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ –º–∞–ª–æ–≥–æ –≥–æ—Ä–æ–¥–∞")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä—ã–Ω–∫–∞", f"{realistic_market:,.0f}")
    
    with col2:
        st.metric("AOV –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π", f"{final_aov:.0f} —Ä—É–±")
    
    with col3:
        st.metric("LTV –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", f"{ltv_small_city:,.0f} —Ä—É–±")
    
    with col4:
        color = "success" if ltv_cac_ratio >= 3 else "warning" if ltv_cac_ratio >= 2 else "error"
        st.markdown(f"""
        <div class="{color}-card">
            <h4>LTV/CAC</h4>
            <h2>{ltv_cac_ratio:.1f}:1</h2>
        </div>
        """, unsafe_allow_html=True)
    
    # Supply-side challenges
    st.subheader("üöó –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–≤–æ–¥–∏—Ç–µ–ª–∏)")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.metric("–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π", f"{small_city_population * driver_density:,.0f}")
        st.metric("–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–æ–¥–∏—Ç–µ–ª–µ–π", f"{required_drivers:,.0f}")
        
        if driver_gap > 0:
            st.error(f"–î–µ—Ñ–∏—Ü–∏—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–π: {driver_gap:,.0f}")
        else:
            st.success("–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π")
    
    with col2:
        # –ì—Ä–∞—Ñ–∏–∫ supply/demand balance
        fig = go.Figure()
        
        categories = ['–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª–∏', '–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–æ–¥–∏—Ç–µ–ª–µ–π']
        values = [small_city_population * driver_density, required_drivers]
        colors = ['blue', 'red' if driver_gap > 0 else 'green']
        
        fig.add_trace(go.Bar(x=categories, y=values, marker_color=colors))
        fig.update_layout(title="–ë–∞–ª–∞–Ω—Å —Å–ø—Ä–æ—Å–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª–µ–π", height=300)
        st.plotly_chart(fig, use_container_width=True)
    
    # Strategies for small cities
    st.subheader("üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –º–∞–ª—ã—Ö –≥–æ—Ä–æ–¥–æ–≤")
    
    strategies = {
        "–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π —Ü–µ–Ω—Ç—Ä": [
            "–§–æ–∫—É—Å –Ω–∞ B2B —Å–µ–≥–º–µ–Ω—Ç (–∑–∞–≤–æ–¥—ã, –æ—Ñ–∏—Å—ã)",
            "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –Ω–∞ —Ä–∞–∑–≤–æ–∑ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
            "Timing –Ω–∞ —Å–º–µ–Ω—ã (3 —Å–º–µ–Ω—ã = 3 –ø–∏–∫–∞ —Å–ø—Ä–æ—Å–∞)"
        ],
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π —Ü–µ–Ω—Ç—Ä": [
            "Partnerships —Å –≥–æ—Å—É—á—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏",
            "–§–æ–∫—É—Å –Ω–∞ –¥–µ–ª–æ–≤—ã–µ –ø–æ–µ–∑–¥–∫–∏",
            "Premium –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —á–∏–Ω–æ–≤–Ω–∏–∫–æ–≤"
        ],
        "–¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π": [
            "–°–µ–∑–æ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç—ã",
            "Partnerships —Å –æ—Ç–µ–ª—è–º–∏ –∏ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º–∏",
            "Tour packages –∏ —ç–∫—Å–∫—É—Ä—Å–∏–æ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã"
        ],
        "–°–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã–π": [
            "–ê–≥—Ä–æ-–ª–æ–≥–∏—Å—Ç–∏–∫–∞ –∏ –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏",
            "–ú–µ–∂–≥–æ—Ä–æ–¥—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã –≤ —Ä–∞–π—Ü–µ–Ω—Ç—Ä—ã",
            "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ rural mobility"
        ]
    }
    
    for strategy in strategies[economic_activity]:
        st.write(f"‚Ä¢ {strategy}")
    
    # Risks and mitigation
    st.markdown("""
    ### ‚ö†Ô∏è –†–∏—Å–∫–∏ –º–∞–ª—ã—Ö –≥–æ—Ä–æ–¥–æ–≤:
    
    **üî¥ –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∏—Å–∫–∏:**
    ‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ä—ã–Ω–∫–∞
    ‚Ä¢ –ù–∏–∑–∫–∞—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—å–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
    ‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ–º –≤–æ–¥–∏—Ç–µ–ª–µ–π
    ‚Ä¢ Seasonal fluctuations
    ‚Ä¢ –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–µ–∫
    
    **‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –º–∏—Ç–∏–≥–∞—Ü–∏–∏:**
    ‚Ä¢ Multi-city approach (–∫–ª–∞—Å—Ç–µ—Ä –º–∞–ª—ã—Ö –≥–æ—Ä–æ–¥–æ–≤)
    ‚Ä¢ –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Ü–µ–Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏
    ‚Ä¢ –§–æ–∫—É—Å –Ω–∞ underserved segments
    ‚Ä¢ Partnerships —Å –º–µ—Å—Ç–Ω—ã–º–∏ –±–∏–∑–Ω–µ—Å–∞–º–∏
    ‚Ä¢ Flexible operational model
    """)

def vertical_expansion():
    """–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è —ç–∫—Å–ø–∞–Ω—Å–∏—è"""
    st.subheader("üöÅ Vertical Expansion: –ù–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã")
    
    st.success("""
    **Leverage existing assets**: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É, –≤–æ–¥–∏—Ç–µ–ª–µ–π –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∑–∞–ø—É—Å–∫–∞
    —Å–º–µ–∂–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤. –î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è revenue streams –∏ –ø–æ–≤—ã—à–µ–Ω–∏–µ lifetime value.
    """)
    
    # –í—ã–±–æ—Ä –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
    vertical_type = st.selectbox(
        "–¢–∏–ø –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π —ç–∫—Å–ø–∞–Ω—Å–∏–∏:",
        ["üçï –î–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã", "üì¶ –ö—É—Ä—å–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏", "üöö –ì—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏", 
         "üè™ Grocery delivery", "üíä –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —É—Å–ª—É–≥–∏", "üéì B2B –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è"]
    )
    
    if vertical_type == "üçï –î–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã":
        food_delivery_vertical()
    elif vertical_type == "üì¶ –ö—É—Ä—å–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏":
        courier_vertical()
    elif vertical_type == "üöö –ì—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏":
        cargo_vertical()
    elif vertical_type == "üè™ Grocery delivery":
        grocery_vertical()
    elif vertical_type == "üíä –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —É—Å–ª—É–≥–∏":
        medical_vertical()
    elif vertical_type == "üéì B2B –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è":
        b2b_vertical()

def food_delivery_vertical():
    """–î–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã"""
    st.markdown("### üçï –î–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üìä –¢–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤—ã ride-hailing**")
        
        current_drivers = st.number_input("–ê–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π", 5000, 100000, 25000)
        current_users = st.number_input("–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", 50000, 1000000, 200000)
        brand_recognition = st.slider("–£–∑–Ω–∞–≤–∞–µ–º–æ—Å—Ç—å –±—Ä–µ–Ω–¥–∞ (%)", 20, 90, 65)
        
    with col2:
        st.markdown("**üçï –ü–∞—Ä–∞–º–µ—Ç—Ä—ã food delivery**")
        
        restaurant_partnerships = st.number_input("–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤", 500, 10000, 2500)
        delivery_fee = st.slider("–ö–æ–º–∏—Å—Å–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ (—Ä—É–±)", 50, 200, 120)
        restaurant_commission = st.slider("–ö–æ–º–∏—Å—Å–∏—è —Å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ (%)", 15, 35, 25)
        avg_order_value = st.slider("–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –∑–∞–∫–∞–∑–∞ (—Ä—É–±)", 600, 2000, 1200)
    
    # Market analysis
    food_delivery_market_size = current_users * 0.4  # 40% ride-hailing –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–∫–∞–∑—ã–≤–∞—é—Ç –µ–¥—É
    monthly_orders_per_user = 3.5  # –ß–∞—Å—Ç–æ—Ç–∞ –∑–∞–∫–∞–∑–æ–≤
    
    # Revenue calculation
    delivery_revenue = food_delivery_market_size * monthly_orders_per_user * delivery_fee
    commission_revenue = food_delivery_market_size * monthly_orders_per_user * avg_order_value * (restaurant_commission / 100)
    total_monthly_revenue = delivery_revenue + commission_revenue
    
    # Costs
    driver_costs = food_delivery_market_size * monthly_orders_per_user * 80  # –û–ø–ª–∞—Ç–∞ –∫—É—Ä—å–µ—Ä–∞–º
    operational_costs = total_monthly_revenue * 0.15  # 15% –Ω–∞ operations
    
    monthly_profit = total_monthly_revenue - driver_costs - operational_costs
    
    # Investment requirements
    initial_investment = restaurant_partnerships * 15000  # 15k –Ω–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
    tech_development = 8000000  # –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ delivery –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    marketing_launch = 12000000  # Launch –∫–∞–º–ø–∞–Ω–∏—è
    
    total_investment = initial_investment + tech_development + marketing_launch
    payback_months = total_investment / monthly_profit if monthly_profit > 0 else float('inf')
    
    # Results
    st.subheader("üìà –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –º–æ–¥–µ–ª—å –¥–æ—Å—Ç–∞–≤–∫–∏ –µ–¥—ã")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", f"{food_delivery_market_size:,.0f}")
    
    with col2:
        st.metric("–ú–µ—Å—è—á–Ω–∞—è –≤—ã—Ä—É—á–∫–∞", f"{total_monthly_revenue:,.0f} —Ä—É–±")
    
    with col3:
        st.metric("–ú–µ—Å—è—á–Ω–∞—è –ø—Ä–∏–±—ã–ª—å", f"{monthly_profit:,.0f} —Ä—É–±")
    
    with col4:
        st.metric("–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å", f"{payback_months:.1f} –º–µ—Å" if payback_months != float('inf') else "–ù–µ –æ–∫—É–ø–∞–µ—Ç—Å—è")
    
    # Revenue breakdown
    fig = go.Figure(data=[go.Pie(
        labels=['–ö–æ–º–∏—Å—Å–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏', '–ö–æ–º–∏—Å—Å–∏—è —Å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤'],
        values=[delivery_revenue, commission_revenue],
        hole=0.3
    )])
    fig.update_layout(title="–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—ã—Ä—É—á–∫–∏ food delivery", height=300)
    st.plotly_chart(fig, use_container_width=True)

def courier_vertical():
    """–ö—É—Ä—å–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏"""
    st.markdown("### üì¶ –ö—É—Ä—å–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏")
    
    # Similar structure for other verticals...
    st.info("B2B –∏ C2C –∫—É—Ä—å–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏, –ª–æ–≥–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–∏–ª–∏")
    
    # Simplified implementation for brevity
    st.write("‚Ä¢ Leverage existing driver network")
    st.write("‚Ä¢ Focus on B2B segment (e-commerce, pharmacies)")
    st.write("‚Ä¢ Same-day delivery premium")
    st.write("‚Ä¢ Integration with marketplace platforms")

def cargo_vertical():
    """–ì—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏"""
    st.markdown("### üöö –ì—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏")
    st.info("–ú–∞–ª–æ—Ç–æ–Ω–Ω–∞–∂–Ω—ã–µ –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏ –¥–ª—è —á–∞—Å—Ç–Ω—ã—Ö –ª–∏—Ü –∏ –º–∞–ª–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞")

def grocery_vertical():
    """Grocery delivery"""
    st.markdown("### üè™ Grocery Delivery")
    st.info("–î–æ—Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–ø—Ä–æ—Å–∞")

def medical_vertical():
    """–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —É—Å–ª—É–≥–∏"""
    st.markdown("### üíä –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —É—Å–ª—É–≥–∏")
    st.info("–î–æ—Å—Ç–∞–≤–∫–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤, –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, —Ç–µ–ª–µ–º–µ–¥–∏—Ü–∏–Ω–∞")

def b2b_vertical():
    """B2B –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è"""
    st.markdown("### üéì B2B –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è")
    st.info("–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã, employee transportation, business travel")

def industry_cases():
    """–ö–µ–π—Å—ã –∏–∑ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏"""
    st.header("üìö –ö–µ–π—Å—ã –∏–∑ ride-hailing –∏–Ω–¥—É—Å—Ç—Ä–∏–∏")
    
    st.markdown("""
    **–†–µ–∞–ª—å–Ω—ã–µ –∫–µ–π—Å—ã**: –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã —É—Å–ø–µ—à–Ω—ã—Ö –∏ –Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π 
    –≤ ride-hailing —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ unit economics –∏ growth strategies.
    """)
    
    case_type = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–µ–π—Å–∞:",
        [
            "üöÄ –£—Å–ø–µ—à–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–æ—Å—Ç–∞",
            "üí∏ –ü—Ä–æ–º–æ-–≤–æ–π–Ω—ã –∏ –∏—Ö –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è", 
            "üåç –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è —ç–∫—Å–ø–∞–Ω—Å–∏—è",
            "üîÑ Pivot –∏ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è",
            "üíî –ù–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–ø—É—Å–∫–∏",
            "üéØ –ù–∏—à–µ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"
        ]
    )
    
    if case_type == "üöÄ –£—Å–ø–µ—à–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–æ—Å—Ç–∞":
        growth_success_cases()
    elif case_type == "üí∏ –ü—Ä–æ–º–æ-–≤–æ–π–Ω—ã –∏ –∏—Ö –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è":
        promo_wars_cases()
    elif case_type == "üåç –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è —ç–∫—Å–ø–∞–Ω—Å–∏—è":
        international_cases()
    elif case_type == "üîÑ Pivot –∏ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è":
        pivot_cases()
    elif case_type == "üíî –ù–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–ø—É—Å–∫–∏":
        failure_cases()
    elif case_type == "üéØ –ù–∏—à–µ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏":
        niche_strategy_cases()

def growth_success_cases():
    """–£—Å–ø–µ—à–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–æ—Å—Ç–∞"""
    st.subheader("üöÄ –ö–µ–π—Å—ã —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞")
    
    # –ö–µ–π—Å 1: Supply-side first strategy
    with st.expander("üìà –ö–µ–π—Å 1: Driver-first —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –≤ –Ω–æ–≤–æ–º –≥–æ—Ä–æ–¥–µ"):
        st.markdown("""
        **–°–∏—Ç—É–∞—Ü–∏—è**: –ó–∞–ø—É—Å–∫ –≤ –≥–æ—Ä–æ–¥–µ-–º–∏–ª–ª–∏–æ–Ω–Ω–∏–∫–µ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–µ–π.
        
        **–°—Ç—Ä–∞—Ç–µ–≥–∏—è**: –í–º–µ—Å—Ç–æ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª–µ–π –∏ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤,
        —Ñ–æ–∫—É—Å –Ω–∞ driver acquisition –≤ –ø–µ—Ä–≤—ã–µ 3 –º–µ—Å—è—Ü–∞.
        
        **–¢–∞–∫—Ç–∏–∫–∏**:
        ‚Ä¢ Guaranteed earnings –¥–ª—è –ø–µ—Ä–≤—ã—Ö 1000 –≤–æ–¥–∏—Ç–µ–ª–µ–π
        ‚Ä¢ –ë–æ–Ω—É—Å—ã –∑–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π
        ‚Ä¢ Premium payout rates (–≤—ã—à–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –Ω–∞ 15%)
        ‚Ä¢ Zero commission –ø–µ—Ä–≤—ã–π –º–µ—Å—è—Ü
        
        **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã**:
        ‚Ä¢ Supply density: 1 –≤–æ–¥–∏—Ç–µ–ª—å –Ω–∞ 80 –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        ‚Ä¢ Wait time: 3-4 –º–∏–Ω—É—Ç—ã vs 8-10 —É –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
        ‚Ä¢ Organic demand growth –±–ª–∞–≥–æ–¥–∞—Ä—è word-of-mouth
        ‚Ä¢ LTV/CAC 4.2:1 vs –æ–±—ã—á–Ω—ã—Ö 2.8:1
        
        **–ü–æ—á–µ–º—É —Å—Ä–∞–±–æ—Ç–∞–ª–æ**: –†–µ—à–∏–ª–∏ –≥–ª–∞–≤–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É ride-hailing - availability
        """)
    
    # –ö–µ–π—Å 2: B2B focus
    with st.expander("üíº –ö–µ–π—Å 2: B2B-first —Å—Ç—Ä–∞—Ç–µ–≥–∏—è"):
        st.markdown("""
        **–°–∏—Ç—É–∞—Ü–∏—è**: –ó–∞–ø—É—Å–∫ –≤ –≥–æ—Ä–æ–¥–µ —Å –Ω–∏–∑–∫–æ–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é.
        
        **–°—Ç—Ä–∞—Ç–µ–≥–∏—è**: –§–æ–∫—É—Å –Ω–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞—Ö –≤–º–µ—Å—Ç–æ B2C.
        
        **–¢–∞–∫—Ç–∏–∫–∏**:
        ‚Ä¢ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Å –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π –æ–ø–ª–∞—Ç–æ–π
        ‚Ä¢ Dedicated fleet –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        ‚Ä¢ Integration —Å HR —Å–∏—Å—Ç–µ–º–∞–º–∏
        ‚Ä¢ Bulk pricing —Å–æ —Å–∫–∏–¥–∫–∞–º–∏
        
        **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã**:
        ‚Ä¢ 60% –≤—ã—Ä—É—á–∫–∏ –æ—Ç B2B vs –æ–±—ã—á–Ω—ã—Ö 20%
        ‚Ä¢ Predictable cash flow
        ‚Ä¢ Lower CAC (sales vs marketing)
        ‚Ä¢ Higher retention (–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã)
        
        **Unit Economics**:
        ‚Ä¢ B2B CAC: 3,500 —Ä—É–± vs B2C: 1,800 —Ä—É–±
        ‚Ä¢ B2B LTV: 28,000 —Ä—É–± vs B2C: 6,200 —Ä—É–±
        ‚Ä¢ B2B LTV/CAC: 8:1 vs B2C: 3.4:1
        """)
    
    # –ö–µ–π—Å 3: Loyalty program
    with st.expander("‚≠ê –ö–µ–π—Å 3: Loyalty –∫–∞–∫ growth driver"):
        st.markdown("""
        **–°–∏—Ç—É–∞—Ü–∏—è**: –ó—Ä–µ–ª—ã–π —Ä—ã–Ω–æ–∫ —Å –≤—ã—Å–æ–∫–æ–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–µ–π, –ø–∞–¥–∞—é—â–∏–π retention.
        
        **–°—Ç—Ä–∞—Ç–µ–≥–∏—è**: –ó–∞–ø—É—Å–∫ comprehensive loyalty –ø—Ä–æ–≥—Ä–∞–º–º—ã.
        
        **–ú–µ—Ö–∞–Ω–∏–∫–∞**:
        ‚Ä¢ Points –∑–∞ –∫–∞–∂–¥—É—é –ø–æ–µ–∑–¥–∫—É (1 —Ä—É–± = 1 point)
        ‚Ä¢ Tier system (Bronze/Silver/Gold/Platinum)
        ‚Ä¢ Exclusive perks –¥–ª—è –≤—ã—Å–æ–∫–∏—Ö tiers
        ‚Ä¢ Referral bonuses –≤ points
        
        **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —á–µ—Ä–µ–∑ 6 –º–µ—Å—è—Ü–µ–≤**:
        ‚Ä¢ Retention +35% –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        ‚Ä¢ Frequency +28% (—Å—Ç–∏–º—É–ª —Ç—Ä–∞—Ç–∏—Ç—å points)
        ‚Ä¢ AOV +15% (upgrade behavior)
        ‚Ä¢ Referral rate +120%
        
        **–§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –≤–ª–∏—è–Ω–∏–µ**:
        ‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–∞ cost: 8% –æ—Ç –≤—ã—Ä—É—á–∫–∏
        ‚Ä¢ LTV increase: +42%
        ‚Ä¢ Net ROI: 380%
        """)

def promo_wars_cases():
    """–ö–µ–π—Å—ã –ø—Ä–æ–º–æ-–≤–æ–π–Ω"""
    st.subheader("üí∏ –ü—Ä–æ–º–æ-–≤–æ–π–Ω—ã: –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏ –∏ –ø–æ–±–µ–∂–¥–µ–Ω–Ω—ã–µ")
    
    with st.expander("‚öîÔ∏è –ö–µ–π—Å 1: –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ–±–æ—Ä–æ–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è"):
        st.markdown("""
        **Trigger**: –ù–æ–≤—ã–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç –∑–∞–ø—É—Å—Ç–∏–ª 70% —Å–∫–∏–¥–∫–∏ –Ω–∞ –ø–µ—Ä–≤—ã–µ 10 –ø–æ–µ–∑–¥–æ–∫.
        
        **Defensive response**:
        ‚Ä¢ Matching offer –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤
        ‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π cashback –¥–ª—è existing users
        ‚Ä¢ Surge pricing reduction –≤ peak hours
        ‚Ä¢ PR –∫–∞–º–ø–∞–Ω–∏—è "–ú—ã –≤—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ª—É—á—à–∏–µ —Ü–µ–Ω—ã"
        
        **Timeline –∏ –∑–∞—Ç—Ä–∞—Ç—ã**:
        ‚Ä¢ –ù–µ–¥–µ–ª—è 1-2: 50–ú —Ä—É–± –Ω–∞ –ø—Ä–æ–º–æ (2x –æ–±—ã—á–Ω–æ–≥–æ)
        ‚Ä¢ –ù–µ–¥–µ–ª—è 3-4: 35–ú —Ä—É–± 
        ‚Ä¢ –ù–µ–¥–µ–ª—è 5-8: –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ
        
        **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã**:
        ‚Ä¢ User retention: 92% vs –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã—Ö 75%
        ‚Ä¢ Market share loss: 3% vs –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã—Ö 15%
        ‚Ä¢ Total cost: 180–ú —Ä—É–±
        ‚Ä¢ Estimated LTV saved: 750–ú —Ä—É–±
        ‚Ä¢ ROI defensive campaign: 317%
        
        **Lesson learned**: –ë—ã—Å—Ç—Ä–∞—è —Ä–µ–∞–∫—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–∞
        """)
    
    with st.expander("üìâ –ö–µ–π—Å 2: –ü—Ä–æ–º–æ-–≤–æ–π–Ω–∞ –¥–æ –≤–∑–∞–∏–º–Ω–æ–≥–æ –∏—Å—Ç–æ—â–µ–Ω–∏—è"):
        st.markdown("""
        **–°–∏—Ç—É–∞—Ü–∏—è**: –î–≤–∞ –∏–≥—Ä–æ–∫–∞ –Ω–∞ —Ä—ã–Ω–∫–µ –Ω–∞—á–∞–ª–∏ —ç—Å–∫–∞–ª–∞—Ü–∏—é –ø—Ä–æ–º–æ.
        
        **–≠—Å–∫–∞–ª–∞—Ü–∏—è**:
        ‚Ä¢ –ú–µ—Å—è—Ü 1: –ò–≥—Ä–æ–∫ A - 50% —Å–∫–∏–¥–∫–∞, –ò–≥—Ä–æ–∫ B - matching
        ‚Ä¢ –ú–µ—Å—è—Ü 2: A - 60% + cashback, B - 65% —Å–∫–∏–¥–∫–∞
        ‚Ä¢ –ú–µ—Å—è—Ü 3: A - 70% + free rides, B - 75% + referral bonuses
        ‚Ä¢ –ú–µ—Å—è—Ü 4-6: –í–∑–∞–∏–º–Ω–æ–µ –∏—Å—Ç–æ—â–µ–Ω–∏–µ
        
        **–ò—Ç–æ–≥ —á–µ—Ä–µ–∑ 6 –º–µ—Å—è—Ü–µ–≤**:
        ‚Ä¢ –û–±–∞ –∏–≥—Ä–æ–∫–∞: Unit economics —Ä–∞–∑—Ä—É—à–µ–Ω—ã
        ‚Ä¢ LTV/CAC —É–ø–∞–ª–æ —Å 3.2:1 –¥–æ 0.8:1
        ‚Ä¢ –ü—Ä–∏–≤–ª–µ—á–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: 90% churn –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–º–æ
        ‚Ä¢ –ò—Ç–æ–≥: Merge –∏–ª–∏ exit –æ–¥–Ω–æ–≥–æ –∏–∑ –∏–≥—Ä–æ–∫–æ–≤
        
        **Lessons**:
        ‚Ä¢ Set clear boundaries –¥–ª—è –ø—Ä–æ–º–æ-–≤–æ–π–Ω
        ‚Ä¢ Focus –Ω–∞ value proposition, –Ω–µ —Ç–æ–ª—å–∫–æ —Ü–µ–Ω—É
        ‚Ä¢ Sustainable competitive advantages –≤–∞–∂–Ω–µ–µ –ø—Ä–æ–º–æ
        """)

def international_cases():
    """–ö–µ–π—Å—ã –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–π —ç–∫—Å–ø–∞–Ω—Å–∏–∏"""
    st.subheader("üåç –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è —ç–∫—Å–ø–∞–Ω—Å–∏—è: —É—Å–ø–µ—Ö–∏ –∏ –ø—Ä–æ–≤–∞–ª—ã")
    
    with st.expander("‚úÖ –ö–µ–π—Å 1: –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è —ç–∫—Å–ø–∞–Ω—Å–∏—è"):
        st.markdown("""
        **–ú–∞—Ä—à—Ä—É—Ç**: –†–æ—Å—Å–∏—è ‚Üí –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω ‚Üí –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω
        
        **Success factors**:
        ‚Ä¢ Cultural proximity
        ‚Ä¢ Similar regulatory environment  
        ‚Ä¢ Existing Russian-speaking user base
        ‚Ä¢ Local partnerships –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–µ
        
        **–ê–¥–∞–ø—Ç–∞—Ü–∏–∏**:
        ‚Ä¢ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω: –§–æ–∫—É—Å –Ω–∞ –ê–ª–º–∞—Ç—ã –∏ –ù—É—Ä-–°—É–ª—Ç–∞–Ω
        ‚Ä¢ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω: Cash payments integration
        ‚Ä¢ Local pricing (40-60% –æ—Ç —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ü–µ–Ω)
        ‚Ä¢ Multilingual support
        
        **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —á–µ—Ä–µ–∑ 2 –≥–æ–¥–∞**:
        ‚Ä¢ 3 —Å—Ç—Ä–∞–Ω—ã, 8 –≥–æ—Ä–æ–¥–æ–≤
        ‚Ä¢ Combined revenue: 15% –æ—Ç total
        ‚Ä¢ Payback period: 14 –º–µ—Å—è—Ü–µ–≤ average
        ‚Ä¢ Regional brand recognition: 45%
        """)
    
    with st.expander("‚ùå –ö–µ–π—Å 2: –ù–µ—É–¥–∞—á–Ω–∞—è —ç–∫—Å–ø–∞–Ω—Å–∏—è –≤ –ï–≤—Ä–æ–ø—É"):
        st.markdown("""
        **Attempt**: –†–æ—Å—Å–∏—è ‚Üí –ü–æ–ª—å—à–∞
        
        **Challenges encountered**:
        ‚Ä¢ Strict EU regulations (GDPR, licensing)
        ‚Ä¢ Established competition (Uber, Bolt)
        ‚Ä¢ Different user behavior patterns
        ‚Ä¢ Higher operational costs
        ‚Ä¢ Currency volatility
        
        **Timeline –ø—Ä–æ–≤–∞–ª–∞**:
        ‚Ä¢ –ú–µ—Å—è—Ü 1-6: –†–µ–≥—É–ª—è—Ç–æ—Ä–Ω—ã–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
        ‚Ä¢ –ú–µ—Å—è—Ü 7-12: –ú–µ–¥–ª–µ–Ω–Ω—ã–π user acquisition  
        ‚Ä¢ –ú–µ—Å—è—Ü 13-18: CAC –≤ 3x –≤—ã—à–µ –ø—Ä–æ–≥–Ω–æ–∑–∞
        ‚Ä¢ –ú–µ—Å—è—Ü 19-24: Exit decision
        
        **Total losses**: $8M
        
        **Lessons learned**:
        ‚Ä¢ Regulatory due diligence –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–µ–Ω
        ‚Ä¢ Market timing matters
        ‚Ä¢ Local adaptation vs global brand balance
        ‚Ä¢ Have clear exit criteria
        """)

def pivot_cases():
    """–ö–µ–π—Å—ã pivot –∏ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    st.subheader("üîÑ Pivot —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è")
    
    with st.expander("üçï –ö–µ–π—Å 1: Pivot –≤ food delivery –≤–æ –≤—Ä–µ–º—è –ø–∞–Ω–¥–µ–º–∏–∏"):
        st.markdown("""
        **Trigger**: COVID-19 lockdown, –ø–∞–¥–µ–Ω–∏–µ ride-hailing –Ω–∞ 80%
        
        **Pivot timeline**:
        ‚Ä¢ –ù–µ–¥–µ–ª—è 1-2: Emergency planning
        ‚Ä¢ –ù–µ–¥–µ–ª—è 3-4: Partnership —Å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º–∏
        ‚Ä¢ –ù–µ–¥–µ–ª—è 5-8: Platform adaptation
        ‚Ä¢ –ù–µ–¥–µ–ª—è 9-12: Full food delivery launch
        
        **Resource reallocation**:
        ‚Ä¢ 70% drivers switched to delivery
        ‚Ä¢ Tech team focused on delivery features
        ‚Ä¢ Customer base partially migrated
        
        **Results —á–µ—Ä–µ–∑ 6 –º–µ—Å—è—Ü–µ–≤**:
        ‚Ä¢ Food delivery: 40% –æ—Ç pre-COVID ride revenue  
        ‚Ä¢ Combined business sustained 65% revenue
        ‚Ä¢ Retained 80% driver network
        ‚Ä¢ Post-COVID: Dual service offering
        
        **Long-term impact**:
        ‚Ä¢ Diversified revenue streams
        ‚Ä¢ Higher user engagement (multiple services)
        ‚Ä¢ Improved LTV through cross-selling
        """)

def failure_cases():
    """–ö–µ–π—Å—ã –Ω–µ—É–¥–∞—á"""
    st.subheader("üíî –ù–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–ø—É—Å–∫–∏: lessons learned")
    
    with st.expander("üí∏ –ö–µ–π—Å 1: Overpriced premium positioning"):
        st.markdown("""
        **Strategy**: –ó–∞–ø—É—Å–∫ premium-only —Å–µ—Ä–≤–∏—Å–∞ –≤ —Å—Ä–µ–¥–Ω–µ–º –≥–æ—Ä–æ–¥–µ
        
        **Positioning**:
        ‚Ä¢ –¢–æ–ª—å–∫–æ luxury cars
        ‚Ä¢ Premium pricing (2x local taxi)
        ‚Ä¢ "Exclusive experience" messaging
        
        **–†–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ 6 –º–µ—Å—è—Ü–µ–≤**:
        ‚Ä¢ User base: 2,000 (–ø—Ä–æ–≥–Ω–æ–∑ 25,000)
        ‚Ä¢ Monthly rides: 3,500 (–ø—Ä–æ–≥–Ω–æ–∑ 45,000)  
        ‚Ä¢ CAC: $85 (–ø—Ä–æ–≥–Ω–æ–∑ $25)
        ‚Ä¢ LTV/CAC: 0.8:1
        
        **Root causes**:
        ‚Ä¢ Market research –ø–æ–∫–∞–∑–∞–ª –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–∏—Ç—å, –Ω–æ behavior –æ—Ç–ª–∏—á–∞–ª—Å—è
        ‚Ä¢ Insufficient volume –¥–ª—è operational efficiency
        ‚Ä¢ Word-of-mouth negative (too expensive)
        
        **Pivot attempt**: –î–æ–±–∞–≤–∏–ª–∏ economy tier, –Ω–æ brand damage —É–∂–µ —Å–¥–µ–ª–∞–Ω
        **Final outcome**: Exit —á–µ—Ä–µ–∑ 10 –º–µ—Å—è—Ü–µ–≤
        """)

def niche_strategy_cases():
    """–ù–∏—à–µ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    st.subheader("üéØ –ù–∏—à–µ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: focus –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç—ã")
    
    with st.expander("üöó –ö–µ–π—Å 1: Women-only ride service"):
        st.markdown("""
        **Niche**: –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–ª—è –∂–µ–Ω—â–∏–Ω
        
        **Service features**:
        ‚Ä¢ –¢–æ–ª—å–∫–æ –≤–æ–¥–∏—Ç–µ–ª–∏-–∂–µ–Ω—â–∏–Ω—ã
        ‚Ä¢ Panic button —Å –ø—Ä—è–º–æ–π —Å–≤—è–∑—å—é —Å —Å–ª—É–∂–±–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        ‚Ä¢ Family sharing (tracking –¥–ª—è —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤)
        ‚Ä¢ Verified driver profiles
        
        **Market response**:
        ‚Ä¢ Target audience: 40% female population
        ‚Ä¢ Adoption rate: 25% —Å—Ä–µ–¥–∏ –∂–µ–Ω—â–∏–Ω 18-45
        ‚Ä¢ Premium pricing: +30% accepted
        ‚Ä¢ Word-of-mouth: 4.2x higher than regular service
        
        **Unit Economics**:
        ‚Ä¢ CAC: $18 (lower due to word-of-mouth)
        ‚Ä¢ LTV: $95 (higher retention due to safety value)
        ‚Ä¢ LTV/CAC: 5.3:1
        
        **Challenges**:
        ‚Ä¢ Limited driver pool
        ‚Ä¢ Higher operational complexity
        ‚Ä¢ Seasonal fluctuations (safety concerns vary)
        """)

if __name__ == "__main__":
    main()

import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
from datetime import datetime, timedelta
import random
from typing import Dict, List, Tuple, Optional

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
st.set_page_config(
    page_title="üí∞ LTV vs CAC –°–∏–º—É–ª—è—Ç–æ—Ä",
    page_icon="üí∞",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –°—Ç–∏–ª–∏
st.markdown("""
<style>
    .metric-card {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin: 0.5rem 0;
    }
    
    .warning-card {
        background: #ff6b6b;
        padding: 1rem;
        border-radius: 10px;
        color: white;
        text-align: center;
    }
    
    .success-card {
        background: #51cf66;
        padding: 1rem;
        border-radius: 10px;
        color: white;
        text-align: center;
    }
</style>
""", unsafe_allow_html=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
if 'scenario_results' not in st.session_state:
    st.session_state.scenario_results = []

if 'cohort_data' not in st.session_state:
    st.session_state.cohort_data = {}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    st.title("üí∞ –°–∏–º—É–ª—è—Ç–æ—Ä LTV vs CAC")
    st.markdown("**–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ LTV/CAC –º–µ—Ç—Ä–∏–∫**")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    with st.sidebar:
        st.header("üéØ –†–µ–∂–∏–º—ã –∞–Ω–∞–ª–∏–∑–∞")
        mode = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
            [
                "üìä –ë–∞–∑–æ–≤—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä",
                "üîÑ –ö–æ–≥–æ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑", 
                "üìà –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞–Ω–∞–ª–∞–º",
                "üé™ –°—Ü–µ–Ω–∞—Ä–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
                "üïµÔ∏è –î–µ—Ç–µ–∫—Ç–æ—Ä –æ—à–∏–±–æ–∫",
                "üí° –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –±—é–¥–∂–µ—Ç–∞",
                "üìö –û–±—É—á–∞—é—â–∏–µ –∫–µ–π—Å—ã"
            ]
        )
        
        st.markdown("---")
        show_help_sidebar()
    
    # –†–æ—É—Ç–∏–Ω–≥ –ø–æ —Ä–µ–∂–∏–º–∞–º
    if mode == "üìä –ë–∞–∑–æ–≤—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä":
        basic_calculator_mode()
    elif mode == "üîÑ –ö–æ–≥–æ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑":
        cohort_analysis_mode()
    elif mode == "üìà –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞–Ω–∞–ª–∞–º":
        channel_analysis_mode()
    elif mode == "üé™ –°—Ü–µ–Ω–∞—Ä–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ":
        scenario_planning_mode()
    elif mode == "üïµÔ∏è –î–µ—Ç–µ–∫—Ç–æ—Ä –æ—à–∏–±–æ–∫":
        error_detector_mode()
    elif mode == "üí° –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –±—é–¥–∂–µ—Ç–∞":
        budget_optimizer_mode()
    elif mode == "üìö –û–±—É—á–∞—é—â–∏–µ –∫–µ–π—Å—ã":
        educational_cases_mode()

def show_help_sidebar():
    """–°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
    with st.expander("üìñ –ì–ª–æ—Å—Å–∞—Ä–∏–π —Ç–µ—Ä–º–∏–Ω–æ–≤"):
        st.markdown("""
        **LTV** - Lifetime Value (–ø–æ–∂–∏–∑–Ω–µ–Ω–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞)
        **CAC** - Customer Acquisition Cost (—Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞)
        **ARPPU** - Average Revenue Per Paying User (—Å—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ —Å –ø–ª–∞—Ç—è—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        **–û—Ç—Ç–æ–∫** - –ü—Ä–æ—Ü–µ–Ω—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤, –ø—Ä–µ–∫—Ä–∞—â–∞—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —É—Å–ª—É–≥–æ–π
        **–£–¥–µ—Ä–∂–∞–Ω–∏–µ** - –ü—Ä–æ—Ü–µ–Ω—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤, –ø—Ä–æ–¥–æ–ª–∂–∞—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —É—Å–ª—É–≥–æ–π
        **–ü–µ—Ä–∏–æ–¥ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏** - –í—Ä–µ–º—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –≤ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ
        **–ö–æ–≥–æ—Ä—Ç–∞** - –ì—Ä—É–ø–ø–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤, –ø—Ä–∏–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        **–í–∞–ª–æ–≤–∞—è –º–∞—Ä–∂–∞** - –î–æ—Ö–æ–¥ –º–∏–Ω—É—Å –ø—Ä—è–º—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
        """)
    
    with st.expander("üéØ –ë–µ–Ω—á–º–∞—Ä–∫–∏ –ø–æ –∏–Ω–¥—É—Å—Ç—Ä–∏—è–º"):
        st.markdown("""
        **SaaS**: LTV/CAC > 3:1 (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ 5:1+)
        **–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –∫–æ–º–º–µ—Ä—Ü–∏—è**: > 2:1 (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ 3:1+)
        **–ú–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è**: > 1.5:1
        **B2B —É—Å–ª—É–≥–∏**: > 5:1
        **–ü–æ–¥–ø–∏—Å–æ—á–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã**: > 3:1
        """)

def basic_calculator_mode():
    """–ë–∞–∑–æ–≤—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä LTV/CAC"""
    st.header("üìä –ë–∞–∑–æ–≤—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä LTV/CAC")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã LTV")
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ LTV
        arpu = st.slider("ARPPU (—Ä—É–±/–º–µ—Å—è—Ü)", 500, 10000, 2000, 100)
        gross_margin = st.slider("–í–∞–ª–æ–≤–∞—è –º–∞—Ä–∂–∞ (%)", 10, 90, 60, 5)
        monthly_churn = st.slider("–ú–µ—Å—è—á–Ω—ã–π –æ—Ç—Ç–æ–∫ (%)", 1.0, 20.0, 5.0, 0.5)
        discount_rate = st.slider("–°—Ç–∞–≤–∫–∞ –¥–∏—Å–∫–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (%)", 0.0, 20.0, 8.0, 1.0)
        
        # –†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤–æ–≥–æ LTV
        monthly_profit = arpu * (gross_margin / 100)
        ltv_simple = monthly_profit / (monthly_churn / 100)
        
        # LTV —Å –¥–∏—Å–∫–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        monthly_discount = (discount_rate / 100) / 12
        ltv_discounted = monthly_profit / (monthly_churn / 100 + monthly_discount)
        
        st.markdown(f"""
        <div class="metric-card">
            <h3>–ë–∞–∑–æ–≤—ã–π LTV: {ltv_simple:,.0f} —Ä—É–±</h3>
            <h3>LTV —Å –¥–∏—Å–∫–æ–Ω—Ç–æ–º: {ltv_discounted:,.0f} —Ä—É–±</h3>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.subheader("üí∞ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã CAC")
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã CAC
        marketing_spend = st.number_input("–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã (—Ä—É–±)", 100000, 10000000, 1000000, 50000)
        new_customers = st.number_input("–ù–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤", 100, 5000, 500, 50)
        sales_costs = st.slider("–î–æ–ø. –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ (%)", 0, 50, 20, 5)
        
        # –†–∞—Å—á–µ—Ç CAC
        cac_basic = marketing_spend / new_customers
        cac_fully_loaded = cac_basic * (1 + sales_costs / 100)
        
        st.markdown(f"""
        <div class="metric-card">
            <h3>–ë–∞–∑–æ–≤—ã–π CAC: {cac_basic:,.0f} —Ä—É–±</h3>
            <h3>–ü–æ–ª–Ω—ã–π CAC: {cac_fully_loaded:,.0f} —Ä—É–±</h3>
        </div>
        """, unsafe_allow_html=True)
    
    # –ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π
    st.subheader("üìà –ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π")
    
    col1, col2, col3 = st.columns(3)
    
    ratio_simple = ltv_simple / cac_fully_loaded
    ratio_discounted = ltv_discounted / cac_fully_loaded
    payback_months = cac_fully_loaded / monthly_profit
    
    with col1:
        color = "success" if ratio_simple >= 3 else "warning" if ratio_simple >= 2 else "error"
        st.markdown(f"""
        <div class="{color}-card">
            <h4>LTV/CAC (–ø—Ä–æ—Å—Ç–æ–π)</h4>
            <h2>{ratio_simple:.1f}:1</h2>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        color = "success" if ratio_discounted >= 3 else "warning" if ratio_discounted >= 2 else "error"
        st.markdown(f"""
        <div class="{color}-card">
            <h4>LTV/CAC (–¥–∏—Å–∫–æ–Ω—Ç)</h4>
            <h2>{ratio_discounted:.1f}:1</h2>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        color = "success" if payback_months <= 12 else "warning" if payback_months <= 18 else "error"
        st.markdown(f"""
        <div class="{color}-card">
            <h4>–ü–µ—Ä–∏–æ–¥ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏</h4>
            <h2>{payback_months:.1f} –º–µ—Å</h2>
        </div>
        """, unsafe_allow_html=True)
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    create_sensitivity_chart(arpu, gross_margin, monthly_churn, cac_fully_loaded)
    
    # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    show_interpretation(ratio_discounted, payback_months)

def create_sensitivity_chart(arpu: float, gross_margin: float, churn: float, cac: float):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    st.subheader("üéØ –ê–Ω–∞–ª–∏–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    
    # –í–∞—Ä–∏–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    churn_range = np.linspace(churn * 0.5, churn * 2, 20)
    arpu_range = np.linspace(arpu * 0.7, arpu * 1.5, 20)
    
    # –†–∞—Å—á–µ—Ç LTV –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    ltv_churn = [(arpu * gross_margin / 100) / (c / 100) for c in churn_range]
    ltv_arpu = [(a * gross_margin / 100) / (churn / 100) for a in arpu_range]
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
    fig = make_subplots(
        rows=1, cols=2,
        subplot_titles=('–í–ª–∏—è–Ω–∏–µ –æ—Ç—Ç–æ–∫–∞ –Ω–∞ LTV', '–í–ª–∏—è–Ω–∏–µ ARPPU –Ω–∞ LTV')
    )
    
    # –ì—Ä–∞—Ñ–∏–∫ –≤–ª–∏—è–Ω–∏—è –æ—Ç—Ç–æ–∫–∞
    fig.add_trace(
        go.Scatter(x=churn_range, y=ltv_churn, mode='lines+markers', 
                  name='LTV –æ—Ç –æ—Ç—Ç–æ–∫–∞', line=dict(color='red', width=3)),
        row=1, col=1
    )
    
    # –ì—Ä–∞—Ñ–∏–∫ –≤–ª–∏—è–Ω–∏—è ARPPU
    fig.add_trace(
        go.Scatter(x=arpu_range, y=ltv_arpu, mode='lines+markers',
                  name='LTV –æ—Ç ARPPU', line=dict(color='blue', width=3)),
        row=1, col=2
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏—é CAC –¥–ª—è —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞
    fig.add_hline(y=cac, line_dash="dash", line_color="orange", 
                  annotation_text=f"CAC = {cac:,.0f} —Ä—É–±")
    
    fig.update_layout(height=400, showlegend=False)
    fig.update_xaxes(title_text="–ú–µ—Å—è—á–Ω—ã–π –æ—Ç—Ç–æ–∫ (%)", row=1, col=1)
    fig.update_xaxes(title_text="ARPPU (—Ä—É–±)", row=1, col=2)
    fig.update_yaxes(title_text="LTV (—Ä—É–±)")
    
    st.plotly_chart(fig, use_container_width=True)

def show_interpretation(ratio: float, payback: float):
    """–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    st.subheader("üß† –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    if ratio >= 5:
        st.success("üéâ **–û—Ç–ª–∏—á–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏!** –£ –≤–∞—Å –∑–¥–æ—Ä–æ–≤—ã–µ LTV/CAC –º–µ—Ç—Ä–∏–∫–∏. –ú–æ–∂–Ω–æ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ.")
    elif ratio >= 3:
        st.info("üëç **–•–æ—Ä–æ—à–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏.** –ë–∏–∑–Ω–µ—Å —É—Å—Ç–æ–π—á–∏–≤, –µ—Å—Ç—å –º–µ—Å—Ç–æ –¥–ª—è —Ä–æ—Å—Ç–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–≥–æ –±—é–¥–∂–µ—Ç–∞.")
    elif ratio >= 2:
        st.warning("‚ö†Ô∏è **–û—Å—Ç–æ—Ä–æ–∂–Ω–æ!** –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –Ω–∞ –≥—Ä–∞–Ω–∏. –ù—É–∂–Ω–æ –ª–∏–±–æ —Å–Ω–∏–∂–∞—Ç—å CAC, –ª–∏–±–æ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å —É–¥–µ—Ä–∂–∞–Ω–∏–µ.")
    else:
        st.error("üö® **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏!** –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å –Ω–µ—É—Å—Ç–æ–π—á–∏–≤–∞. –°—Ä–æ—á–Ω–æ –ø–µ—Ä–µ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é.")
    
    if payback <= 6:
        st.success("üí∞ **–ë—ã—Å—Ç—Ä–∞—è –æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å** - –æ—Ç–ª–∏—á–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤.")
    elif payback <= 12:
        st.info("üìà **–ü—Ä–∏–µ–º–ª–µ–º–∞—è –æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å** –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –±–∏–∑–Ω–µ—Å–æ–≤.")
    else:
        st.warning("‚è≥ **–î–æ–ª–≥–∞—è –æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å** –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–≤–∏–∂–µ–Ω–∏–µ–º –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤.")

def cohort_analysis_mode():
    """–†–µ–∂–∏–º –∫–æ–≥–æ—Ä—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    st.header("üîÑ –ö–æ–≥–æ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ LTV")
    
    st.markdown("""
    **–ó–µ—Ä–Ω–∏—Å—Ç–æ—Å—Ç—å –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ!** –†–∞–∑–Ω—ã–µ –∫–æ–≥–æ—Ä—Ç—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–º–µ—é—Ç –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ —Ä–∞–∑–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ.
    –°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ –±–æ–ª—å–Ω–∏—Ü–µ –º–æ–∂–µ—Ç —Å–∫—Ä—ã–≤–∞—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã.
    """)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–≥–æ—Ä—Ç
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–≥–æ—Ä—Ç")
        
        num_cohorts = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–≥–æ—Ä—Ç", 6, 24, 12)
        base_arpu = st.slider("–ë–∞–∑–æ–≤—ã–π ARPPU", 1000, 5000, 2000, 100)
        seasonality = st.checkbox("–£—á–µ—Å—Ç—å —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å", True)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–≥–æ—Ä—Ç
        cohort_data = generate_cohort_data(num_cohorts, base_arpu, seasonality)
        
    with col2:
        st.subheader("üìä –°–≤–æ–¥–∫–∞ –ø–æ –∫–æ–≥–æ—Ä—Ç–∞–º")
        
        avg_ltv = np.mean([c['ltv_final'] for c in cohort_data])
        min_ltv = min([c['ltv_final'] for c in cohort_data])
        max_ltv = max([c['ltv_final'] for c in cohort_data])
        
        st.metric("–°—Ä–µ–¥–Ω–∏–π LTV", f"{avg_ltv:,.0f} —Ä—É–±")
        st.metric("–î–∏–∞–ø–∞–∑–æ–Ω LTV", f"{min_ltv:,.0f} - {max_ltv:,.0f} —Ä—É–±")
        st.metric("–†–∞–∑–±—Ä–æ—Å", f"{(max_ltv/min_ltv):.1f}x")
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —ç–≤–æ–ª—é—Ü–∏–∏ –∫–æ–≥–æ—Ä—Ç
    create_cohort_evolution_chart(cohort_data)
    
    # –¢–∞–±–ª–∏—Ü–∞ –∫–æ–≥–æ—Ä—Ç
    create_cohort_table(cohort_data)
    
    # –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è
    analyze_acquisition_sources(cohort_data)

def generate_cohort_data(num_cohorts: int, base_arpu: int, seasonality: bool) -> List[Dict]:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–≥–æ—Ä—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    cohorts = []
    
    for i in range(num_cohorts):
        month = i + 1
        
        # –°–µ–∑–æ–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        seasonal_multiplier = 1.0
        if seasonality:
            # Q4 - –≤—ã—Å–æ–∫–∏–π –°–î–ü–û, –Ω–æ –≤—ã—à–µ –æ—Ç—Ç–æ–∫ –ø–æ—Å–ª–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤
            if month in [10, 11, 12]:
                seasonal_multiplier = 1.3
            elif month in [1, 2]:
                seasonal_multiplier = 0.8
        
        # –°–ª—É—á–∞–π–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏
        random_factor = np.random.uniform(0.8, 1.2)
        
        arpu = base_arpu * seasonal_multiplier * random_factor
        initial_churn = np.random.uniform(3, 8)  # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –æ—Ç—Ç–æ–∫
        mature_churn = initial_churn * 0.7  # –û—Ç—Ç–æ–∫ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è
        
        # –ò—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –≤–ª–∏—è–µ—Ç –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ
        source = np.random.choice(['Organic', 'Paid Search', 'Social', 'Referral'], 
                                p=[0.3, 0.4, 0.2, 0.1])
        
        source_multipliers = {
            'Organic': {'arpu': 1.2, 'churn': 0.8},
            'Paid Search': {'arpu': 1.0, 'churn': 1.0},
            'Social': {'arpu': 0.8, 'churn': 1.3},
            'Referral': {'arpu': 1.3, 'churn': 0.6}
        }
        
        arpu *= source_multipliers[source]['arpu']
        mature_churn *= source_multipliers[source]['churn']
        
        # –†–∞—Å—á–µ—Ç –ü–¶–ö —ç–≤–æ–ª—é—Ü–∏–∏
        ltv_evolution = calculate_ltv_evolution(arpu, initial_churn, mature_churn)
        
        cohorts.append({
            'month': month,
            'source': source,
            'arpu': arpu,
            'initial_churn': initial_churn,
            'mature_churn': mature_churn,
            'ltv_evolution': ltv_evolution,
            'ltv_final': ltv_evolution[-1],
            'customers': np.random.randint(200, 1000)
        })
    
    return cohorts

def calculate_ltv_evolution(arpu: float, initial_churn: float, mature_churn: float) -> List[float]:
    """–†–∞—Å—á–µ—Ç —ç–≤–æ–ª—é—Ü–∏–∏ LTV –≤–æ –≤—Ä–µ–º–µ–Ω–∏"""
    months = 24
    ltv_values = []
    
    for month in range(1, months + 1):
        # –û—Ç—Ç–æ–∫ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º (–∫–ª–∏–µ–Ω—Ç—ã —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –±–æ–ª–µ–µ –ª–æ—è–ª—å–Ω—ã–º–∏)
        current_churn = initial_churn * np.exp(-month/6) + mature_churn * (1 - np.exp(-month/6))
        
        # LTV —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ –æ—Ç—Ç–æ–∫–∞
        ltv = (arpu * 0.6) / (current_churn / 100)  # 60% –≤–∞–ª–æ–≤–∞—è –º–∞—Ä–∂–∞
        ltv_values.append(ltv)
    
    return ltv_values

def create_cohort_evolution_chart(cohort_data: List[Dict]):
    """–ì—Ä–∞—Ñ–∏–∫ —ç–≤–æ–ª—é—Ü–∏–∏ LTV –∫–æ–≥–æ—Ä—Ç"""
    st.subheader("üìà –≠–≤–æ–ª—é—Ü–∏—è LTV –∫–æ–≥–æ—Ä—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–∏")
    
    fig = go.Figure()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–≥–æ—Ä—Ç—ã
    for cohort in cohort_data[:6]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 6 –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        months = list(range(1, len(cohort['ltv_evolution']) + 1))
        fig.add_trace(go.Scatter(
            x=months,
            y=cohort['ltv_evolution'],
            mode='lines+markers',
            name=f"–ú–µ—Å—è—Ü {cohort['month']} ({cohort['source']})",
            line=dict(width=2)
        ))
    
    fig.update_layout(
        title="LTV –Ω–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞! –ó—Ä–µ–ª—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –∏–º–µ—é—Ç –¥—Ä—É–≥–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ",
        xaxis_title="–í–æ–∑—Ä–∞—Å—Ç –∫–æ–≥–æ—Ä—Ç—ã (–º–µ—Å—è—Ü—ã)",
        yaxis_title="LTV (—Ä—É–±)",
        height=500
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    st.info("""
    üí° **–ö–ª—é—á–µ–≤–æ–π –∏–Ω—Å–∞–π—Ç**: LTV —Ä–∞—Å—Ç–µ—Ç —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º! –ö–ª–∏–µ–Ω—Ç—ã –ø–µ—Ä–≤–æ–≥–æ –º–µ—Å—è—Ü–∞ –º–æ–≥—É—Ç –∏–º–µ—Ç—å LTV –≤ 2-3 —Ä–∞–∑–∞ –Ω–∏–∂–µ 
    —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è. –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–Ω–Ω–µ–≥–æ LTV = –±–æ–ª—å—à–∞—è –æ—à–∏–±–∫–∞.
    """)

def create_cohort_table(cohort_data: List[Dict]):
    """–¢–∞–±–ª–∏—Ü–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∫–æ–≥–æ—Ä—Ç"""
    st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∫–æ–≥–æ—Ä—Ç")
    
    df = pd.DataFrame([
        {
            '–ö–æ–≥–æ—Ä—Ç–∞': f"–ú–µ—Å—è—Ü {c['month']}",
            '–ò—Å—Ç–æ—á–Ω–∏–∫': c['source'],
            'ARPPU': f"{c['arpu']:,.0f}",
            '–û—Ç—Ç–æ–∫ (–Ω–∞—á–∞–ª—å–Ω—ã–π)': f"{c['initial_churn']:.1f}%",
            '–û—Ç—Ç–æ–∫ (–∑—Ä–µ–ª—ã–π)': f"{c['mature_churn']:.1f}%",
            'LTV (–º–µ—Å—è—Ü 1)': f"{c['ltv_evolution'][0]:,.0f}",
            'LTV (—Ñ–∏–Ω–∞–ª—å–Ω—ã–π)': f"{c['ltv_final']:,.0f}",
            '–ú–Ω–æ–∂–∏—Ç–µ–ª—å —Ä–æ—Å—Ç–∞': f"{c['ltv_final']/c['ltv_evolution'][0]:.1f}x",
            '–ö–ª–∏–µ–Ω—Ç–æ–≤': f"{c['customers']:,}"
        }
        for c in cohort_data
    ])
    
    st.dataframe(df, use_container_width=True)

def analyze_acquisition_sources(cohort_data: List[Dict]):
    """–ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è"""
    st.subheader("üéØ –ê–Ω–∞–ª–∏–∑ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è")
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
    sources_summary = {}
    for cohort in cohort_data:
        source = cohort['source']
        if source not in sources_summary:
            sources_summary[source] = {'ltv': [], 'arpu': [], 'churn': []}
        
        sources_summary[source]['ltv'].append(cohort['ltv_final'])
        sources_summary[source]['arpu'].append(cohort['arpu'])
        sources_summary[source]['churn'].append(cohort['mature_churn'])
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
    fig = make_subplots(
        rows=2, cols=2,
        subplot_titles=('–°—Ä–µ–¥–Ω–∏–π LTV –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º', 'ARPPU –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º',
                       '–û—Ç—Ç–æ–∫ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º', 'LTV/CAC –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª')
    )
    
    sources = list(sources_summary.keys())
    colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4']
    
    # –¢–∏–ø–∏—á–Ω—ã–µ CAC –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
    typical_cac = {'Organic': 500, 'Paid Search': 2000, 'Social': 1200, 'Referral': 300}
    
    for i, source in enumerate(sources):
        avg_ltv = np.mean(sources_summary[source]['ltv'])
        avg_arpu = np.mean(sources_summary[source]['arpu'])
        avg_churn = np.mean(sources_summary[source]['churn'])
        cac = typical_cac.get(source, 1500)
        ltv_cac_ratio = avg_ltv / cac
        
        # LTV
        fig.add_trace(go.Bar(x=[source], y=[avg_ltv], marker_color=colors[i], 
                            showlegend=False), row=1, col=1)
        
        # ARPPU
        fig.add_trace(go.Bar(x=[source], y=[avg_arpu], marker_color=colors[i],
                            showlegend=False), row=1, col=2)
        
        # –û—Ç—Ç–æ–∫
        fig.add_trace(go.Bar(x=[source], y=[avg_churn], marker_color=colors[i],
                            showlegend=False), row=2, col=1)
        
        # LTV/CAC
        fig.add_trace(go.Bar(x=[source], y=[ltv_cac_ratio], marker_color=colors[i],
                            showlegend=False), row=2, col=2)
    
    fig.update_layout(height=600)
    fig.update_yaxes(title_text="LTV (—Ä—É–±)", row=1, col=1)
    fig.update_yaxes(title_text="ARPPU (—Ä—É–±)", row=1, col=2)
    fig.update_yaxes(title_text="–û—Ç—Ç–æ–∫ (%)", row=2, col=1)
    fig.update_yaxes(title_text="LTV/CAC", row=2, col=2)
    
    st.plotly_chart(fig, use_container_width=True)
    
    # –í—ã–≤–æ–¥—ã
    best_source = max(sources, key=lambda s: np.mean(sources_summary[s]['ltv']) / typical_cac.get(s, 1500))
    st.success(f"üèÜ **–õ—É—á—à–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ LTV/CAC**: {best_source}")

def channel_analysis_mode():
    """–ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞–Ω–∞–ª–∞–º –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è"""
    st.header("üìà –ê–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–æ–≤ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è")
    
    st.markdown("""
    **–°–º–µ—à–∞–Ω–Ω—ã–π CAC vs CAC –ø–æ –∫–∞–Ω–∞–ª–∞–º** - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞! –°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ –±–æ–ª—å–Ω–∏—Ü–µ 
    —Å–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–∏–±—ã–ª—å–Ω—ã–µ –∏ —É–±—ã—Ç–æ—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã.
    """)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
    channels_data = setup_channels_analysis()
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤
    create_channel_comparison_chart(channels_data)
    
    # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–Ω–∞–º–∏–∫–∏
    create_channel_dynamics_chart(channels_data)
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    show_channel_recommendations(channels_data)

def setup_channels_analysis() -> Dict:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–∞–ª–æ–≤"""
    st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–æ–≤")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã**")
        organic_cac = st.slider("–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π CAC", 100, 1000, 300)
        organic_ltv = st.slider("–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π LTV", 5000, 15000, 10000)
        
        seo_cac = st.slider("SEO CAC", 200, 1500, 600)
        seo_ltv = st.slider("SEO LTV", 4000, 12000, 8000)
        
    with col2:
        st.markdown("**–ü–ª–∞—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã**")
        search_cac = st.slider("–ü–æ–∏—Å–∫–æ–≤–∞—è —Ä–µ–∫–ª–∞–º–∞ CAC", 1000, 4000, 2000)
        search_ltv = st.slider("–ü–æ–∏—Å–∫–æ–≤–∞—è —Ä–µ–∫–ª–∞–º–∞ LTV", 3000, 10000, 6000)
        
        social_cac = st.slider("–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ CAC", 800, 3000, 1500)
        social_ltv = st.slider("–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ LTV", 2000, 8000, 4000)
        
        display_cac = st.slider("–ú–µ–¥–∏–π–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞ CAC", 1500, 5000, 3000)
        display_ltv = st.slider("–ú–µ–¥–∏–π–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞ LTV", 2500, 7000, 4500)
    
    return {
        '–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π —Ç—Ä–∞—Ñ–∏–∫': {'cac': organic_cac, 'ltv': organic_ltv, 'volume': 1000},
        'SEO': {'cac': seo_cac, 'ltv': seo_ltv, 'volume': 800},
        '–ü–æ–∏—Å–∫–æ–≤–∞—è —Ä–µ–∫–ª–∞–º–∞': {'cac': search_cac, 'ltv': search_ltv, 'volume': 1500},
        '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏': {'cac': social_cac, 'ltv': social_ltv, 'volume': 1200},
        '–ú–µ–¥–∏–π–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞': {'cac': display_cac, 'ltv': display_ltv, 'volume': 600}
    }

def create_channel_comparison_chart(channels_data: Dict):
    """–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –∫–∞–Ω–∞–ª–æ–≤"""
    st.subheader("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ LTV/CAC")
    
    fig = go.Figure()
    
    channels = list(channels_data.keys())
    ltv_values = [channels_data[ch]['ltv'] for ch in channels]
    cac_values = [channels_data[ch]['cac'] for ch in channels]
    ratios = [ltv/cac for ltv, cac in zip(ltv_values, cac_values)]
    volumes = [channels_data[ch]['volume'] for ch in channels]
    
    # Bubble chart
    fig.add_trace(go.Scatter(
        x=cac_values,
        y=ltv_values,
        mode='markers+text',
        text=channels,
        textposition="middle center",
        marker=dict(
            size=[v/20 for v in volumes],  # –†–∞–∑–º–µ—Ä –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª–µ–Ω –æ–±—ä–µ–º—É
            color=ratios,
            colorscale='RdYlGn',
            showscale=True,
            colorbar=dict(title="LTV/CAC"),
            line=dict(width=2, color='black')
        ),
        hovertemplate='<b>%{text}</b><br>' +
                      'CAC: %{x:,.0f} —Ä—É–±<br>' +
                      'LTV: %{y:,.0f} —Ä—É–±<br>' +
                      '<extra></extra>'
    ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤
    max_val = max(max(ltv_values), max(cac_values))
    
    # –õ–∏–Ω–∏—è LTV = CAC (1:1)
    fig.add_shape(type="line", x0=0, x1=max_val, y0=0, y1=max_val,
                  line=dict(color="red", width=2, dash="dash"))
    
    # –õ–∏–Ω–∏—è LTV = 3*CAC (3:1)
    fig.add_shape(type="line", x0=0, x1=max_val/3, y0=0, y1=max_val,
                  line=dict(color="orange", width=2, dash="dash"))
    
    fig.update_layout(
        title="–†–∞–∑–º–µ—Ä –ø—É–∑—ã—Ä—è = –æ–±—ä–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤, —Ü–≤–µ—Ç = LTV/CAC",
        xaxis_title="CAC (—Ä—É–±)",
        yaxis_title="LTV (—Ä—É–±)",
        height=500
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
    fig.add_annotation(x=max_val*0.8, y=max_val*0.85, text="LTV = CAC (1:1)",
                      showarrow=False, font=dict(color="red"))
    fig.add_annotation(x=max_val*0.25, y=max_val*0.85, text="LTV = 3√óCAC (3:1)",
                      showarrow=False, font=dict(color="orange"))
    
    st.plotly_chart(fig, use_container_width=True)

def create_channel_dynamics_chart(channels_data: Dict):
    """–ì—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–Ω–∞–º–∏–∫–∏ –∫–∞–Ω–∞–ª–æ–≤"""
    st.subheader("‚è∞ –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ CAC")
    
    # –°–∏–º—É–ª—è—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–Ω–∞–º–∏–∫–∏
    months = 12
    time_data = {}
    
    for channel in channels_data.keys():
        base_cac = channels_data[channel]['cac']
        
        # –†–∞–∑–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è CAC
        if '–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π' in channel or 'SEO' in channel:
            # –û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã - —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç CAC –∏–∑-–∑–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏
            trend = [base_cac * (1 + 0.02 * month) for month in range(months)]
        elif '–ü–æ–∏—Å–∫–æ–≤–∞—è' in channel:
            # –ü–æ–∏—Å–∫–æ–≤–∞—è —Ä–µ–∫–ª–∞–º–∞ - —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å + –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è
            trend = [base_cac * (1 + 0.03 * month + 0.1 * np.sin(month * np.pi / 6)) 
                    for month in range(months)]
        elif '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ' in channel:
            # –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ - –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∏–∑-–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
            trend = [base_cac * (1 + np.random.normal(0, 0.1)) for _ in range(months)]
        else:
            # –ú–µ–¥–∏–π–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞ - –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç + –∫—Ä–µ–∞—Ç–∏–≤–Ω–∞—è —É—Å—Ç–∞–ª–æ—Å—Ç—å
            trend = [base_cac * (1 + 0.04 * month + 0.05 * (month > 6)) 
                    for month in range(months)]
        
        time_data[channel] = trend
    
    # –ì—Ä–∞—Ñ–∏–∫
    fig = go.Figure()
    
    for channel, values in time_data.items():
        fig.add_trace(go.Scatter(
            x=list(range(1, months + 1)),
            y=values,
            mode='lines+markers',
            name=channel,
            line=dict(width=3)
        ))
    
    fig.update_layout(
        title="CAC –Ω–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞! –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –¥–∏–Ω–∞–º–∏–∫—É –≤–æ –≤—Ä–µ–º–µ–Ω–∏",
        xaxis_title="–ú–µ—Å—è—Ü",
        yaxis_title="CAC (—Ä—É–±)",
        height=400
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    st.warning("""
    ‚ö†Ô∏è **–í–∞–∂–Ω–æ**: CAC –∏–º–µ–µ—Ç —Ç–µ–Ω–¥–µ–Ω—Ü–∏—é —Ä–∞—Å—Ç–∏ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –∏–∑-–∑–∞:
    - –†–æ—Å—Ç–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏ –Ω–∞ —Ä—ã–Ω–∫–µ
    - –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ–π —É—Å—Ç–∞–ª–æ—Å—Ç–∏ (–ø–∞–¥–µ–Ω–∏–µ CTR)
    - –ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–ª–∞—Ç—Ñ–æ—Ä–º
    - –°–µ–∑–æ–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
    """)

def show_channel_recommendations(channels_data: Dict):
    """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤"""
    st.subheader("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
    
    # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
    channel_metrics = {}
    for channel, data in channels_data.items():
        ratio = data['ltv'] / data['cac']
        payback = data['cac'] / (data['ltv'] / 24)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –ü–¶–ö –∑–∞ 24 –º–µ—Å—è—Ü–∞
        
        channel_metrics[channel] = {
            'ratio': ratio,
            'payback': payback,
            'volume': data['volume'],
            'status': 'profitable' if ratio > 3 else 'marginal' if ratio > 2 else 'unprofitable'
        }
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### üü¢ –ö–∞–Ω–∞–ª—ã –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è")
        for channel, metrics in channel_metrics.items():
            if metrics['status'] == 'profitable':
                st.success(f"**{channel}**: LTV/CAC = {metrics['ratio']:.1f}:1, "
                          f"–æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å {metrics['payback']:.1f} –º–µ—Å")
    
    with col2:
        st.markdown("#### üî¥ –ö–∞–Ω–∞–ª—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        for channel, metrics in channel_metrics.items():
            if metrics['status'] == 'unprofitable':
                st.error(f"**{channel}**: LTV/CAC = {metrics['ratio']:.1f}:1, "
                        f"–æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å {metrics['payback']:.1f} –º–µ—Å")
    
    # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    best_channel = max(channel_metrics.keys(), key=lambda x: channel_metrics[x]['ratio'])
    worst_channel = min(channel_metrics.keys(), key=lambda x: channel_metrics[x]['ratio'])
    
    st.info(f"""
    üìà **–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏**:
    
    1. **–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å**: {best_channel} (–ª—É—á—à–∏–π LTV/CAC = {channel_metrics[best_channel]['ratio']:.1f}:1)
    2. **–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å**: {worst_channel} (—Ç—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è targeting/–∫—Ä–µ–∞—Ç–∏–≤–æ–≤)
    3. **–î–∏–≤–µ—Ä—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å**: –ù–µ –ø–æ–ª–∞–≥–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª
    4. **–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å**: –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–∏–Ω–∞–º–∏–∫—É CAC –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ
    """)

def scenario_planning_mode():
    """–†–µ–∂–∏–º —Å—Ü–µ–Ω–∞—Ä–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    st.header("üé™ –°—Ü–µ–Ω–∞—Ä–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    st.markdown("""
    **–ß—Ç–æ –µ—Å–ª–∏?** –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ä–∏—Å–∫–æ–≤ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.
    –°–∏—Å—Ç–µ–º–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ - LTV –∏ CAC –≤–∑–∞–∏–º–æ—Å–≤—è–∑–∞–Ω—ã —á–µ—Ä–µ–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö.
    """)
    
    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è
    scenario_type = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ü–µ–Ω–∞—Ä–∏—è:",
        [
            "üöÄ –°—Ü–µ–Ω–∞—Ä–∏–π —Ä–æ—Å—Ç–∞", 
            "üìâ –ö—Ä–∏–∑–∏—Å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π",
            "üÜö –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ",
            "üì± –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞",
            "üåç –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ"
        ]
    )
    
    if scenario_type == "üöÄ –°—Ü–µ–Ω–∞—Ä–∏–π —Ä–æ—Å—Ç–∞":
        growth_scenario()
    elif scenario_type == "üìâ –ö—Ä–∏–∑–∏—Å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π":
        crisis_scenario()
    elif scenario_type == "üÜö –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ":
        competitive_scenario()
    elif scenario_type == "üì± –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞":
        new_product_scenario()
    elif scenario_type == "üåç –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ":
        expansion_scenario()

def growth_scenario():
    """–°—Ü–µ–Ω–∞—Ä–∏–π –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞"""
    st.subheader("üöÄ –°—Ü–µ–Ω–∞—Ä–∏–π –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–æ—Å—Ç–∞**")
        budget_increase = st.slider("–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ (%)", 50, 500, 200)
        cac_inflation = st.slider("–ò–Ω—Ñ–ª—è—Ü–∏—è –°–ü–ö (%)", 0, 100, 30)
        volume_efficiency = st.slider("–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è (%)", 50, 100, 80)
        
    with col2:
        st.markdown("**–ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏**")
        base_budget = st.number_input("–¢–µ–∫—É—â–∏–π –±—é–¥–∂–µ—Ç", 100000, 10000000, 1000000)
        base_cac = st.number_input("–¢–µ–∫—É—â–∏–π CAC", 500, 5000, 1500)
        base_ltv = st.number_input("–¢–µ–∫—É—â–∏–π LTV", 2000, 20000, 6000)
    
    # –†–∞—Å—á–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è
    new_budget = base_budget * (1 + budget_increase / 100)
    new_cac = base_cac * (1 + cac_inflation / 100)
    volume_multiplier = (volume_efficiency / 100) * (budget_increase / 100)
    new_customers = (base_budget / base_cac) * (1 + volume_multiplier)
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("–ù–æ–≤—ã–π –±—é–¥–∂–µ—Ç", f"{new_budget:,.0f} —Ä—É–±", 
                 f"+{(new_budget - base_budget):,.0f}")
    
    with col2:
        st.metric("–ù–æ–≤—ã–π CAC", f"{new_cac:,.0f} —Ä—É–±",
                 f"+{(new_cac - base_cac):,.0f}")
    
    with col3:
        st.metric("–ù–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤", f"{new_customers:,.0f}",
                 f"+{(new_customers - base_budget/base_cac):,.0f}")
    
    # –ê–Ω–∞–ª–∏–∑ ROI
    current_roi = (base_ltv - base_cac) / base_cac
    new_roi = (base_ltv - new_cac) / new_cac
    
    st.subheader("üìä –ê–Ω–∞–ª–∏–∑ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏")
    
    if new_roi > 0:
        st.success(f"‚úÖ ROI –æ—Å—Ç–∞–µ—Ç—Å—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º: {new_roi:.1%}")
    else:
        st.error(f"‚ùå ROI —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º: {new_roi:.1%}")
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–Ω–µ–∂–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
    create_cashflow_projection(new_budget, new_cac, base_ltv, new_customers)

def crisis_scenario():
    """–ö—Ä–∏–∑–∏—Å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π"""
    st.subheader("üìâ –ö—Ä–∏–∑–∏—Å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π")
    
    st.warning("""
    –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–ª–∏—è–Ω–∏—è —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ –∫—Ä–∏–∑–∏—Å–∞ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏.
    –ö—Ä–∏–∑–∏—Å –≤–ª–∏—è–µ—Ç –∫–∞–∫ –Ω–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ (–°–ü–ö), —Ç–∞–∫ –∏ –Ω–∞ —É–¥–µ—Ä–∂–∞–Ω–∏–µ (–ü–¶–ö).
    """)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã**")
        arpu_decline = st.slider("–ü–∞–¥–µ–Ω–∏–µ –°–î–ü–û (%)", 0, 50, 20)
        churn_increase = st.slider("–†–æ—Å—Ç –æ—Ç—Ç–æ–∫–∞ (%)", 0, 100, 50)
        budget_cut = st.slider("–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ (%)", 0, 70, 30)
        
    with col2:
        st.markdown("**–ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏**")
        base_arpu = st.number_input("–ë–∞–∑–æ–≤—ã–π ARPPU", 1000, 10000, 3000)
        base_churn = st.slider("–ë–∞–∑–æ–≤—ã–π –æ—Ç—Ç–æ–∫ (%)", 1.0, 15.0, 5.0, 0.5)
        base_budget = st.number_input("–ë–∞–∑–æ–≤—ã–π –±—é–¥–∂–µ—Ç", 100000, 5000000, 1000000)
    
    # –†–∞—Å—á–µ—Ç –∫—Ä–∏–∑–∏—Å–Ω–æ–≥–æ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è
    new_arpu = base_arpu * (1 - arpu_decline / 100)
    new_churn = base_churn * (1 + churn_increase / 100)
    new_budget = base_budget * (1 - budget_cut / 100)
    
    # LTV –¥–æ –∏ –ø–æ—Å–ª–µ
    base_ltv = (base_arpu * 0.6) / (base_churn / 100)  # 60% –º–∞—Ä–∂–∞
    new_ltv = (new_arpu * 0.6) / (new_churn / 100)
    
    ltv_change = (new_ltv - base_ltv) / base_ltv
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("ARPPU", f"{new_arpu:,.0f} —Ä—É–±", f"{ltv_change:.1%}")
    
    with col2:
        st.metric("–û—Ç—Ç–æ–∫", f"{new_churn:.1f}%", f"+{new_churn - base_churn:.1f}%")
    
    with col3:
        st.metric("LTV", f"{new_ltv:,.0f} —Ä—É–±", f"{(new_ltv - base_ltv):,.0f}")
    
    # –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if ltv_change < -0.3:
        st.error("üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø–∞–¥–µ–Ω–∏–µ LTV! –ù–µ–æ–±—Ö–æ–¥–∏–º—ã —Å—Ä–æ—á–Ω—ã–µ –º–µ—Ä—ã –ø–æ —É–¥–µ—Ä–∂–∞–Ω–∏—é.")
    elif ltv_change < -0.15:
        st.warning("‚ö†Ô∏è –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ LTV. –ü–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —É–¥–µ—Ä–∂–∞–Ω–∏—è.")
    else:
        st.info("üìä –£–º–µ—Ä–µ–Ω–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ. –§–æ–∫—É—Å –Ω–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è.")

def create_cashflow_projection(budget: float, cac: float, ltv: float, customers: float):
    """–ü—Ä–æ–µ–∫—Ü–∏—è –¥–µ–Ω–µ–∂–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞"""
    st.subheader("üí∞ –ü—Ä–æ–µ–∫—Ü–∏—è –¥–µ–Ω–µ–∂–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞")
    
    months = 24
    monthly_arpu = ltv / months  # –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ
    
    # –†–∞—Å—á–µ—Ç –¥–µ–Ω–µ–∂–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
    cashflow = []
    cumulative = 0
    
    for month in range(1, months + 1):
        if month == 1:
            # –ü–µ—Ä–≤—ã–π –º–µ—Å—è—Ü - —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ
            monthly_flow = -budget + (customers * monthly_arpu)
        else:
            # –ü–æ—Å–ª–µ–¥—É—é—â–∏–µ –º–µ—Å—è—Ü—ã - –¥–æ—Ö–æ–¥—ã –æ—Ç –ø—Ä–∏–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
            # –° —É—á–µ—Ç–æ–º –æ—Ç—Ç–æ–∫–∞ 5% –≤ –º–µ—Å—è—Ü
            active_customers = customers * (0.95 ** (month - 1))
            monthly_flow = active_customers * monthly_arpu
        
        cumulative += monthly_flow
        cashflow.append({'month': month, 'monthly': monthly_flow, 'cumulative': cumulative})
    
    df = pd.DataFrame(cashflow)
    
    # –ì—Ä–∞—Ñ–∏–∫
    fig = make_subplots(specs=[[{"secondary_y": True}]])
    
    fig.add_trace(
        go.Bar(x=df['month'], y=df['monthly'], name='–ú–µ—Å—è—á–Ω—ã–π –ø–æ—Ç–æ–∫',
               marker_color=['red' if x < 0 else 'green' for x in df['monthly']]),
        secondary_y=False,
    )
    
    fig.add_trace(
        go.Scatter(x=df['month'], y=df['cumulative'], mode='lines+markers',
                  name='–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫', line=dict(color='blue', width=3)),
        secondary_y=True,
    )
    
    # –õ–∏–Ω–∏—è –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏
    fig.add_hline(y=0, line_dash="dash", line_color="black", secondary_y=True)
    
    fig.update_xaxes(title_text="–ú–µ—Å—è—Ü")
    fig.update_yaxes(title_text="–ú–µ—Å—è—á–Ω—ã–π –ø–æ—Ç–æ–∫ (—Ä—É–±)", secondary_y=False)
    fig.update_yaxes(title_text="–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ (—Ä—É–±)", secondary_y=True)
    
    fig.update_layout(title="–ü—Ä–æ–µ–∫—Ü–∏—è –¥–µ–Ω–µ–∂–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π", height=400)
    
    st.plotly_chart(fig, use_container_width=True)
    
    # –ü–µ—Ä–∏–æ–¥ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏
    payback_month = None
    for item in cashflow:
        if item['cumulative'] > 0:
            payback_month = item['month']
            break
    
    if payback_month:
        st.success(f"üí∞ **–ü–µ—Ä–∏–æ–¥ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏**: {payback_month} –º–µ—Å—è—Ü–µ–≤")
    else:
        st.error("‚ùå **–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å –Ω–µ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç—Å—è** –≤ —Ä–∞–º–∫–∞—Ö 24 –º–µ—Å—è—Ü–µ–≤")

def competitive_scenario():
    """–°—Ü–µ–Ω–∞—Ä–∏–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–≥–æ –¥–∞–≤–ª–µ–Ω–∏—è"""
    st.subheader("üÜö –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ")
    
    st.info("""
    –ù–æ–≤—ã–π –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç –≤—Ö–æ–¥–∏—Ç –Ω–∞ —Ä—ã–Ω–æ–∫, –≤–ª–∏—è—è –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è 
    –∏ –¥–æ–ª—é —Ä—ã–Ω–∫–∞. –ö–∞–∫ —ç—Ç–æ –æ—Ç—Ä–∞–∑–∏—Ç—Å—è –Ω–∞ –≤–∞—à–∏—Ö –º–µ—Ç—Ä–∏–∫–∞—Ö?
    """)
    
    competitor_aggression = st.slider("–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ (1-10)", 1, 10, 6)
    
    # –í–ª–∏—è–Ω–∏–µ –Ω–∞ —Ä–∞–∑–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    channels_impact = {
        '–ü–æ–∏—Å–∫–æ–≤–∞—è —Ä–µ–∫–ª–∞–º–∞': competitor_aggression * 0.15,  # –°–∏–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ
        '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏': competitor_aggression * 0.10,    # –°—Ä–µ–¥–Ω–µ–µ –≤–ª–∏—è–Ω–∏–µ  
        '–ú–µ–¥–∏–π–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞': competitor_aggression * 0.20,   # –û—á–µ–Ω—å —Å–∏–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ
        'SEO': competitor_aggression * 0.05,                # –°–ª–∞–±–æ–µ –≤–ª–∏—è–Ω–∏–µ
        '–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π': competitor_aggression * 0.02        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ
    }
    
    st.subheader("üìä –í–ª–∏—è–Ω–∏–µ –Ω–∞ –°–ü–ö –ø–æ –∫–∞–Ω–∞–ª–∞–º")
    
    for channel, impact in channels_impact.items():
        base_cac = 2000  # –ë–∞–∑–æ–≤—ã–π –°–ü–ö
        new_cac = base_cac * (1 + impact)
        
        col1, col2 = st.columns([3, 1])
        with col1:
            st.write(f"**{channel}**")
        with col2:
            st.metric("–°–ü–ö", f"{new_cac:,.0f}", f"+{impact:.1%}")

def new_product_scenario():
    """–°—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–ø—É—Å–∫–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    st.subheader("üì± –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞")
    
    st.markdown("""
    –ù–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –º–æ–∂–µ—Ç –∏–º–µ—Ç—å —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –¥—Ä—É–≥–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –ü–¶–ö/–°–ü–ö. 
    –í–∞–∂–Ω–æ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –¥–æ –∑–∞–ø—É—Å–∫–∞.
    """)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞**")
        price_premium = st.slider("–ü—Ä–µ–º–∏—è –∫ —Ü–µ–Ω–µ (%)", -50, 200, 50)
        target_sophistication = st.slider("–°–ª–æ–∂–Ω–æ—Å—Ç—å —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥–∞ (1-10)", 1, 10, 7)
        market_size = st.selectbox("–†–∞–∑–º–µ—Ä —Ä—ã–Ω–∫–∞", ["–ù–∏—à–µ–≤—ã–π", "–°—Ä–µ–¥–Ω–∏–π", "–ú–∞—Å—Å–æ–≤—ã–π"])
        
    with col2:
        st.markdown("**–ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏**")
        base_price = st.number_input("–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞", 1000, 50000, 5000)
        base_cac = st.number_input("–ë–∞–∑–æ–≤—ã–π –°–ü–ö", 500, 10000, 2000)
        
    # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    new_price = base_price * (1 + price_premium / 100)
    
    # –°–ü–ö –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥–∞
    cac_multiplier = 1 + (target_sophistication - 5) * 0.2
    new_cac = base_cac * cac_multiplier
    
    # –†–∞–∑–º–µ—Ä —Ä—ã–Ω–∫–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    market_multipliers = {"–ù–∏—à–µ–≤—ã–π": 0.3, "–°—Ä–µ–¥–Ω–∏–π": 1.0, "–ú–∞—Å—Å–æ–≤—ã–π": 2.0}
    scale_potential = market_multipliers[market_size]
    
    # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ü–¶–ö (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Å—Ö–æ–∂–µ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤)
    new_ltv = new_price * 8  # 8 –º–µ—Å—è—Ü–µ–≤ —Å—Ä–µ–¥–Ω—è—è –∂–∏–∑–Ω—å –∫–ª–∏–µ–Ω—Ç–∞
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("–¶–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞", f"{new_price:,.0f} —Ä—É–±", f"{price_premium:+.0f}%")
    
    with col2:
        st.metric("–ü—Ä–æ–≥–Ω–æ–∑–Ω—ã–π –°–ü–ö", f"{new_cac:,.0f} —Ä—É–±", f"{(cac_multiplier-1)*100:+.0f}%")
    
    with col3:
        ratio = new_ltv / new_cac
        st.metric("–ü–¶–ö/–°–ü–ö", f"{ratio:.1f}:1", 
                 "–•–æ—Ä–æ—à–æ" if ratio > 3 else "–ü–ª–æ—Ö–æ")
    
    st.info(f"üéØ **–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è**: {scale_potential:.1f}x –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞")

def expansion_scenario():
    """–°—Ü–µ–Ω–∞—Ä–∏–π –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è"""
    st.subheader("üåç –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ")
    
    region = st.selectbox("–¶–µ–ª–µ–≤–æ–π —Ä–µ–≥–∏–æ–Ω", 
                         ["–°–ü–± –∏ –õ–û", "–†–µ–≥–∏–æ–Ω—ã –†–§", "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", "–ë–µ–ª–∞—Ä—É—Å—å"])
    
    # –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ)
    regional_factors = {
        "–°–ü–± –∏ –õ–û": {"cac_mult": 0.8, "ltv_mult": 0.9, "competition": 8},
        "–†–µ–≥–∏–æ–Ω—ã –†–§": {"cac_mult": 0.6, "ltv_mult": 0.7, "competition": 4}, 
        "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω": {"cac_mult": 0.4, "ltv_mult": 0.5, "competition": 3},
        "–ë–µ–ª–∞—Ä—É—Å—å": {"cac_mult": 0.5, "ltv_mult": 0.6, "competition": 2}
    }
    
    factors = regional_factors[region]
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**–ú–æ—Å–∫–æ–≤—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏ (–±–∞–∑–∞)**")
        msk_cac = st.number_input("–ú–æ—Å–∫–æ–≤—Å–∫–∏–π –°–ü–ö", 1000, 5000, 2500)
        msk_ltv = st.number_input("–ú–æ—Å–∫–æ–≤—Å–∫–∏–π –ü–¶–ö", 5000, 25000, 12000)
        
    with col2:
        st.markdown(f"**–ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {region}**")
        
        regional_cac = msk_cac * factors["cac_mult"]
        regional_ltv = msk_ltv * factors["ltv_mult"]
        
        st.metric("–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –°–ü–ö", f"{regional_cac:,.0f} —Ä—É–±", 
                 f"{(factors['cac_mult']-1)*100:+.0f}%")
        st.metric("–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –ü–¶–ö", f"{regional_ltv:,.0f} —Ä—É–±",
                 f"{(factors['ltv_mult']-1)*100:+.0f}%")
        
        regional_ratio = regional_ltv / regional_cac
        msk_ratio = msk_ltv / msk_cac
        
        st.metric("–ü–¶–ö/–°–ü–ö", f"{regional_ratio:.1f}:1",
                 f"{regional_ratio - msk_ratio:+.1f}")
    
    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ–≥–∏–æ–Ω–∞
    st.subheader("üìà –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    
    attractiveness_score = (
        regional_ratio * 2 +  # –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
        (10 - factors["competition"]) * 0.5 +  # –ù–∏–∑–∫–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è = –ø–ª—é—Å
        factors["ltv_mult"] * 5  # –ü–æ–∫—É–ø–∞—Ç–µ–ª—å–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
    )
    
    if attractiveness_score > 8:
        st.success(f"üéØ **–í—ã—Å–æ–∫–∞—è –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å** —Ä–µ–≥–∏–æ–Ω–∞ {region} (–æ—Ü–µ–Ω–∫–∞: {attractiveness_score:.1f}/10)")
    elif attractiveness_score > 6:
        st.info(f"üìä **–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å** —Ä–µ–≥–∏–æ–Ω–∞ {region} (–æ—Ü–µ–Ω–∫–∞: {attractiveness_score:.1f}/10)")
    else:
        st.warning(f"‚ö†Ô∏è **–ù–∏–∑–∫–∞—è –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å** —Ä–µ–≥–∏–æ–Ω–∞ {region} (–æ—Ü–µ–Ω–∫–∞: {attractiveness_score:.1f}/10)")

def error_detector_mode():
    """–†–µ–∂–∏–º –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –æ—à–∏–±–æ–∫"""
    st.header("üïµÔ∏è –î–µ—Ç–µ–∫—Ç–æ—Ä –æ—à–∏–±–æ–∫ –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö LTV/CAC")
    
    st.markdown("""
    **–í —Å—Ç–∏–ª–µ Statistical Detective!** –ù–∞–π–¥–∏—Ç–µ —Å–∫—Ä—ã—Ç—ã–µ –æ—à–∏–±–∫–∏ –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö LTV/CAC,
    –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∏—á–µ—Å–∫–∏–º —Ä–µ—à–µ–Ω–∏—è–º.
    """)
    
    # –í—ã–±–æ—Ä –∫–µ–π—Å–∞
    error_cases = get_ltv_cac_error_cases()
    
    case_titles = [case['title'] for case in error_cases]
    selected_case = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–µ–π—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", case_titles)
    
    current_case = next(case for case in error_cases if case['title'] == selected_case)
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–µ–π—Å–∞
    display_error_case(current_case)

def get_ltv_cac_error_cases() -> List[Dict]:
    """–ë–∞–∑–∞ –∫–µ–π—Å–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏ –≤ LTV/CAC"""
    return [
        {
            'title': '–í–∞–ª–æ–≤—ã–π LTV vs –ß–∏—Å—Ç—ã–π LTV',
            'description': """
            **–°–∏—Ç—É–∞—Ü–∏—è**: –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É –¥–æ–∫–ª–∞–¥—ã–≤–∞–µ—Ç —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É:
            
            "–ù–∞—à–∏ –º–µ—Ç—Ä–∏–∫–∏ –≤—ã–≥–ª—è–¥—è—Ç –æ—Ç–ª–∏—á–Ω–æ! LTV –∫–ª–∏–µ–Ω—Ç–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 15,000 —Ä—É–±, 
            CAC —Ç–æ–ª—å–∫–æ 3,000 —Ä—É–±. –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ 5:1 - –º–æ–∂–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å—Å—è!"
            
            **–î–∞–Ω–Ω—ã–µ**:
            - –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: 2,500 —Ä—É–±/–º–µ—Å—è—Ü
            - –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏: 6 –º–µ—Å—è—Ü–µ–≤  
            - LTV = 2,500 √ó 6 = 15,000 —Ä—É–±
            - CAC = 3,000 —Ä—É–±
            
            **–°–∫—Ä—ã—Ç–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è**:
            - –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞: 40%
            - –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: 25%
            - –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: 200 —Ä—É–±/–º–µ—Å—è—Ü
            """,
            'options': [
                "–†–∞—Å—á–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, –º–æ–∂–Ω–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å—Å—è",
                "–û—à–∏–±–∫–∞: –Ω–µ —É—á—Ç–µ–Ω–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã",
                "–û—à–∏–±–∫–∞: —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ LTV",
                "–û—à–∏–±–∫–∞: –Ω—É–∂–Ω–æ —É—á–µ—Å—Ç—å –¥–∏—Å–∫–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
            ],
            'correct': 1,
            'explanation': """
            **–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç**: –ù–µ —É—á—Ç–µ–Ω–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã.
            
            **–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç**:
            - –í–∞–ª–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å = 2,500 √ó (1 - 0.4 - 0.25) = 875 —Ä—É–±/–º–µ—Å—è—Ü
            - –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ = 200 —Ä—É–±/–º–µ—Å—è—Ü  
            - –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å = 875 - 200 = 675 —Ä—É–±/–º–µ—Å—è—Ü
            - –ß–∏—Å—Ç—ã–π LTV = 675 √ó 6 = 4,050 —Ä—É–±
            - **–†–µ–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ = 1.35:1** (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–æ–µ!)
            
            **–£—Ä–æ–∫**: –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å—Ç—ã–π LTV, –Ω–µ –≤–∞–ª–æ–≤—ã–π!
            """
        },
        {
            'title': '–ü—Ä–µ–¥–≤–∑—è—Ç–æ—Å—Ç—å –≤—ã–∂–∏–≤—à–µ–≥–æ –≤ LTV',
            'description': """
            **–°–∏—Ç—É–∞—Ü–∏—è**: –ê–Ω–∞–ª–∏—Ç–∏–∫ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç LTV –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:
            
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥. –°—Ä–µ–¥–Ω–∏–π LTV —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 
            12,000 —Ä—É–± –ø—Ä–∏ CAC 2,000 —Ä—É–±. –û—Ç–ª–∏—á–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ 6:1!"
            
            **–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è —Ä–∞—Å—á–µ—Ç–∞**:
            - –í–∑—è–ª –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç
            - –†–∞—Å—Å—á–∏—Ç–∞–ª –∏—Ö —Å—É–º–º–∞—Ä–Ω—É—é –≤—ã—Ä—É—á–∫—É —Å –º–æ–º–µ–Ω—Ç–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è
            - –†–∞–∑–¥–µ–ª–∏–ª –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤
            
            **–ß—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ —Ç–∞–∫?**
            """,
            'options': [
                "–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞",
                "–ü—Ä–µ–¥–≤–∑—è—Ç–æ—Å—Ç—å –≤—ã–∂–∏–≤—à–µ–≥–æ: –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã", 
                "–ù—É–∂–Ω–æ —É—á–µ—Å—Ç—å –±–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥",
                "–û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—á–µ—Ç–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è"
            ],
            'correct': 1,
            'explanation': """
            **–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç**: –ü—Ä–µ–¥–≤–∑—è—Ç–æ—Å—Ç—å –≤—ã–∂–∏–≤—à–µ–≥–æ.
            
            **–ü—Ä–æ–±–ª–µ–º–∞**: –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ "–≤—ã–∂–∏–ª–∏" –∏ –¥–æ —Å–∏—Ö –ø–æ—Ä –∞–∫—Ç–∏–≤–Ω—ã.
            –ö–ª–∏–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É—à–ª–∏ –±—ã—Å—Ç—Ä–æ (–∏ –∏–º–µ–ª–∏ –Ω–∏–∑–∫–∏–π LTV), –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ —Ä–∞—Å—á–µ—Ç–∞.
            
            **–ü—Ä–∞–≤–∏–ª—å–Ω–æ**: –ö–æ–≥–æ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤, –ø—Ä–∏–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥,
            –≤–∫–ª—é—á–∞—è —Ç–µ—Ö, –∫—Ç–æ —É–∂–µ —É—à–µ–ª.
            
            **–†–µ–∞–ª—å–Ω—ã–π LTV –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ 2-3 —Ä–∞–∑–∞ –Ω–∏–∂–µ** —Ä–∞—Å—á–µ—Ç–Ω–æ–≥–æ!
            """
        },
        {
            'title': '–°–º–µ—à–∞–Ω–Ω—ã–π CAC vs CAC –ø–æ –∫–∞–Ω–∞–ª–∞–º',
            'description': """
            **–°–∏—Ç—É–∞—Ü–∏—è**: –ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–µ–≥–æ CAC:
            
            "–ù–∞—à —Å—Ä–µ–¥–Ω–∏–π CAC —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 1,800 —Ä—É–±. –≠—Ç–æ –ø—Ä–∏–µ–º–ª–µ–º–æ –¥–ª—è –Ω–∞—à–µ–≥–æ LTV 7,200 —Ä—É–±.
            –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±—é–¥–∂–µ—Ç –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ."
            
            **–î–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–Ω–∞–ª–∞–º**:
            - –û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π —Ç—Ä–∞—Ñ–∏–∫: 500 –∫–ª–∏–µ–Ω—Ç–æ–≤, CAC 400 —Ä—É–±
            - Google Ads: 300 –∫–ª–∏–µ–Ω—Ç–æ–≤, CAC 2,500 —Ä—É–±  
            - Facebook: 200 –∫–ª–∏–µ–Ω—Ç–æ–≤, CAC 3,200 —Ä—É–±
            - –°—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω—ã–π CAC = 1,800 —Ä—É–±
            
            **–í–æ–ø—Ä–æ—Å**: –í —á–µ–º –æ—à–∏–±–∫–∞ —Ç–∞–∫–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞?
            """,
            'options': [
                "–û—à–∏–±–∫–∏ –Ω–µ—Ç, —Å—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω—ã–π CAC –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω",
                "–û—à–∏–±–∫–∞: –∫–∞–Ω–∞–ª—ã –∏–º–µ—é—Ç —Ä–∞–∑–Ω—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è",
                "–û—à–∏–±–∫–∞: –Ω—É–∂–Ω–æ —É—á–µ—Å—Ç—å LTV –ø–æ –∫–∞–Ω–∞–ª–∞–º –æ—Ç–¥–µ–ª—å–Ω–æ", 
                "–û—à–∏–±–∫–∞: –ë –∏ –í –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ"
            ],
            'correct': 3,
            'explanation': """
            **–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç**: –ë –∏ –í –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ.
            
            **–ü—Ä–æ–±–ª–µ–º—ã —Å–º–µ—à–∞–Ω–Ω–æ–≥–æ CAC**:
            1. –°–∫—Ä—ã–≤–∞–µ—Ç –≤—ã—Å–æ–∫–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã (–æ—Ä–≥–∞–Ω–∏–∫–∞: LTV/CAC = 18:1)
            2. –°–∫—Ä—ã–≤–∞–µ—Ç –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã (Facebook: LTV/CAC = 2.25:1)
            3. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –ø–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é –±—é–¥–∂–µ—Ç–∞
            
            **–ü—Ä–∞–≤–∏–ª—å–Ω–æ**: –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å LTV/CAC –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –æ—Ç–¥–µ–ª—å–Ω–æ –∏ 
            –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—Ç—å –±—é–¥–∂–µ—Ç –≤ –ø–æ–ª—å–∑—É —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.
            """
        }
    ]

def display_error_case(case: Dict):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–µ–π—Å–∞ —Å –æ—à–∏–±–∫–æ–π"""
    st.subheader(case['title'])
    st.markdown(case['description'])
    
    st.markdown("### ü§î –í —á–µ–º –æ—à–∏–±–∫–∞?")
    
    answer = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:", case['options'], 
                     key=f"error_case_{case['title']}")
    
    if st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç", key=f"check_error_{case['title']}"):
        user_choice = case['options'].index(answer)
        
        if user_choice == case['correct']:
            st.success("üéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –û—Ç–ª–∏—á–Ω–∞—è –¥–µ—Ç–µ–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞!")
            st.markdown(case['explanation'])
        else:
            st.error("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
            st.info("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ü–æ–¥—É–º–∞–π—Ç–µ –æ —Å–∫—Ä—ã—Ç—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–∞—Ö –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è—Ö –º–µ—Ç—Ä–∏–∫.")

def budget_optimizer_mode():
    """–†–µ–∂–∏–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±—é–¥–∂–µ—Ç–∞"""
    st.header("üí° –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –±—é–¥–∂–µ—Ç–∞")
    
    st.markdown("""
    **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —á–∞—Å—Ç—å**: –ü–æ–ª—É—á–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –±—é–¥–∂–µ—Ç –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –µ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ 
    –¥–ª—è –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏ ROI –∏–ª–∏ –æ–±—ä–µ–º–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è.
    """)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    st.subheader("üìä –¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞")
    
    col1, col2 = st.columns(2)
    
    with col1:
        total_budget = st.number_input("–û–±—â–∏–π –±—é–¥–∂–µ—Ç (—Ä—É–±)", 500000, 20000000, 2000000)
        optimization_goal = st.selectbox("–¶–µ–ª—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:", 
                                       ["–ú–∞–∫—Å–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å ROI", "–ú–∞–∫—Å–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä–µ–º"])
        
    with col2:
        min_budget_constraint = st.slider("–ú–∏–Ω. –±—é–¥–∂–µ—Ç –Ω–∞ –∫–∞–Ω–∞–ª (%)", 0, 30, 10)
        max_budget_constraint = st.slider("–ú–∞–∫—Å. –±—é–¥–∂–µ—Ç –Ω–∞ –∫–∞–Ω–∞–ª (%)", 40, 80, 60)
    
    # –¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    current_allocation = setup_current_allocation(total_budget)
    
    # –†–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    optimal_allocation = calculate_optimal_allocation(
        current_allocation, optimization_goal, 
        min_budget_constraint, max_budget_constraint
    )
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    compare_allocations(current_allocation, optimal_allocation)

def setup_current_allocation(total_budget: float) -> Dict:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞"""
    st.subheader("‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞–Ω–∞–ª–æ–≤")
    
    channels = {
        'Google Ads': {'budget_pct': 40, 'cac': 2000, 'ltv': 6000, 'max_volume': 1000},
        'Facebook': {'budget_pct': 25, 'cac': 1800, 'ltv': 4500, 'max_volume': 800},
        '–Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç': {'budget_pct': 20, 'cac': 2200, 'ltv': 6500, 'max_volume': 600},
        'SEO': {'budget_pct': 10, 'cac': 800, 'ltv': 8000, 'max_volume': 300},
        'Email': {'budget_pct': 5, 'cac': 500, 'ltv': 5000, 'max_volume': 200}
    }
    
    st.markdown("–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞–Ω–∞–ª–æ–≤:")
    
    for channel in channels:
        col1, col2, col3, col4, col5 = st.columns(5)
        
        with col1:
            st.write(f"**{channel}**")
        with col2:
            channels[channel]['budget_pct'] = st.number_input(
                f"–ë—é–¥–∂–µ—Ç %", 0, 100, channels[channel]['budget_pct'], 
                key=f"budget_{channel}")
        with col3:
            channels[channel]['cac'] = st.number_input(
                f"–°–ü–ö", 100, 5000, channels[channel]['cac'],
                key=f"cac_{channel}")
        with col4:
            channels[channel]['ltv'] = st.number_input(
                f"–ü–¶–ö", 1000, 15000, channels[channel]['ltv'],
                key=f"ltv_{channel}")
        with col5:
            channels[channel]['max_volume'] = st.number_input(
                f"–ú–∞–∫—Å. –æ–±—ä–µ–º", 50, 2000, channels[channel]['max_volume'],
                key=f"volume_{channel}")
    
    # –†–∞—Å—á–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    for channel in channels:
        channels[channel]['budget'] = total_budget * channels[channel]['budget_pct'] / 100
        channels[channel]['customers'] = channels[channel]['budget'] / channels[channel]['cac']
        channels[channel]['roi'] = (channels[channel]['ltv'] - channels[channel]['cac']) / channels[channel]['cac']
    
    return channels

def calculate_optimal_allocation(channels: Dict, goal: str, min_pct: float, max_pct: float) -> Dict:
    """–†–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞"""
    
    # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
    optimal = {}
    total_budget = sum(ch['budget'] for ch in channels.values())
    
    if goal == "–ú–∞–∫—Å–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å ROI":
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ ROI
        sorted_channels = sorted(channels.items(), key=lambda x: x[1]['roi'], reverse=True)
    else:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—É –æ–±—ä–µ–º–∞ (—É—á–∏—Ç—ã–≤–∞—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å)
        sorted_channels = sorted(channels.items(), 
                               key=lambda x: x[1]['max_volume'] / x[1]['cac'], reverse=True)
    
    remaining_budget = total_budget
    allocated_budget = {}
    
    # –°–Ω–∞—á–∞–ª–∞ –≤—ã–¥–µ–ª—è–µ–º –º–∏–Ω–∏–º—É–º—ã
    for channel_name, channel_data in channels.items():
        min_budget = total_budget * min_pct / 100
        allocated_budget[channel_name] = min_budget
        remaining_budget -= min_budget
    
    # –ó–∞—Ç–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    for channel_name, channel_data in sorted_channels:
        max_additional = total_budget * max_pct / 100 - allocated_budget[channel_name]
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º—É –æ–±—ä–µ–º—É –∫–∞–Ω–∞–ª–∞
        max_by_volume = channel_data['max_volume'] * channel_data['cac'] - allocated_budget[channel_name]
        max_additional = min(max_additional, max_by_volume, remaining_budget)
        
        if max_additional > 0:
            allocated_budget[channel_name] += max_additional
            remaining_budget -= max_additional
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    for channel_name, channel_data in channels.items():
        optimal[channel_name] = channel_data.copy()
        optimal[channel_name]['budget'] = allocated_budget[channel_name]
        optimal[channel_name]['budget_pct'] = (allocated_budget[channel_name] / total_budget) * 100
        optimal[channel_name]['customers'] = min(
            allocated_budget[channel_name] / channel_data['cac'],
            channel_data['max_volume']
        )
        optimal[channel_name]['actual_spend'] = optimal[channel_name]['customers'] * channel_data['cac']
    
    return optimal

def compare_allocations(current: Dict, optimal: Dict):
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"""
    st.subheader("üìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    comparison_data = []
    
    for channel in current.keys():
        curr = current[channel]
        opt = optimal[channel]
        
        comparison_data.append({
            '–ö–∞–Ω–∞–ª': channel,
            '–¢–µ–∫—É—â–∏–π –±—é–¥–∂–µ—Ç': f"{curr['budget']:,.0f}",
            '–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç': f"{opt['budget']:,.0f}",
            '–ò–∑–º–µ–Ω–µ–Ω–∏–µ': f"{((opt['budget'] - curr['budget']) / curr['budget'] * 100):+.0f}%",
            '–¢–µ–∫—É—â–∏–π ROI': f"{curr['roi']:.1%}",
            '–¢–µ–∫—É—â–∏–µ –∫–ª–∏–µ–Ω—Ç—ã': f"{curr['customers']:.0f}",
            '–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã': f"{opt['customers']:.0f}"
        })
    
    df_comparison = pd.DataFrame(comparison_data)
    st.dataframe(df_comparison, use_container_width=True)
    
    # –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### üìä –¢–µ–∫—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        curr_customers = sum(ch['customers'] for ch in current.values())
        curr_revenue = sum(ch['customers'] * ch['ltv'] for ch in current.values())
        curr_profit = sum(ch['customers'] * (ch['ltv'] - ch['cac']) for ch in current.values())
        
        st.metric("–û–±—â–∏–π –æ–±—ä–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤", f"{curr_customers:.0f}")
        st.metric("–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞", f"{curr_revenue:,.0f} —Ä—É–±")
        st.metric("–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å", f"{curr_profit:,.0f} —Ä—É–±")
    
    with col2:
        st.markdown("#### üéØ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        opt_customers = sum(ch['customers'] for ch in optimal.values())
        opt_revenue = sum(ch['customers'] * ch['ltv'] for ch in optimal.values())
        opt_profit = sum(ch['customers'] * (ch['ltv'] - ch['cac']) for ch in optimal.values())
        
        st.metric("–û–±—â–∏–π –æ–±—ä–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤", f"{opt_customers:.0f}",
                 f"{((opt_customers - curr_customers) / curr_customers * 100):+.1f}%")
        st.metric("–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞", f"{opt_revenue:,.0f} —Ä—É–±",
                 f"{((opt_revenue - curr_revenue) / curr_revenue * 100):+.1f}%")
        st.metric("–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å", f"{opt_profit:,.0f} —Ä—É–±",
                 f"{((opt_profit - curr_profit) / curr_profit * 100):+.1f}%")
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    create_budget_reallocation_chart(current, optimal)

def create_budget_reallocation_chart(current: Dict, optimal: Dict):
    """–ì—Ä–∞—Ñ–∏–∫ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞"""
    st.subheader("üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")
    
    channels = list(current.keys())
    current_budgets = [current[ch]['budget'] for ch in channels]
    optimal_budgets = [optimal[ch]['budget'] for ch in channels]
    
    fig = go.Figure()
    
    fig.add_trace(go.Bar(
        x=channels,
        y=current_budgets,
        name='–¢–µ–∫—É—â–∏–π –±—é–¥–∂–µ—Ç',
        marker_color='lightblue',
        opacity=0.7
    ))
    
    fig.add_trace(go.Bar(
        x=channels,
        y=optimal_budgets,
        name='–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç',
        marker_color='darkblue',
        opacity=0.9
    ))
    
    fig.update_layout(
        title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞",
        xaxis_title="–ö–∞–Ω–∞–ª",
        yaxis_title="–ë—é–¥–∂–µ—Ç (—Ä—É–±)",
        barmode='group',
        height=400
    )
    
    st.plotly_chart(fig, use_container_width=True)

def educational_cases_mode():
    """–û–±—É—á–∞—é—â–∏–µ –∫–µ–π—Å—ã"""
    st.header("üìö –û–±—É—á–∞—é—â–∏–µ –∫–µ–π—Å—ã")
    
    st.markdown("""
    **–†–µ–∞–ª—å–Ω—ã–µ –∫–µ–π—Å—ã –∏–∑ –ø—Ä–∞–∫—Ç–∏–∫–∏** –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ü–¶–ö/–°–ü–ö –º–µ—Ç—Ä–∏–∫ 
    –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –±–∏–∑–Ω–µ—Å-—Å–∏—Ç—É–∞—Ü–∏—è—Ö.
    """)
    
    case_type = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–µ–π—Å–∞:",
        [
            "üí∞ SaaS —Å—Ç–∞—Ä—Ç–∞–ø",
            "üõçÔ∏è –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –∫–æ–º–º–µ—Ä—Ü–∏—è", 
            "üì± –ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
            "üè¢ B2B —Å–µ—Ä–≤–∏—Å",
            "üì∫ –ü–æ–¥–ø–∏—Å–æ—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å"
        ]
    )
    
    if case_type == "üí∞ SaaS —Å—Ç–∞—Ä—Ç–∞–ø":
        saas_case()
    elif case_type == "üõçÔ∏è –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –∫–æ–º–º–µ—Ä—Ü–∏—è":
        ecommerce_case()
    elif case_type == "üì± –ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ":
        mobile_app_case()
    elif case_type == "üè¢ B2B —Å–µ—Ä–≤–∏—Å":
        b2b_case()
    elif case_type == "üì∫ –ü–æ–¥–ø–∏—Å–æ—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å":
        subscription_case()

def saas_case():
    """–ö–µ–π—Å SaaS —Å—Ç–∞—Ä—Ç–∞–ø–∞"""
    st.subheader("üí∞ –ö–µ–π—Å: SaaS —Å—Ç–∞—Ä—Ç–∞–ø –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ HR")
    
    st.markdown("""
    **–°–∏—Ç—É–∞—Ü–∏—è**: –°—Ç–∞—Ä—Ç–∞–ø —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª SaaS –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ HR –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.
    –ï—Å—Ç—å 3 —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–∞, –Ω—É–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é.
    """)
    
    # –î–∞–Ω–Ω—ã–µ –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º
    plans_data = {
        "–ë–∞–∑–æ–≤—ã–π": {"price": 2000, "churn": 8.0, "conversion": 15, "cac": 3000},
        "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π": {"price": 5000, "churn": 5.0, "conversion": 8, "cac": 6000}, 
        "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π": {"price": 15000, "churn": 2.0, "conversion": 3, "cac": 25000}
    }
    
    st.subheader("üìä –î–∞–Ω–Ω—ã–µ –ø–æ —Ç–∞—Ä–∏—Ñ–Ω—ã–º –ø–ª–∞–Ω–∞–º")
    
    for plan, data in plans_data.items():
        col1, col2, col3, col4, col5 = st.columns(5)
        
        with col1:
            st.write(f"**{plan}**")
        with col2:
            st.metric("–¶–µ–Ω–∞/–º–µ—Å", f"{data['price']:,} —Ä—É–±")
        with col3:
            st.metric("–û—Ç—Ç–æ–∫/–º–µ—Å", f"{data['churn']:.1f}%")
        with col4:
            st.metric("–ö–æ–Ω–≤–µ—Ä—Å–∏—è", f"{data['conversion']:.0f}%")
        with col5:
            st.metric("–°–ü–ö", f"{data['cac']:,} —Ä—É–±")
    
    # –†–∞—Å—á–µ—Ç –ü–¶–ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–ª–∞–Ω–∞
    st.subheader("üí° –ê–Ω–∞–ª–∏–∑ –ü–¶–ö –ø–æ –ø–ª–∞–Ω–∞–º")
    
    analysis_data = []
    for plan, data in plans_data.items():
        # –ü–¶–ö = –º–µ—Å—è—á–Ω–∞—è –≤—ã—Ä—É—á–∫–∞ / –º–µ—Å—è—á–Ω—ã–π –æ—Ç—Ç–æ–∫
        ltv = (data['price'] * 0.8) / (data['churn'] / 100)  # 80% –º–∞—Ä–∂–∞
        ratio = ltv / data['cac']
        payback = data['cac'] / (data['price'] * 0.8)
        
        analysis_data.append({
            '–ü–ª–∞–Ω': plan,
            '–ü–¶–ö': f"{ltv:,.0f} —Ä—É–±",
            '–ü–¶–ö/–°–ü–ö': f"{ratio:.1f}:1",
            '–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å': f"{payback:.1f} –º–µ—Å",
            '–°—Ç–∞—Ç—É—Å': 'üü¢ –•–æ—Ä–æ—à–æ' if ratio > 3 else 'üü° –°—Ä–µ–¥–Ω–µ' if ratio > 2 else 'üî¥ –ü–ª–æ—Ö–æ'
        })
    
    df_analysis = pd.DataFrame(analysis_data)
    st.dataframe(df_analysis, use_container_width=True)
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    st.subheader("üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    
    best_plan = max(plans_data.keys(), 
                   key=lambda p: ((plans_data[p]['price'] * 0.8) / (plans_data[p]['churn'] / 100)) / plans_data[p]['cac'])
    
    st.success(f"""
    **–ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã**:
    
    1. **–õ—É—á—à–∏–π –ø–ª–∞–Ω –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è**: {best_plan}
    2. **–ü–∞—Ä–∞–¥–æ–∫—Å SaaS**: –î–æ—Ä–æ–≥–∏–µ –ø–ª–∞–Ω—ã —á–∞—Å—Ç–æ –∏–º–µ—é—Ç –ª—É—á—à–∏–π –ü–¶–ö/–°–ü–ö –∏–∑-–∑–∞ –Ω–∏–∑–∫–æ–≥–æ –æ—Ç—Ç–æ–∫–∞
    3. **–°—Ç—Ä–∞—Ç–µ–≥–∏—è**: –§–æ–∫—É—Å –Ω–∞ upsell —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –±–æ–ª–µ–µ –¥–æ—Ä–æ–≥–∏–µ –ø–ª–∞–Ω—ã
    4. **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è**: –°–Ω–∏–∂–µ–Ω–∏–µ –æ—Ç—Ç–æ–∫–∞ –Ω–∞ 1% —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ —Ä–æ—Å—Ç—É –ü–¶–ö –Ω–∞ 10-15%
    """)

def ecommerce_case():
    """–ö–µ–π—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –∫–æ–º–º–µ—Ä—Ü–∏–∏"""
    st.subheader("üõçÔ∏è –ö–µ–π—Å: –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω –æ–¥–µ–∂–¥—ã")
    
    st.markdown("""
    **–í—ã–∑–æ–≤**: –£ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ –æ–¥–µ–∂–¥—ã –ø—Ä–æ–±–ª–µ–º—ã —Å unit economics. 
    –ù—É–∂–Ω–æ –ø–æ–Ω—è—Ç—å, –∫–∞–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫–∞–Ω–∞–ª—ã –ø—Ä–∏–Ω–æ—Å—è—Ç –ø—Ä–∏–±—ã–ª—å.
    """)
    
    # –î–∞–Ω–Ω—ã–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories = {
        "–ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞": {"aov": 3500, "frequency": 2.5, "margin": 60, "cac": 800},
        "–ú—É–∂—Å–∫–∞—è –æ–¥–µ–∂–¥–∞": {"aov": 4200, "frequency": 1.8, "margin": 55, "cac": 1200},
        "–û–±—É–≤—å": {"aov": 6000, "frequency": 1.2, "margin": 70, "cac": 1500},
        "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã": {"aov": 1200, "frequency": 4.0, "margin": 80, "cac": 400}
    }
    
    st.subheader("üìä –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ç–æ–≤–∞—Ä–æ–≤")
    
    category_analysis = []
    for category, data in categories.items():
        # –ì–æ–¥–æ–≤–∞—è –≤—ã—Ä—É—á–∫–∞ —Å –∫–ª–∏–µ–Ω—Ç–∞
        annual_revenue = data['aov'] * data['frequency']
        # –ì–æ–¥–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å
        annual_profit = annual_revenue * (data['margin'] / 100)
        # –ü—Ä–æ—Å—Ç–æ–π –ü–¶–ö (–±–µ–∑ —É—á–µ—Ç–∞ –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è)
        ltv = annual_profit
        ratio = ltv / data['cac']
        
        category_analysis.append({
            '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': category,
            '–°—Ä–µ–¥–Ω–∏–π —á–µ–∫': f"{data['aov']:,} —Ä—É–±",
            '–ß–∞—Å—Ç–æ—Ç–∞/–≥–æ–¥': f"{data['frequency']:.1f}",
            '–ú–∞—Ä–∂–∞': f"{data['margin']}%",
            '–°–ü–ö': f"{data['cac']:,} —Ä—É–±",
            '–ì–æ–¥–æ–≤–æ–π –ü–¶–ö': f"{ltv:,.0f} —Ä—É–±",
            '–ü–¶–ö/–°–ü–ö': f"{ratio:.1f}:1"
        })
    
    df_categories = pd.DataFrame(category_analysis)
    st.dataframe(df_categories, use_container_width=True)
    
    # –°–µ–∑–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    st.subheader("üìÖ –í–ª–∏—è–Ω–∏–µ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏")
    
    seasonal_impact = st.slider("–°–µ–∑–æ–Ω–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä (Q4 vs Q1)", 1.0, 3.0, 2.2, 0.1)
    
    st.info(f"""
    **–°–µ–∑–æ–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç**: –í Q4 —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –≤ {seasonal_impact:.1f} —Ä–∞–∑–∞,
    –Ω–æ –°–ü–ö —Ç–∞–∫–∂–µ —Ä–∞—Å—Ç–µ—Ç –∏–∑-–∑–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏ –Ω–∞ ~40%.
    
    **–°—Ç—Ä–∞—Ç–µ–≥–∏—è**: –ù–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å –±—é–¥–∂–µ—Ç –¥–ª—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –≤—ã—Å–æ–∫–∏–π —Å–µ–∑–æ–Ω.
    """)

def mobile_app_case():
    """–ö–µ–π—Å –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    st.subheader("üì± –ö–µ–π—Å: –ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ñ–∏—Ç–Ω–µ—Å–∞")
    
    st.markdown("""
    **–°–ø–µ—Ü–∏—Ñ–∏–∫–∞**: Freemium –º–æ–¥–µ–ª—å —Å –ø–æ–¥–ø–∏—Å–∫–æ–π. –û—Å–Ω–æ–≤–Ω–∞—è –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ 
    –∫–æ–Ω–≤–µ—Ä—Å–∏—é –≤ –ø–ª–∞—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é –∏ —É–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.
    """)
    
    # –í–æ—Ä–æ–Ω–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
    funnel_data = {
        "–£—Å—Ç–∞–Ω–æ–≤–∫–∏": 10000,
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏": 6000,  # 60% conversion rate
        "–ê–∫—Ç–∏–≤–Ω—ã–µ 7 –¥–Ω–µ–π": 3000,  # 50% retention 
        "–ü–ª–∞—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏": 300,  # 10% conversion to paid
        "–°–ü–ö –∑–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É": 25,
        "–°–ü–ö –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É": 250
    }
    
    st.subheader("üéØ –í–æ—Ä–æ–Ω–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("–£—Å—Ç–∞–Ω–æ–≤–∫–∏", f"{funnel_data['–£—Å—Ç–∞–Ω–æ–≤–∫–∏']:,}")
        st.metric("–°–ü–ö –∑–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É", f"{funnel_data['–°–ü–ö –∑–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É']} —Ä—É–±")
        
    with col2:
        st.metric("–ê–∫—Ç–∏–≤–Ω—ã–µ 7 –¥–Ω–µ–π", f"{funnel_data['–ê–∫—Ç–∏–≤–Ω—ã–µ 7 –¥–Ω–µ–π']:,}")
        retention_7d = funnel_data['–ê–∫—Ç–∏–≤–Ω—ã–µ 7 –¥–Ω–µ–π'] / funnel_data['–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏']
        st.metric("–£–¥–µ—Ä–∂–∞–Ω–∏–µ 7 –¥–Ω–µ–π", f"{retention_7d:.1%}")
        
    with col3:
        st.metric("–ü–ª–∞—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏", f"{funnel_data['–ü–ª–∞—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏']:,}")
        st.metric("–°–ü–ö –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É", f"{funnel_data['–°–ü–ö –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É']} —Ä—É–±")
    
    # –†–∞—Å—á–µ—Ç –ü–¶–ö
    subscription_price = st.slider("–¶–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (—Ä—É–±/–º–µ—Å)", 200, 1000, 400)
    monthly_churn = st.slider("–ú–µ—Å—è—á–Ω—ã–π –æ—Ç—Ç–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (%)", 5, 25, 12)
    
    # –ü–¶–ö –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
    ltv_subscriber = (subscription_price * 0.7) / (monthly_churn / 100)  # 70% –ø–æ—Å–ª–µ –∫–æ–º–∏—Å—Å–∏–π
    
    # –û–±—â–∏–π –ü–¶–ö —Å —É—á–µ—Ç–æ–º –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
    conversion_to_paid = funnel_data['–ü–ª–∞—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏'] / funnel_data['–ê–∫—Ç–∏–≤–Ω—ã–µ 7 –¥–Ω–µ–π']
    ltv_total = ltv_subscriber * conversion_to_paid
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.metric("–ü–¶–ö –ø–æ–¥–ø–∏—Å—á–∏–∫–∞", f"{ltv_subscriber:,.0f} —Ä—É–±")
        ratio_subscriber = ltv_subscriber / funnel_data['–°–ü–ö –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É']
        st.metric("–ü–¶–ö/–°–ü–ö –ø–æ–¥–ø–∏—Å—á–∏–∫–∞", f"{ratio_subscriber:.1f}:1")
        
    with col2:
        st.metric("–û–±—â–∏–π –ü–¶–ö —Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏", f"{ltv_total:,.0f} —Ä—É–±")
        ratio_total = ltv_total / funnel_data['–°–ü–ö –∑–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É']
        st.metric("–û–±—â–∏–π –ü–¶–ö/–°–ü–ö", f"{ratio_total:.1f}:1")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    st.subheader("üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
    
    if ratio_subscriber < 3:
        st.error("üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–π –ü–¶–ö/–°–ü–ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤! –ù—É–∂–Ω–æ —Å–Ω–∏–∂–∞—Ç—å –æ—Ç—Ç–æ–∫ –∏–ª–∏ –ø–æ–≤—ã—à–∞—Ç—å —Ü–µ–Ω—É.")
    
    if conversion_to_paid < 0.15:
        st.warning("‚ö†Ô∏è –ù–∏–∑–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø–ª–∞—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é. –£–ª—É—á—à–∞–π—Ç–µ onboarding –∏ value proposition.")
    
    st.info(f"""
    **–ú–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞**:
    
    1. **–î–≤–æ–π–Ω–∞—è –≤–æ—Ä–æ–Ω–∫–∞**: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ ‚Üí –ê–∫—Ç–∏–≤–∞—Ü–∏—è ‚Üí –ú–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è
    2. **–ö–ª—é—á–µ–≤–∞—è –º–µ—Ç—Ä–∏–∫–∞**: –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø–ª–∞—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é ({conversion_to_paid:.1%})
    3. **–§–æ–∫—É—Å –Ω–∞ retention**: –°–Ω–∏–∂–µ–Ω–∏–µ –æ—Ç—Ç–æ–∫–∞ –Ω–∞ 1% = —Ä–æ—Å—Ç –ü–¶–ö –Ω–∞ ~8%
    4. **–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å**: –Ø–Ω–≤–∞—Ä—å (–Ω–æ–≤–æ–≥–æ–¥–Ω–∏–µ –æ–±–µ—â–∞–Ω–∏—è) vs –ª–µ—Ç–æ (–ø–ª—è–∂–Ω—ã–π —Å–µ–∑–æ–Ω)
    """)

def b2b_case():
    """–ö–µ–π—Å B2B —Å–µ—Ä–≤–∏—Å–∞"""
    st.subheader("üè¢ –ö–µ–π—Å: B2B –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏")
    
    st.markdown("""
    **–°–ø–µ—Ü–∏—Ñ–∏–∫–∞ B2B**: –î–ª–∏–Ω–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–æ–¥–∞–∂, –≤—ã—Å–æ–∫–∏–µ —á–µ–∫–∏, —Å–ª–æ–∂–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π.
    –í–∞–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –ø–æ–ª–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂, –≤–∫–ª—é—á–∞—è —Ä–∞–±–æ—Ç—É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤.
    """)
    
    # –°–µ–≥–º–µ–Ω—Ç—ã –∫–ª–∏–µ–Ω—Ç–æ–≤
    segments = {
        "SMB (10-50 —Å–æ—Ç—Ä.)": {
            "deal_size": 15000, "sales_cycle": 2, "close_rate": 25, 
            "churn_annual": 20, "expansion_revenue": 1.2
        },
        "Mid-market (50-200)": {
            "deal_size": 45000, "sales_cycle": 4, "close_rate": 15,
            "churn_annual": 12, "expansion_revenue": 1.5  
        },
        "Enterprise (200+)": {
            "deal_size": 150000, "sales_cycle": 8, "close_rate": 8,
            "churn_annual": 8, "expansion_revenue": 2.0
        }
    }
    
    st.subheader("üìä –°–µ–≥–º–µ–Ω—Ç—ã –∫–ª–∏–µ–Ω—Ç–æ–≤")
    
    # –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ø—Ä–æ–¥–∞–∂–∏
    sales_costs = {
        "–ó–∞—Ä–ø–ª–∞—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞": 120000,  # –≤ –º–µ—Å—è—Ü
        "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ (–ª–∏–¥—ã)": 800,      # –∑–∞ –ª–∏–¥
        "–î–µ–º–æ/–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏": 5000,     # –∑–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å
        "–ü–æ–µ–∑–¥–∫–∏/–≤—Å—Ç—Ä–µ—á–∏": 15000      # –Ω–∞ –∫—Ä—É–ø–Ω—É—é —Å–¥–µ–ª–∫—É
    }
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üí∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞—Ç—Ä–∞—Ç –Ω–∞ –ø—Ä–æ–¥–∞–∂–∏**")
        for cost_type, value in sales_costs.items():
            sales_costs[cost_type] = st.number_input(
                cost_type, value=value, key=f"cost_{cost_type}")
    
    with col2:
        st.markdown("**‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤**")
        selected_segment = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–≥–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", list(segments.keys()))
    
    # –†–∞—Å—á–µ—Ç –ø–æ–ª–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    segment_data = segments[selected_segment]
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–∏
    leads_per_deal = 100 / segment_data['close_rate']
    
    # –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–∞ –æ–¥–Ω—É —Å–¥–µ–ª–∫—É
    manager_cost_per_deal = (sales_costs['–ó–∞—Ä–ø–ª–∞—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞'] / 30) * segment_data['sales_cycle'] * 30
    
    # –ü–æ–ª–Ω—ã–π –°–ê–ö
    full_cac = (
        leads_per_deal * sales_costs['–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ (–ª–∏–¥—ã)'] +
        manager_cost_per_deal +
        sales_costs['–î–µ–º–æ/–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏'] * (leads_per_deal / 10) +  # 10% –¥–æ—Ö–æ–¥—è—Ç –¥–æ –¥–µ–º–æ
        (sales_costs['–ü–æ–µ–∑–¥–∫–∏/–≤—Å—Ç—Ä–µ—á–∏'] if segment_data['deal_size'] > 50000 else 0)
    )
    
    # –†–∞—Å—á–µ—Ç –ü–¶–ö —Å —É—á–µ—Ç–æ–º expansion revenue
    annual_revenue = segment_data['deal_size']
    annual_churn = segment_data['churn_annual'] / 100
    years_lifetime = 1 / annual_churn
    
    # –° —É—á–µ—Ç–æ–º —Ä–æ—Å—Ç–∞ –≤—ã—Ä—É—á–∫–∏ (upsell/cross-sell)
    total_ltv = 0
    for year in range(1, min(int(years_lifetime) + 2, 6)):  # –î–æ 5 –ª–µ—Ç
        year_revenue = annual_revenue * (segment_data['expansion_revenue'] ** (year - 1))
        survival_rate = (1 - annual_churn) ** (year - 1)
        total_ltv += year_revenue * survival_rate * 0.8  # 80% –º–∞—Ä–∂–∞
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    st.subheader(f"üìà –ê–Ω–∞–ª–∏–∑ —Å–µ–≥–º–µ–Ω—Ç–∞: {selected_segment}")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–†–∞–∑–º–µ—Ä —Å–¥–µ–ª–∫–∏", f"{segment_data['deal_size']:,} —Ä—É–±")
        st.metric("–¶–∏–∫–ª –ø—Ä–æ–¥–∞–∂", f"{segment_data['sales_cycle']} –º–µ—Å")
    
    with col2:
        st.metric("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç–∏—è", f"{segment_data['close_rate']}%")
        st.metric("–ì–æ–¥–æ–≤–æ–π –æ—Ç—Ç–æ–∫", f"{segment_data['churn_annual']}%")
    
    with col3:
        st.metric("–ü–æ–ª–Ω—ã–π –°–ü–ö", f"{full_cac:,.0f} —Ä—É–±")
        st.metric("–õ–∏–¥–æ–≤ –Ω–∞ —Å–¥–µ–ª–∫—É", f"{leads_per_deal:.0f}")
    
    with col4:
        st.metric("–ü–¶–ö", f"{total_ltv:,.0f} —Ä—É–±")
        ratio = total_ltv / full_cac
        st.metric("–ü–¶–ö/–°–ü–ö", f"{ratio:.1f}:1")
    
    # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –°–ü–ö
    st.subheader("üîç –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –°–ü–ö")
    
    cac_breakdown = {
        "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–∏–¥–æ–≤": leads_per_deal * sales_costs['–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ (–ª–∏–¥—ã)'],
        "–†–∞–±–æ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞": manager_cost_per_deal,
        "–î–µ–º–æ –∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏": sales_costs['–î–µ–º–æ/–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏'] * (leads_per_deal / 10),
        "–ü–æ–µ–∑–¥–∫–∏/–≤—Å—Ç—Ä–µ—á–∏": sales_costs['–ü–æ–µ–∑–¥–∫–∏/–≤—Å—Ç—Ä–µ—á–∏'] if segment_data['deal_size'] > 50000 else 0
    }
    
    # –ì—Ä–∞—Ñ–∏–∫ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –°–ü–ö
    fig = go.Figure(data=[go.Pie(
        labels=list(cac_breakdown.keys()),
        values=list(cac_breakdown.values()),
        hole=0.3
    )])
    
    fig.update_layout(
        title="–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–ª–Ω–æ–≥–æ –°–ü–ö",
        height=400
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    st.subheader("üí° –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    
    if ratio > 5:
        st.success(f"üéâ –û—Ç–ª–∏—á–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–ª—è B2B! –ú–æ–∂–Ω–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å {selected_segment} —Å–µ–≥–º–µ–Ω—Ç.")
    elif ratio > 3:
        st.info(f"üëç –•–æ—Ä–æ—à–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏. –ï—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ–¥–∞–∂.")
    else:
        st.warning(f"‚ö†Ô∏è –ù–∏–∑–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏. –ù—É–∂–Ω–æ –ø–µ—Ä–µ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è {selected_segment}.")
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    st.subheader("üöÄ –°—Ü–µ–Ω–∞—Ä–∏–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
    
    optimization_levers = {
        "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –Ω–∞ 20%": {"close_rate": 1.2, "effect": "–°–Ω–∏–∂–µ–Ω–∏–µ –°–ü–ö"},
        "–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ —Ü–∏–∫–ª–∞ –ø—Ä–æ–¥–∞–∂ –Ω–∞ 1 –º–µ—Å—è—Ü": {"sales_cycle": -1, "effect": "–°–Ω–∏–∂–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞"},
        "–ü–æ–≤—ã—à–µ–Ω–∏–µ retention –Ω–∞ 5%": {"churn": -5, "effect": "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ü–¶–ö"},
        "–†–æ—Å—Ç expansion revenue –¥–æ 150%": {"expansion": 1.5, "effect": "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ü–¶–ö"}
    }
    
    selected_optimization = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ä—ã—á–∞–≥ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:", list(optimization_levers.keys()))
    
    if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç"):
        st.success(f"üìä {selected_optimization} –º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å –ü–¶–ö/–°–ü–ö –Ω–∞ 15-30%")

def subscription_case():
    """–ö–µ–π—Å –ø–æ–¥–ø–∏—Å–æ—á–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""
    st.subheader("üì∫ –ö–µ–π—Å: –ü–æ–¥–ø–∏—Å–æ—á–Ω—ã–π —Å—Ç—Ä–∏–º–∏–Ω–≥-—Å–µ—Ä–≤–∏—Å")
    
    st.markdown("""
    **–ú–æ–¥–µ–ª—å**: Netflix-–ø–æ–¥–æ–±–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ç–∞—Ä–∏—Ñ–∞–º–∏ –∏ family sharing.
    –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏: –≤—Ä–µ–º—è –¥–æ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞, engagement, family account usage.
    """)
    
    # –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã
    subscription_tiers = {
        "–ë–∞–∑–æ–≤—ã–π (1 —ç–∫—Ä–∞–Ω)": {"price": 299, "family_size": 1.0, "content_cost": 150},
        "–°—Ç–∞–Ω–¥–∞—Ä—Ç (2 —ç–∫—Ä–∞–Ω–∞)": {"price": 499, "family_size": 1.8, "content_cost": 200},
        "–ü—Ä–µ–º–∏—É–º (4 —ç–∫—Ä–∞–Ω–∞)": {"price": 899, "family_size": 2.5, "content_cost": 300}
    }
    
    # –ú–µ—Ç—Ä–∏–∫–∏ engagement
    engagement_metrics = {
        "–í—Ä–µ–º—è –¥–æ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞": 24,  # —á–∞—Å–æ–≤
        "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞": 2.5,    # —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å
        "–ö–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–π churn": 15,            # % –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ 30 –¥–Ω–µ–π
        "–°–µ–∑–æ–Ω–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä": 1.3             # –∑–∏–º–∞ vs –ª–µ—Ç–æ
    }
    
    st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ—Ç—Ä–∏–∫ —Å–µ—Ä–≤–∏—Å–∞")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üìä Engagement –º–µ—Ç—Ä–∏–∫–∏**")
        for metric, value in engagement_metrics.items():
            if "–≤—Ä–µ–º—è" in metric.lower():
                engagement_metrics[metric] = st.slider(f"{metric}", value*0.5, value*2, value)
            else:
                engagement_metrics[metric] = st.slider(f"{metric}", value*0.5, value*2, value)
    
    with col2:
        st.markdown("**üí∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞—Ä–∏—Ñ–æ–≤**")
        selected_tier = st.selectbox("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π —Ç–∞—Ä–∏—Ñ:", list(subscription_tiers.keys()))
        
        # –°–ü–ö –ø–æ –∫–∞–Ω–∞–ª–∞–º –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
        streaming_cac = {
            "–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞": 450,
            "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏": 380,
            "YouTube —Ä–µ–∫–ª–∞–º–∞": 520,
            "TV —Ä–µ–∫–ª–∞–º–∞": 180,
            "Influencer –º–∞—Ä–∫–µ—Ç–∏–Ω–≥": 650
        }
        
        selected_channel = st.selectbox("–ö–∞–Ω–∞–ª –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è:", list(streaming_cac.keys()))
        current_cac = streaming_cac[selected_channel]
    
    # –†–∞—Å—á–µ—Ç –ü–¶–ö —Å —É—á–µ—Ç–æ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
    tier_data = subscription_tiers[selected_tier]
    
    # –ë–∞–∑–æ–≤—ã–π –º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥ —Å —É—á–µ—Ç–æ–º family sharing
    effective_revenue = tier_data['price'] / tier_data['family_size']
    net_revenue = effective_revenue - tier_data['content_cost']
    
    # –ú–æ–¥–µ–ª—å –æ—Ç—Ç–æ–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ engagement
    base_churn = 8  # –±–∞–∑–æ–≤—ã–π –º–µ—Å—è—á–Ω—ã–π –æ—Ç—Ç–æ–∫ %
    
    # Engagement –≤–ª–∏—è–µ—Ç –Ω–∞ –æ—Ç—Ç–æ–∫
    if engagement_metrics['–í—Ä–µ–º—è –¥–æ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞'] > 48:
        churn_multiplier = 1.5  # –¥–æ–ª–≥–æ –Ω–µ –Ω–∞—á–∏–Ω–∞—é—Ç —Å–º–æ—Ç—Ä–µ—Ç—å = –≤—ã—à–µ –æ—Ç—Ç–æ–∫
    elif engagement_metrics['–í—Ä–µ–º—è –¥–æ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞'] < 12:
        churn_multiplier = 0.7  # –±—ã—Å—Ç—Ä–æ –Ω–∞—á–∏–Ω–∞—é—Ç = –Ω–∏–∂–µ –æ—Ç—Ç–æ–∫
    else:
        churn_multiplier = 1.0
    
    if engagement_metrics['–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞'] < 1:
        churn_multiplier *= 1.3  # –º–∞–ª–æ —Å–º–æ—Ç—Ä—è—Ç = –≤—ã—à–µ –æ—Ç—Ç–æ–∫
    elif engagement_metrics['–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞'] > 3:
        churn_multiplier *= 0.8  # –º–Ω–æ–≥–æ —Å–º–æ—Ç—Ä—è—Ç = –Ω–∏–∂–µ –æ—Ç—Ç–æ–∫
    
    effective_churn = base_churn * churn_multiplier
    
    # –ü–¶–ö —Å —É—á–µ—Ç–æ–º —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏
    ltv_summer = net_revenue / (effective_churn * 1.2 / 100)  # –ª–µ—Ç–æ–º —Å–º–æ—Ç—Ä—è—Ç –º–µ–Ω—å—à–µ
    ltv_winter = net_revenue / (effective_churn * 0.8 / 100)  # –∑–∏–º–æ–π –±–æ–ª—å—à–µ
    
    avg_ltv = (ltv_summer + ltv_winter) / 2
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    st.subheader(f"üìà –ê–Ω–∞–ª–∏–∑: {selected_tier} + {selected_channel}")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–¶–µ–Ω–∞ —Ç–∞—Ä–∏—Ñ–∞", f"{tier_data['price']} —Ä—É–±")
        st.metric("Family sharing", f"{tier_data['family_size']:.1f}")
    
    with col2:
        st.metric("–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥", f"{effective_revenue:.0f} —Ä—É–±")
        st.metric("–ß–∏—Å—Ç—ã–π –¥–æ—Ö–æ–¥", f"{net_revenue:.0f} —Ä—É–±")
    
    with col3:
        st.metric("–°–ü–ö –∫–∞–Ω–∞–ª–∞", f"{current_cac} —Ä—É–±")
        st.metric("–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –æ—Ç—Ç–æ–∫", f"{effective_churn:.1f}%")
    
    with col4:
        st.metric("–°—Ä–µ–¥–Ω–∏–π –ü–¶–ö", f"{avg_ltv:,.0f} —Ä—É–±")
        ratio = avg_ltv / current_cac
        st.metric("–ü–¶–ö/–°–ü–ö", f"{ratio:.1f}:1")
    
    # –°–µ–∑–æ–Ω–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞
    st.subheader("üìÖ –°–µ–∑–æ–Ω–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞")
    
    months = ['–Ø–Ω–≤', '–§–µ–≤', '–ú–∞—Ä', '–ê–ø—Ä', '–ú–∞–π', '–ò—é–Ω', 
              '–ò—é–ª', '–ê–≤–≥', '–°–µ–Ω', '–û–∫—Ç', '–ù–æ—è', '–î–µ–∫']
    
    # –°–µ–∑–æ–Ω–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã (–∑–∏–º–∞ –≤—ã—à–µ, –ª–µ—Ç–æ –Ω–∏–∂–µ)
    seasonal_coeffs = [1.3, 1.4, 1.2, 1.0, 0.8, 0.7, 0.6, 0.7, 0.9, 1.1, 1.2, 1.4]
    
    monthly_ltv = [avg_ltv * coeff for coeff in seasonal_coeffs]
    monthly_ratio = [ltv / current_cac for ltv in monthly_ltv]
    
    fig = go.Figure()
    
    fig.add_trace(go.Scatter(
        x=months, y=monthly_ratio,
        mode='lines+markers',
        name='–ü–¶–ö/–°–ü–ö –ø–æ –º–µ—Å—è—Ü–∞–º',
        line=dict(color='blue', width=3),
        marker=dict(size=8)
    ))
    
    # –õ–∏–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞
    fig.add_hline(y=3, line_dash="dash", line_color="green", 
                  annotation_text="–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ 3:1")
    fig.add_hline(y=2, line_dash="dash", line_color="red",
                  annotation_text="–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ä–æ–≥ 2:1")
    
    fig.update_layout(
        title="–°–µ–∑–æ–Ω–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è –ü–¶–ö/–°–ü–ö",
        xaxis_title="–ú–µ—Å—è—Ü",
        yaxis_title="–ü–¶–ö/–°–ü–ö",
        height=400
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
    st.subheader("üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞")
    
    critical_months = [i for i, ratio in enumerate(monthly_ratio) if ratio < 2]
    
    if critical_months:
        month_names = [months[i] for i in critical_months]
        st.error(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Å—è—Ü—ã: {', '.join(month_names)}. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –°–ü–ö –∏–ª–∏ —Å–ø–µ—Ü.–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.")
    
    st.info(f"""
    **–°—Ç—Ä–∏–º–∏–Ω–≥-—Å–ø–µ—Ü–∏—Ñ–∏–∫–∞**:
    
    1. **Family sharing —É–±–∏–≤–∞–µ—Ç unit economics**: –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ {effective_revenue:.0f} —Ä—É–± –≤–º–µ—Å—Ç–æ {tier_data['price']} —Ä—É–±
    2. **Content costs —Ä–∞—Å—Ç—É—Ç**: –ù—É–∂–Ω–æ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –∫–æ–Ω—Ç–µ–Ω—Ç
    3. **Engagement = retention**: –í—Ä–µ–º—è –¥–æ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫—Ä–∏—Ç–∏—á–Ω–æ
    4. **–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å**: –ó–∏–º–æ–π –ü–¶–ö –≤—ã—à–µ –Ω–∞ 30-40%
    5. **–ö–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è**: –õ–µ–≥–∫–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º
    
    **–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏**:
    - –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å family sharing (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è)
    - –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ engagement
    - –°–µ–∑–æ–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏ –≤ —Å–ª–∞–±—ã–µ –º–µ—Å—è—Ü—ã
    - –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è retention
    """)

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    main()